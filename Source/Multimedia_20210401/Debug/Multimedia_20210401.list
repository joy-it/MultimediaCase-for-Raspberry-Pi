
Multimedia_20210401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000387c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc8  08003bc8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc8  08003bc8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc8  08003bc8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000018  08003be8  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08003be8  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144c7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ff0  00000000  00000000  00034507  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a76f  00000000  00000000  000374f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000d20  00000000  00000000  00041c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000013f8  00000000  00000000  00042988  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000103de  00000000  00000000  00043d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d8ba  00000000  00000000  0005415e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000619e2  00000000  00000000  00061a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c33fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029d0  00000000  00000000  000c3478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003924 	.word	0x08003924

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08003924 	.word	0x08003924

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_llsr>:
 8000248:	40d0      	lsrs	r0, r2
 800024a:	1c0b      	adds	r3, r1, #0
 800024c:	40d1      	lsrs	r1, r2
 800024e:	469c      	mov	ip, r3
 8000250:	3a20      	subs	r2, #32
 8000252:	40d3      	lsrs	r3, r2
 8000254:	4318      	orrs	r0, r3
 8000256:	4252      	negs	r2, r2
 8000258:	4663      	mov	r3, ip
 800025a:	4093      	lsls	r3, r2
 800025c:	4318      	orrs	r0, r3
 800025e:	4770      	bx	lr

08000260 <irmp_store_bit>:
// verhindert, dass irmp_store_bit() inline compiliert wird:
// static void irmp_store_bit (uint_fast8_t) __attribute__ ((noinline));

static void
irmp_store_bit (uint_fast8_t value)
{
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
        first_bit = value;
    }
    else
#endif

    if (irmp_bit >= irmp_param.address_offset && irmp_bit < irmp_param.address_end)
 8000262:	4a29      	ldr	r2, [pc, #164]	; (8000308 <irmp_store_bit+0xa8>)
 8000264:	4c29      	ldr	r4, [pc, #164]	; (800030c <irmp_store_bit+0xac>)
 8000266:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8000268:	6823      	ldr	r3, [r4, #0]
 800026a:	429d      	cmp	r5, r3
 800026c:	d803      	bhi.n	8000276 <irmp_store_bit+0x16>
 800026e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000270:	4e27      	ldr	r6, [pc, #156]	; (8000310 <irmp_store_bit+0xb0>)
 8000272:	428b      	cmp	r3, r1
 8000274:	d306      	bcc.n	8000284 <irmp_store_bit+0x24>
        {
            irmp_tmp_address <<= 1;
            irmp_tmp_address |= value;
        }
    }
    else if (irmp_bit >= irmp_param.command_offset && irmp_bit < irmp_param.command_end)
 8000276:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8000278:	42ab      	cmp	r3, r5
 800027a:	d30c      	bcc.n	8000296 <irmp_store_bit+0x36>
 800027c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800027e:	428b      	cmp	r3, r1
 8000280:	d209      	bcs.n	8000296 <irmp_store_bit+0x36>
 8000282:	4e24      	ldr	r6, [pc, #144]	; (8000314 <irmp_store_bit+0xb4>)
    {
        if (irmp_param.lsb_first)
 8000284:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
 8000286:	6831      	ldr	r1, [r6, #0]
 8000288:	2f00      	cmp	r7, #0
 800028a:	d013      	beq.n	80002b4 <irmp_store_bit+0x54>
                irmp_tmp_id |= (((uint_fast16_t) (value)) << (irmp_bit - 32));   // CV wants cast
            }
            else
#endif
            {
                irmp_tmp_command |= (((uint_fast16_t) (value)) << (irmp_bit - irmp_param.command_offset));   // CV wants cast
 800028c:	0007      	movs	r7, r0
 800028e:	1b5d      	subs	r5, r3, r5
 8000290:	40af      	lsls	r7, r5
 8000292:	4339      	orrs	r1, r7
            }
        }
        else
        {
            irmp_tmp_command <<= 1;
            irmp_tmp_command |= value;
 8000294:	6031      	str	r1, [r6, #0]
    }
    else
#endif

#if IRMP_SUPPORT_SAMSUNG_PROTOCOL == 1
    if (irmp_param.protocol == IRMP_SAMSUNG_PROTOCOL && irmp_bit >= SAMSUNG_ID_OFFSET && irmp_bit < SAMSUNG_ID_OFFSET + SAMSUNG_ID_LEN)
 8000296:	6812      	ldr	r2, [r2, #0]
 8000298:	2a03      	cmp	r2, #3
 800029a:	d10e      	bne.n	80002ba <irmp_store_bit+0x5a>
 800029c:	0019      	movs	r1, r3
 800029e:	3911      	subs	r1, #17
 80002a0:	2903      	cmp	r1, #3
 80002a2:	d804      	bhi.n	80002ae <irmp_store_bit+0x4e>
    {
        irmp_tmp_id |= (((uint_fast16_t) (value)) << (irmp_bit - SAMSUNG_ID_OFFSET));                    // store with LSB first
 80002a4:	4088      	lsls	r0, r1
 80002a6:	4a1c      	ldr	r2, [pc, #112]	; (8000318 <irmp_store_bit+0xb8>)
 80002a8:	6811      	ldr	r1, [r2, #0]
 80002aa:	4308      	orrs	r0, r1
 80002ac:	6010      	str	r0, [r2, #0]
#endif // IRMP_SUPPORT_MITSU_HEAVY_PROTOCOL
    {
        ;
    }

    irmp_bit++;
 80002ae:	3301      	adds	r3, #1
 80002b0:	6023      	str	r3, [r4, #0]
}
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            irmp_tmp_command <<= 1;
 80002b4:	0049      	lsls	r1, r1, #1
            irmp_tmp_command |= value;
 80002b6:	4301      	orrs	r1, r0
 80002b8:	e7ec      	b.n	8000294 <irmp_store_bit+0x34>
    if (irmp_param.protocol == IRMP_KASEIKYO_PROTOCOL)
 80002ba:	2a05      	cmp	r2, #5
 80002bc:	d1f7      	bne.n	80002ae <irmp_store_bit+0x4e>
        if (irmp_bit >= 20 && irmp_bit < 24)
 80002be:	001a      	movs	r2, r3
 80002c0:	3a14      	subs	r2, #20
 80002c2:	2a03      	cmp	r2, #3
 80002c4:	d814      	bhi.n	80002f0 <irmp_store_bit+0x90>
            irmp_tmp_command |= (((uint_fast16_t) (value)) << (irmp_bit - 8));      // store 4 system bits (genre 1) in upper nibble with LSB first
 80002c6:	4913      	ldr	r1, [pc, #76]	; (8000314 <irmp_store_bit+0xb4>)
 80002c8:	320c      	adds	r2, #12
            genre2 |= (((uint_fast8_t) (value)) << (irmp_bit - 20));                // store 4 system bits (genre 2) in upper nibble with LSB first
 80002ca:	0005      	movs	r5, r0
 80002cc:	4095      	lsls	r5, r2
 80002ce:	002a      	movs	r2, r5
 80002d0:	680d      	ldr	r5, [r1, #0]
 80002d2:	432a      	orrs	r2, r5
 80002d4:	600a      	str	r2, [r1, #0]
 80002d6:	2207      	movs	r2, #7
 80002d8:	2101      	movs	r1, #1
 80002da:	401a      	ands	r2, r3
 80002dc:	4091      	lsls	r1, r2
 80002de:	4e0f      	ldr	r6, [pc, #60]	; (800031c <irmp_store_bit+0xbc>)
 80002e0:	08dd      	lsrs	r5, r3, #3
 80002e2:	5777      	ldrsb	r7, [r6, r5]
 80002e4:	b24a      	sxtb	r2, r1
            if (value)
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d00b      	beq.n	8000302 <irmp_store_bit+0xa2>
                xor_check[irmp_bit / 8] |= 1 << (irmp_bit % 8);
 80002ea:	433a      	orrs	r2, r7
 80002ec:	5572      	strb	r2, [r6, r5]
 80002ee:	e7de      	b.n	80002ae <irmp_store_bit+0x4e>
        else if (irmp_bit >= 24 && irmp_bit < 28)
 80002f0:	0019      	movs	r1, r3
 80002f2:	3918      	subs	r1, #24
 80002f4:	2903      	cmp	r1, #3
 80002f6:	d801      	bhi.n	80002fc <irmp_store_bit+0x9c>
            genre2 |= (((uint_fast8_t) (value)) << (irmp_bit - 20));                // store 4 system bits (genre 2) in upper nibble with LSB first
 80002f8:	4909      	ldr	r1, [pc, #36]	; (8000320 <irmp_store_bit+0xc0>)
 80002fa:	e7e6      	b.n	80002ca <irmp_store_bit+0x6a>
        if (irmp_bit < KASEIKYO_COMPLETE_DATA_LEN)
 80002fc:	2b2f      	cmp	r3, #47	; 0x2f
 80002fe:	d8d6      	bhi.n	80002ae <irmp_store_bit+0x4e>
 8000300:	e7e9      	b.n	80002d6 <irmp_store_bit+0x76>
                xor_check[irmp_bit / 8] &= ~(1 << (irmp_bit % 8));
 8000302:	4397      	bics	r7, r2
 8000304:	5577      	strb	r7, [r6, r5]
 8000306:	e7d2      	b.n	80002ae <irmp_store_bit+0x4e>
 8000308:	20000050 	.word	0x20000050
 800030c:	2000003c 	.word	0x2000003c
 8000310:	200000a4 	.word	0x200000a4
 8000314:	200000a8 	.word	0x200000a8
 8000318:	200000ac 	.word	0x200000ac
 800031c:	200000d0 	.word	0x200000d0
 8000320:	20000034 	.word	0x20000034

08000324 <irmp_init>:
}
 8000324:	4770      	bx	lr
	...

08000328 <irmp_get_data>:
{
 8000328:	0002      	movs	r2, r0
    uint_fast8_t   rtc = FALSE;
 800032a:	2000      	movs	r0, #0
    if (irmp_ir_detected)
 800032c:	4b34      	ldr	r3, [pc, #208]	; (8000400 <irmp_get_data+0xd8>)
{
 800032e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (irmp_ir_detected)
 8000330:	469c      	mov	ip, r3
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4283      	cmp	r3, r0
 8000336:	d020      	beq.n	800037a <irmp_get_data+0x52>
        switch (irmp_protocol)
 8000338:	4932      	ldr	r1, [pc, #200]	; (8000404 <irmp_get_data+0xdc>)
 800033a:	4b33      	ldr	r3, [pc, #204]	; (8000408 <irmp_get_data+0xe0>)
 800033c:	680d      	ldr	r5, [r1, #0]
 800033e:	4833      	ldr	r0, [pc, #204]	; (800040c <irmp_get_data+0xe4>)
 8000340:	2d03      	cmp	r5, #3
 8000342:	d029      	beq.n	8000398 <irmp_get_data+0x70>
 8000344:	d81a      	bhi.n	800037c <irmp_get_data+0x54>
 8000346:	2d02      	cmp	r5, #2
 8000348:	d038      	beq.n	80003bc <irmp_get_data+0x94>
            irmp_data_p->protocol = irmp_protocol;
 800034a:	6809      	ldr	r1, [r1, #0]
 800034c:	7011      	strb	r1, [r2, #0]
            irmp_data_p->address  = irmp_address;
 800034e:	6801      	ldr	r1, [r0, #0]
 8000350:	2001      	movs	r0, #1
 8000352:	b289      	uxth	r1, r1
 8000354:	7051      	strb	r1, [r2, #1]
 8000356:	0a09      	lsrs	r1, r1, #8
 8000358:	7091      	strb	r1, [r2, #2]
            irmp_data_p->command  = irmp_command;
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	b289      	uxth	r1, r1
 800035e:	70d1      	strb	r1, [r2, #3]
 8000360:	0a09      	lsrs	r1, r1, #8
 8000362:	7111      	strb	r1, [r2, #4]
            irmp_data_p->flags    = irmp_flags;
 8000364:	492a      	ldr	r1, [pc, #168]	; (8000410 <irmp_get_data+0xe8>)
 8000366:	6809      	ldr	r1, [r1, #0]
 8000368:	7151      	strb	r1, [r2, #5]
        irmp_command  = 0;                                      // don't reset irmp_protocol here, needed for detection of NEC & JVC repetition frames!
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
        irmp_address  = 0;
 800036e:	4b27      	ldr	r3, [pc, #156]	; (800040c <irmp_get_data+0xe4>)
 8000370:	601a      	str	r2, [r3, #0]
        irmp_flags    = 0;
 8000372:	4b27      	ldr	r3, [pc, #156]	; (8000410 <irmp_get_data+0xe8>)
 8000374:	601a      	str	r2, [r3, #0]
        irmp_ir_detected = FALSE;
 8000376:	4663      	mov	r3, ip
 8000378:	601a      	str	r2, [r3, #0]
}
 800037a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (irmp_protocol)
 800037c:	2d07      	cmp	r5, #7
 800037e:	d037      	beq.n	80003f0 <irmp_get_data+0xc8>
 8000380:	2d32      	cmp	r5, #50	; 0x32
 8000382:	d1e2      	bne.n	800034a <irmp_get_data+0x22>
                if ((irmp_command >> 8) == (irmp_command & 0x00FF))
 8000384:	27ff      	movs	r7, #255	; 0xff
 8000386:	681d      	ldr	r5, [r3, #0]
 8000388:	681e      	ldr	r6, [r3, #0]
 800038a:	0a2d      	lsrs	r5, r5, #8
 800038c:	403e      	ands	r6, r7
 800038e:	42b5      	cmp	r5, r6
 8000390:	d133      	bne.n	80003fa <irmp_get_data+0xd2>
                    irmp_command &= 0xff;
 8000392:	681d      	ldr	r5, [r3, #0]
 8000394:	403d      	ands	r5, r7
 8000396:	e00f      	b.n	80003b8 <irmp_get_data+0x90>
                if ((irmp_command >> 8) == (~irmp_command & 0x00FF))
 8000398:	27ff      	movs	r7, #255	; 0xff
 800039a:	003c      	movs	r4, r7
 800039c:	681e      	ldr	r6, [r3, #0]
 800039e:	681d      	ldr	r5, [r3, #0]
 80003a0:	0a36      	lsrs	r6, r6, #8
 80003a2:	43ac      	bics	r4, r5
 80003a4:	42a6      	cmp	r6, r4
 80003a6:	d128      	bne.n	80003fa <irmp_get_data+0xd2>
                    irmp_command &= 0xff;
 80003a8:	681d      	ldr	r5, [r3, #0]
 80003aa:	403d      	ands	r5, r7
 80003ac:	601d      	str	r5, [r3, #0]
                    irmp_command |= irmp_id << 8;
 80003ae:	4d19      	ldr	r5, [pc, #100]	; (8000414 <irmp_get_data+0xec>)
 80003b0:	682d      	ldr	r5, [r5, #0]
 80003b2:	681e      	ldr	r6, [r3, #0]
 80003b4:	022d      	lsls	r5, r5, #8
 80003b6:	4335      	orrs	r5, r6
                    irmp_command &= 0xff;
 80003b8:	601d      	str	r5, [r3, #0]
 80003ba:	e7c6      	b.n	800034a <irmp_get_data+0x22>
                if ((irmp_command >> 8) == (~irmp_command & 0x00FF))
 80003bc:	26ff      	movs	r6, #255	; 0xff
 80003be:	0034      	movs	r4, r6
 80003c0:	681d      	ldr	r5, [r3, #0]
 80003c2:	681f      	ldr	r7, [r3, #0]
 80003c4:	0a2d      	lsrs	r5, r5, #8
 80003c6:	43bc      	bics	r4, r7
 80003c8:	42a5      	cmp	r5, r4
 80003ca:	d103      	bne.n	80003d4 <irmp_get_data+0xac>
                    irmp_command &= 0x00FF;
 80003cc:	681d      	ldr	r5, [r3, #0]
 80003ce:	402e      	ands	r6, r5
 80003d0:	601e      	str	r6, [r3, #0]
 80003d2:	e7ba      	b.n	800034a <irmp_get_data+0x22>
                else if (irmp_address == 0x87EE)
 80003d4:	6807      	ldr	r7, [r0, #0]
 80003d6:	4d10      	ldr	r5, [pc, #64]	; (8000418 <irmp_get_data+0xf0>)
 80003d8:	42af      	cmp	r7, r5
 80003da:	d106      	bne.n	80003ea <irmp_get_data+0xc2>
                    irmp_protocol = IRMP_APPLE_PROTOCOL;
 80003dc:	250b      	movs	r5, #11
 80003de:	600d      	str	r5, [r1, #0]
                    irmp_address = (irmp_command & 0xFF00) >> 8;
 80003e0:	681d      	ldr	r5, [r3, #0]
 80003e2:	0a2d      	lsrs	r5, r5, #8
 80003e4:	4035      	ands	r5, r6
 80003e6:	6005      	str	r5, [r0, #0]
 80003e8:	e7f0      	b.n	80003cc <irmp_get_data+0xa4>
                    irmp_protocol = IRMP_ONKYO_PROTOCOL;
 80003ea:	2538      	movs	r5, #56	; 0x38
 80003ec:	600d      	str	r5, [r1, #0]
 80003ee:	e7ac      	b.n	800034a <irmp_get_data+0x22>
                irmp_address &= ~0x20;                              // clear toggle bit
 80003f0:	2620      	movs	r6, #32
 80003f2:	6805      	ldr	r5, [r0, #0]
 80003f4:	43b5      	bics	r5, r6
 80003f6:	6005      	str	r5, [r0, #0]
 80003f8:	e7a7      	b.n	800034a <irmp_get_data+0x22>
            irmp_protocol = IRMP_UNKNOWN_PROTOCOL;
 80003fa:	2000      	movs	r0, #0
 80003fc:	6008      	str	r0, [r1, #0]
 80003fe:	e7b4      	b.n	800036a <irmp_get_data+0x42>
 8000400:	2000004c 	.word	0x2000004c
 8000404:	20000098 	.word	0x20000098
 8000408:	20000040 	.word	0x20000040
 800040c:	20000038 	.word	0x20000038
 8000410:	20000044 	.word	0x20000044
 8000414:	20000048 	.word	0x20000048
 8000418:	000087ee 	.word	0x000087ee

0800041c <irmp_ISR>:
 *  @details  ISR routine, called 10000 times per second
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint_fast8_t
irmp_ISR (void)
{
 800041c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    irmp_input = input(IRMP_GPIO_STRUCT->IDR)
#elif defined(__MBED__)
    //irmp_input = inputPin;
    irmp_input = gpio_read (&gpioIRin);
#else
    irmp_input = input(IRMP_PIN);
 800041e:	2090      	movs	r0, #144	; 0x90
 8000420:	2140      	movs	r1, #64	; 0x40
 8000422:	05c0      	lsls	r0, r0, #23
 8000424:	f001 ff76 	bl	8002314 <HAL_GPIO_ReadPin>
    }
#endif // IRMP_USE_CALLBACK == 1

    irmp_log(irmp_input);                                                       // log ir signal, if IRMP_LOGGING defined

    if (! irmp_ir_detected)                                                     // ir code already detected?
 8000428:	4bb1      	ldr	r3, [pc, #708]	; (80006f0 <irmp_ISR+0x2d4>)
 800042a:	6819      	ldr	r1, [r3, #0]
 800042c:	2900      	cmp	r1, #0
 800042e:	d109      	bne.n	8000444 <irmp_ISR+0x28>
    {                                                                           // no...
        if (! irmp_start_bit_detected)                                          // start bit detected?
 8000430:	4ab0      	ldr	r2, [pc, #704]	; (80006f4 <irmp_ISR+0x2d8>)
 8000432:	6813      	ldr	r3, [r2, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d137      	bne.n	80004a8 <irmp_ISR+0x8c>
 8000438:	4caf      	ldr	r4, [pc, #700]	; (80006f8 <irmp_ISR+0x2dc>)
 800043a:	6821      	ldr	r1, [r4, #0]
        {                                                                       // no...
            if (! irmp_input)                                                   // receiving burst?
 800043c:	2800      	cmp	r0, #0
 800043e:	d104      	bne.n	800044a <irmp_ISR+0x2e>
                if (! irmp_pulse_time)
                {
                    ANALYZE_PRINTF("%8.3fms [starting pulse]\n", (double) (time_counter * 1000) / F_INTERRUPTS);
                }
#endif // ANALYZE
                irmp_pulse_time++;                                              // increment counter
 8000440:	3101      	adds	r1, #1
 8000442:	6021      	str	r1, [r4, #0]

        irmp_idle();
    }
#endif // IRMP_USE_IDLE_CALL

    return (irmp_ir_detected);
 8000444:	4baa      	ldr	r3, [pc, #680]	; (80006f0 <irmp_ISR+0x2d4>)
 8000446:	6818      	ldr	r0, [r3, #0]
}
 8000448:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                if (irmp_pulse_time)                                            // it's dark....
 800044a:	2900      	cmp	r1, #0
 800044c:	d015      	beq.n	800047a <irmp_ISR+0x5e>
                    irmp_start_bit_detected = 1;
 800044e:	2101      	movs	r1, #1
                    irmp_bit                = 0xff;
 8000450:	20ff      	movs	r0, #255	; 0xff
                    irmp_start_bit_detected = 1;
 8000452:	6011      	str	r1, [r2, #0]
                    wait_for_start_space    = 1;
 8000454:	4aa9      	ldr	r2, [pc, #676]	; (80006fc <irmp_ISR+0x2e0>)
 8000456:	6011      	str	r1, [r2, #0]
                    wait_for_space          = 0;
 8000458:	4aa9      	ldr	r2, [pc, #676]	; (8000700 <irmp_ISR+0x2e4>)
 800045a:	6013      	str	r3, [r2, #0]
                    irmp_tmp_command        = 0;
 800045c:	4aa9      	ldr	r2, [pc, #676]	; (8000704 <irmp_ISR+0x2e8>)
 800045e:	6013      	str	r3, [r2, #0]
                    irmp_tmp_address        = 0;
 8000460:	4aa9      	ldr	r2, [pc, #676]	; (8000708 <irmp_ISR+0x2ec>)
 8000462:	6013      	str	r3, [r2, #0]
                    genre2                  = 0;
 8000464:	4aa9      	ldr	r2, [pc, #676]	; (800070c <irmp_ISR+0x2f0>)
 8000466:	6013      	str	r3, [r2, #0]
                    irmp_tmp_id = 0;
 8000468:	4aa9      	ldr	r2, [pc, #676]	; (8000710 <irmp_ISR+0x2f4>)
 800046a:	6013      	str	r3, [r2, #0]
                    irmp_bit                = 0xff;
 800046c:	4aa9      	ldr	r2, [pc, #676]	; (8000714 <irmp_ISR+0x2f8>)
 800046e:	6010      	str	r0, [r2, #0]
                    irmp_pause_time         = 1;                                // 1st pause: set to 1, not to 0!
 8000470:	4aa9      	ldr	r2, [pc, #676]	; (8000718 <irmp_ISR+0x2fc>)
 8000472:	7011      	strb	r1, [r2, #0]
                    rc5_cmd_bit6            = 0;                                // fm 2010-03-07: bugfix: reset it after incomplete RC5 frame!
 8000474:	4aa9      	ldr	r2, [pc, #676]	; (800071c <irmp_ISR+0x300>)
                                denon_repetition_len = 0xFFFF;
 8000476:	6013      	str	r3, [r2, #0]
 8000478:	e7e4      	b.n	8000444 <irmp_ISR+0x28>
                    if (key_repetition_len < 0xFFFF)                            // avoid overflow of counter
 800047a:	4aa9      	ldr	r2, [pc, #676]	; (8000720 <irmp_ISR+0x304>)
 800047c:	48a9      	ldr	r0, [pc, #676]	; (8000724 <irmp_ISR+0x308>)
 800047e:	6813      	ldr	r3, [r2, #0]
 8000480:	4283      	cmp	r3, r0
 8000482:	d8df      	bhi.n	8000444 <irmp_ISR+0x28>
                        key_repetition_len++;
 8000484:	3301      	adds	r3, #1
 8000486:	6013      	str	r3, [r2, #0]
                        if (denon_repetition_len < 0xFFFF)                      // avoid overflow of counter
 8000488:	4aa7      	ldr	r2, [pc, #668]	; (8000728 <irmp_ISR+0x30c>)
 800048a:	6813      	ldr	r3, [r2, #0]
 800048c:	4283      	cmp	r3, r0
 800048e:	d8d9      	bhi.n	8000444 <irmp_ISR+0x28>
                            if (denon_repetition_len >= DENON_AUTO_REPETITION_PAUSE_LEN && last_irmp_denon_command != 0)
 8000490:	48a6      	ldr	r0, [pc, #664]	; (800072c <irmp_ISR+0x310>)
                            denon_repetition_len++;
 8000492:	3301      	adds	r3, #1
 8000494:	6013      	str	r3, [r2, #0]
                            if (denon_repetition_len >= DENON_AUTO_REPETITION_PAUSE_LEN && last_irmp_denon_command != 0)
 8000496:	4283      	cmp	r3, r0
 8000498:	d9d4      	bls.n	8000444 <irmp_ISR+0x28>
 800049a:	4ba5      	ldr	r3, [pc, #660]	; (8000730 <irmp_ISR+0x314>)
 800049c:	6818      	ldr	r0, [r3, #0]
 800049e:	2800      	cmp	r0, #0
 80004a0:	d0d0      	beq.n	8000444 <irmp_ISR+0x28>
                                last_irmp_denon_command = 0;
 80004a2:	6019      	str	r1, [r3, #0]
                                denon_repetition_len = 0xFFFF;
 80004a4:	4ba3      	ldr	r3, [pc, #652]	; (8000734 <irmp_ISR+0x318>)
 80004a6:	e7e6      	b.n	8000476 <irmp_ISR+0x5a>
            if (wait_for_start_space)                                           // we have received start bit...
 80004a8:	4b94      	ldr	r3, [pc, #592]	; (80006fc <irmp_ISR+0x2e0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d100      	bne.n	80004b2 <irmp_ISR+0x96>
 80004b0:	e0fb      	b.n	80006aa <irmp_ISR+0x28e>
 80004b2:	4c99      	ldr	r4, [pc, #612]	; (8000718 <irmp_ISR+0x2fc>)
                if (irmp_input)                                                 // still dark?
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d037      	beq.n	8000528 <irmp_ISR+0x10c>
                    irmp_pause_time++;                                          // increment counter
 80004b8:	7823      	ldrb	r3, [r4, #0]
 80004ba:	3301      	adds	r3, #1
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	7023      	strb	r3, [r4, #0]
                    if (irmp_pause_time > IRMP_TIMEOUT_LEN)                     // timeout?
 80004c0:	2bc2      	cmp	r3, #194	; 0xc2
 80004c2:	d905      	bls.n	80004d0 <irmp_ISR+0xb4>
                        if (irmp_protocol == IRMP_JVC_PROTOCOL)                 // don't show eror if JVC protocol, irmp_pulse_time has been set below!
 80004c4:	4b9c      	ldr	r3, [pc, #624]	; (8000738 <irmp_ISR+0x31c>)
                        irmp_start_bit_detected = 0;                            // reset flags, let's wait for another start bit
 80004c6:	6011      	str	r1, [r2, #0]
                        if (irmp_protocol == IRMP_JVC_PROTOCOL)                 // don't show eror if JVC protocol, irmp_pulse_time has been set below!
 80004c8:	681b      	ldr	r3, [r3, #0]
                        irmp_pulse_time         = 0;
 80004ca:	4b8b      	ldr	r3, [pc, #556]	; (80006f8 <irmp_ISR+0x2dc>)
                        irmp_pause_time         = 0;
 80004cc:	7021      	strb	r1, [r4, #0]
                        irmp_pulse_time         = 0;
 80004ce:	6019      	str	r1, [r3, #0]
            if (irmp_start_bit_detected && irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 0)    // enough bits received?
 80004d0:	4b88      	ldr	r3, [pc, #544]	; (80006f4 <irmp_ISR+0x2d8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d0b5      	beq.n	8000444 <irmp_ISR+0x28>
 80004d8:	4b98      	ldr	r3, [pc, #608]	; (800073c <irmp_ISR+0x320>)
 80004da:	4a8e      	ldr	r2, [pc, #568]	; (8000714 <irmp_ISR+0x2f8>)
 80004dc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80004de:	6810      	ldr	r0, [r2, #0]
 80004e0:	4284      	cmp	r4, r0
 80004e2:	d1af      	bne.n	8000444 <irmp_ISR+0x28>
 80004e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	d1ac      	bne.n	8000444 <irmp_ISR+0x28>
                if (last_irmp_command == irmp_tmp_command && key_repetition_len < AUTO_FRAME_REPETITION_LEN)
 80004ea:	4a95      	ldr	r2, [pc, #596]	; (8000740 <irmp_ISR+0x324>)
 80004ec:	6816      	ldr	r6, [r2, #0]
 80004ee:	4a85      	ldr	r2, [pc, #532]	; (8000704 <irmp_ISR+0x2e8>)
 80004f0:	6815      	ldr	r5, [r2, #0]
 80004f2:	42ae      	cmp	r6, r5
 80004f4:	d000      	beq.n	80004f8 <irmp_ISR+0xdc>
 80004f6:	e263      	b.n	80009c0 <irmp_ISR+0x5a4>
 80004f8:	4f89      	ldr	r7, [pc, #548]	; (8000720 <irmp_ISR+0x304>)
 80004fa:	4a92      	ldr	r2, [pc, #584]	; (8000744 <irmp_ISR+0x328>)
 80004fc:	683f      	ldr	r7, [r7, #0]
 80004fe:	4297      	cmp	r7, r2
 8000500:	d900      	bls.n	8000504 <irmp_ISR+0xe8>
 8000502:	e25d      	b.n	80009c0 <irmp_ISR+0x5a4>
                    repetition_frame_number++;
 8000504:	4f90      	ldr	r7, [pc, #576]	; (8000748 <irmp_ISR+0x32c>)
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	3201      	adds	r2, #1
 800050a:	603a      	str	r2, [r7, #0]
                if (irmp_param.protocol == IRMP_SIRCS_PROTOCOL && (repetition_frame_number == 1 || repetition_frame_number == 2))
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d000      	beq.n	8000514 <irmp_ISR+0xf8>
 8000512:	e259      	b.n	80009c8 <irmp_ISR+0x5ac>
 8000514:	4a8c      	ldr	r2, [pc, #560]	; (8000748 <irmp_ISR+0x32c>)
 8000516:	6812      	ldr	r2, [r2, #0]
 8000518:	3a01      	subs	r2, #1
 800051a:	2a01      	cmp	r2, #1
 800051c:	d900      	bls.n	8000520 <irmp_ISR+0x104>
 800051e:	e253      	b.n	80009c8 <irmp_ISR+0x5ac>
                    key_repetition_len = 0;
 8000520:	2200      	movs	r2, #0
 8000522:	4b7f      	ldr	r3, [pc, #508]	; (8000720 <irmp_ISR+0x304>)
                        irmp_id = irmp_tmp_id;
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	e267      	b.n	80009f8 <irmp_ISR+0x5dc>
                    if (irmp_pulse_time >= SIRCS_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SIRCS_START_BIT_PULSE_LEN_MAX &&
 8000528:	4f73      	ldr	r7, [pc, #460]	; (80006f8 <irmp_ISR+0x2dc>)
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	0019      	movs	r1, r3
 800052e:	391a      	subs	r1, #26
 8000530:	2908      	cmp	r1, #8
 8000532:	d804      	bhi.n	800053e <irmp_ISR+0x122>
 8000534:	7820      	ldrb	r0, [r4, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &sircs_param;
 8000536:	4985      	ldr	r1, [pc, #532]	; (800074c <irmp_ISR+0x330>)
                    if (irmp_pulse_time >= SIRCS_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SIRCS_START_BIT_PULSE_LEN_MAX &&
 8000538:	3805      	subs	r0, #5
 800053a:	2804      	cmp	r0, #4
 800053c:	d922      	bls.n	8000584 <irmp_ISR+0x168>
                    if (irmp_protocol == IRMP_JVC_PROTOCOL &&                                                       // last protocol was JVC, awaiting repeat frame
 800053e:	4d7e      	ldr	r5, [pc, #504]	; (8000738 <irmp_ISR+0x31c>)
 8000540:	6829      	ldr	r1, [r5, #0]
 8000542:	2914      	cmp	r1, #20
 8000544:	d108      	bne.n	8000558 <irmp_ISR+0x13c>
 8000546:	0019      	movs	r1, r3
 8000548:	3942      	subs	r1, #66	; 0x42
 800054a:	295c      	cmp	r1, #92	; 0x5c
 800054c:	d804      	bhi.n	8000558 <irmp_ISR+0x13c>
                        irmp_pulse_time >= JVC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= JVC_START_BIT_PULSE_LEN_MAX &&
 800054e:	7820      	ldrb	r0, [r4, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &nec_param;
 8000550:	497f      	ldr	r1, [pc, #508]	; (8000750 <irmp_ISR+0x334>)
                        irmp_pulse_time >= JVC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= JVC_START_BIT_PULSE_LEN_MAX &&
 8000552:	3830      	subs	r0, #48	; 0x30
 8000554:	2859      	cmp	r0, #89	; 0x59
 8000556:	d915      	bls.n	8000584 <irmp_ISR+0x168>
                    if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 8000558:	214e      	movs	r1, #78	; 0x4e
 800055a:	4249      	negs	r1, r1
 800055c:	468c      	mov	ip, r1
 800055e:	449c      	add	ip, r3
 8000560:	4661      	mov	r1, ip
 8000562:	2945      	cmp	r1, #69	; 0x45
 8000564:	d835      	bhi.n	80005d2 <irmp_ISR+0x1b6>
                        irmp_pause_time >= NEC_START_BIT_PAUSE_LEN_MIN && irmp_pause_time <= NEC_START_BIT_PAUSE_LEN_MAX)
 8000566:	7820      	ldrb	r0, [r4, #0]
                    if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 8000568:	0001      	movs	r1, r0
 800056a:	3926      	subs	r1, #38	; 0x26
 800056c:	000e      	movs	r6, r1
                        irmp_param_p = (IRMP_PARAMETER *) &nec_param;
 800056e:	4978      	ldr	r1, [pc, #480]	; (8000750 <irmp_ISR+0x334>)
                    if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 8000570:	2e24      	cmp	r6, #36	; 0x24
 8000572:	d907      	bls.n	8000584 <irmp_ISR+0x168>
                    else if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN        && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 8000574:	3813      	subs	r0, #19
 8000576:	2813      	cmp	r0, #19
 8000578:	d82b      	bhi.n	80005d2 <irmp_ISR+0x1b6>
                        if (irmp_protocol == IRMP_JVC_PROTOCOL)                 // last protocol was JVC, awaiting repeat frame
 800057a:	682b      	ldr	r3, [r5, #0]
                            irmp_param_p = (IRMP_PARAMETER *) &nec_rep_param;
 800057c:	4975      	ldr	r1, [pc, #468]	; (8000754 <irmp_ISR+0x338>)
                        if (irmp_protocol == IRMP_JVC_PROTOCOL)                 // last protocol was JVC, awaiting repeat frame
 800057e:	2b14      	cmp	r3, #20
 8000580:	d100      	bne.n	8000584 <irmp_ISR+0x168>
                        irmp_param_p = (IRMP_PARAMETER *) &nec_param;
 8000582:	4973      	ldr	r1, [pc, #460]	; (8000750 <irmp_ISR+0x334>)
                    if (irmp_start_bit_detected)
 8000584:	6813      	ldr	r3, [r2, #0]
 8000586:	4d6d      	ldr	r5, [pc, #436]	; (800073c <irmp_ISR+0x320>)
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <irmp_ISR+0x178>
                        memcpy_P (&irmp_param, irmp_param_p, sizeof (IRMP_PARAMETER));
 800058c:	2244      	movs	r2, #68	; 0x44
 800058e:	0028      	movs	r0, r5
 8000590:	f003 f99e 	bl	80038d0 <memcpy>
                    irmp_bit = 0;
 8000594:	2200      	movs	r2, #0
 8000596:	4b5f      	ldr	r3, [pc, #380]	; (8000714 <irmp_ISR+0x2f8>)
                    if ((irmp_param.flags & IRMP_PARAM_FLAG_IS_MANCHESTER) &&
 8000598:	2001      	movs	r0, #1
                    irmp_bit = 0;
 800059a:	601a      	str	r2, [r3, #0]
                    if ((irmp_param.flags & IRMP_PARAM_FLAG_IS_MANCHESTER) &&
 800059c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800059e:	6829      	ldr	r1, [r5, #0]
 80005a0:	001a      	movs	r2, r3
 80005a2:	4002      	ands	r2, r0
 80005a4:	d079      	beq.n	800069a <irmp_ISR+0x27e>
 80005a6:	2917      	cmp	r1, #23
 80005a8:	d00c      	beq.n	80005c4 <irmp_ISR+0x1a8>
                         irmp_param.protocol != IRMP_RUWIDO_PROTOCOL && // Manchester, but not RUWIDO
 80005aa:	2909      	cmp	r1, #9
 80005ac:	d00a      	beq.n	80005c4 <irmp_ISR+0x1a8>
                        if (irmp_pause_time > irmp_param.pulse_1_len_max && irmp_pause_time <= 2 * irmp_param.pulse_1_len_max)
 80005ae:	7821      	ldrb	r1, [r4, #0]
 80005b0:	68aa      	ldr	r2, [r5, #8]
 80005b2:	4291      	cmp	r1, r2
 80005b4:	d96a      	bls.n	800068c <irmp_ISR+0x270>
 80005b6:	4082      	lsls	r2, r0
 80005b8:	4291      	cmp	r1, r2
 80005ba:	d867      	bhi.n	800068c <irmp_ISR+0x270>
                            irmp_store_bit ((irmp_param.flags & IRMP_PARAM_FLAG_1ST_PULSE_IS_1) ? 0 : 1);
 80005bc:	40c3      	lsrs	r3, r0
 80005be:	4398      	bics	r0, r3
                            irmp_store_bit (0);
 80005c0:	f7ff fe4e 	bl	8000260 <irmp_store_bit>
                    irmp_pulse_time = 1;                                        // set counter to 1, not 0
 80005c4:	2301      	movs	r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
                    irmp_pause_time = 0;
 80005c8:	2300      	movs	r3, #0
                    wait_for_start_space = 0;
 80005ca:	4a4c      	ldr	r2, [pc, #304]	; (80006fc <irmp_ISR+0x2e0>)
                    irmp_pause_time = 0;
 80005cc:	7023      	strb	r3, [r4, #0]
                    irmp_pulse_time++;                                              // increment counter
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	e77e      	b.n	80004d0 <irmp_ISR+0xb4>
                    if (irmp_protocol == IRMP_JVC_PROTOCOL &&                   // last protocol was JVC, awaiting repeat frame
 80005d2:	6829      	ldr	r1, [r5, #0]
 80005d4:	2914      	cmp	r1, #20
 80005d6:	d107      	bne.n	80005e8 <irmp_ISR+0x1cc>
 80005d8:	4661      	mov	r1, ip
 80005da:	2945      	cmp	r1, #69	; 0x45
 80005dc:	d804      	bhi.n	80005e8 <irmp_ISR+0x1cc>
                        irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 80005de:	7820      	ldrb	r0, [r4, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &nec_param;
 80005e0:	495b      	ldr	r1, [pc, #364]	; (8000750 <irmp_ISR+0x334>)
                        irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX &&
 80005e2:	3804      	subs	r0, #4
 80005e4:	2806      	cmp	r0, #6
 80005e6:	d9cd      	bls.n	8000584 <irmp_ISR+0x168>
                    if (irmp_pulse_time >= SAMSUNG_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_START_BIT_PULSE_LEN_MAX &&
 80005e8:	0019      	movs	r1, r3
 80005ea:	3932      	subs	r1, #50	; 0x32
 80005ec:	290d      	cmp	r1, #13
 80005ee:	d804      	bhi.n	80005fa <irmp_ISR+0x1de>
 80005f0:	7820      	ldrb	r0, [r4, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &samsung_param;
 80005f2:	4959      	ldr	r1, [pc, #356]	; (8000758 <irmp_ISR+0x33c>)
                    if (irmp_pulse_time >= SAMSUNG_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_START_BIT_PULSE_LEN_MAX &&
 80005f4:	3832      	subs	r0, #50	; 0x32
 80005f6:	280d      	cmp	r0, #13
 80005f8:	d9c4      	bls.n	8000584 <irmp_ISR+0x168>
                    if (irmp_pulse_time >= KASEIKYO_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= KASEIKYO_START_BIT_PULSE_LEN_MAX &&
 80005fa:	0019      	movs	r1, r3
 80005fc:	3921      	subs	r1, #33	; 0x21
 80005fe:	2913      	cmp	r1, #19
 8000600:	d804      	bhi.n	800060c <irmp_ISR+0x1f0>
 8000602:	7820      	ldrb	r0, [r4, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &kaseikyo_param;
 8000604:	4955      	ldr	r1, [pc, #340]	; (800075c <irmp_ISR+0x340>)
                    if (irmp_pulse_time >= KASEIKYO_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= KASEIKYO_START_BIT_PULSE_LEN_MAX &&
 8000606:	3810      	subs	r0, #16
 8000608:	280a      	cmp	r0, #10
 800060a:	d9bb      	bls.n	8000584 <irmp_ISR+0x168>
                    if (((irmp_pulse_time >= RC5_START_BIT_LEN_MIN     && irmp_pulse_time <= RC5_START_BIT_LEN_MAX) ||
 800060c:	0019      	movs	r1, r3
 800060e:	3909      	subs	r1, #9
 8000610:	2904      	cmp	r1, #4
 8000612:	d902      	bls.n	800061a <irmp_ISR+0x1fe>
                         (irmp_pulse_time >= 2 * RC5_START_BIT_LEN_MIN && irmp_pulse_time <= 2 * RC5_START_BIT_LEN_MAX)) &&
 8000614:	3909      	subs	r1, #9
                    if (((irmp_pulse_time >= RC5_START_BIT_LEN_MIN     && irmp_pulse_time <= RC5_START_BIT_LEN_MAX) ||
 8000616:	2908      	cmp	r1, #8
 8000618:	d81a      	bhi.n	8000650 <irmp_ISR+0x234>
                        ((irmp_pause_time >= RC5_START_BIT_LEN_MIN     && irmp_pause_time <= RC5_START_BIT_LEN_MAX) ||
 800061a:	7820      	ldrb	r0, [r4, #0]
                         (irmp_pulse_time >= 2 * RC5_START_BIT_LEN_MIN && irmp_pulse_time <= 2 * RC5_START_BIT_LEN_MAX)) &&
 800061c:	0001      	movs	r1, r0
 800061e:	3909      	subs	r1, #9
 8000620:	2904      	cmp	r1, #4
 8000622:	d902      	bls.n	800062a <irmp_ISR+0x20e>
                        ((irmp_pause_time >= RC5_START_BIT_LEN_MIN     && irmp_pause_time <= RC5_START_BIT_LEN_MAX) ||
 8000624:	3909      	subs	r1, #9
 8000626:	2908      	cmp	r1, #8
 8000628:	d812      	bhi.n	8000650 <irmp_ISR+0x234>
                        last_pause = irmp_pause_time;
 800062a:	494d      	ldr	r1, [pc, #308]	; (8000760 <irmp_ISR+0x344>)
                        if ((irmp_pulse_time > RC5_START_BIT_LEN_MAX && irmp_pulse_time <= 2 * RC5_START_BIT_LEN_MAX) ||
 800062c:	3b0e      	subs	r3, #14
                        last_pause = irmp_pause_time;
 800062e:	7008      	strb	r0, [r1, #0]
 8000630:	4d4c      	ldr	r5, [pc, #304]	; (8000764 <irmp_ISR+0x348>)
 8000632:	494d      	ldr	r1, [pc, #308]	; (8000768 <irmp_ISR+0x34c>)
                        if ((irmp_pulse_time > RC5_START_BIT_LEN_MAX && irmp_pulse_time <= 2 * RC5_START_BIT_LEN_MAX) ||
 8000634:	2b0c      	cmp	r3, #12
 8000636:	d902      	bls.n	800063e <irmp_ISR+0x222>
 8000638:	380e      	subs	r0, #14
 800063a:	280c      	cmp	r0, #12
 800063c:	d805      	bhi.n	800064a <irmp_ISR+0x22e>
                            last_value  = 0;
 800063e:	2300      	movs	r3, #0
                            rc5_cmd_bit6 = 1<<6;
 8000640:	2040      	movs	r0, #64	; 0x40
                            last_value  = 0;
 8000642:	602b      	str	r3, [r5, #0]
                            rc5_cmd_bit6 = 1<<6;
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <irmp_ISR+0x300>)
 8000646:	6018      	str	r0, [r3, #0]
 8000648:	e79c      	b.n	8000584 <irmp_ISR+0x168>
                            last_value  = 1;
 800064a:	2301      	movs	r3, #1
 800064c:	602b      	str	r3, [r5, #0]
 800064e:	e799      	b.n	8000584 <irmp_ISR+0x168>
                    if ( (irmp_pulse_time >= DENON_PULSE_LEN_MIN && irmp_pulse_time <= DENON_PULSE_LEN_MAX) &&
 8000650:	1e99      	subs	r1, r3, #2
 8000652:	2904      	cmp	r1, #4
 8000654:	d808      	bhi.n	8000668 <irmp_ISR+0x24c>
                        ((irmp_pause_time >= DENON_1_PAUSE_LEN_MIN && irmp_pause_time <= DENON_1_PAUSE_LEN_MAX) ||
 8000656:	7820      	ldrb	r0, [r4, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &denon_param;
 8000658:	4944      	ldr	r1, [pc, #272]	; (800076c <irmp_ISR+0x350>)
                    if ( (irmp_pulse_time >= DENON_PULSE_LEN_MIN && irmp_pulse_time <= DENON_PULSE_LEN_MAX) &&
 800065a:	0005      	movs	r5, r0
 800065c:	3d13      	subs	r5, #19
 800065e:	2d06      	cmp	r5, #6
 8000660:	d990      	bls.n	8000584 <irmp_ISR+0x168>
                        ((irmp_pause_time >= DENON_1_PAUSE_LEN_MIN && irmp_pause_time <= DENON_1_PAUSE_LEN_MAX) ||
 8000662:	3807      	subs	r0, #7
 8000664:	2804      	cmp	r0, #4
 8000666:	d98d      	bls.n	8000584 <irmp_ISR+0x168>
                    if (irmp_pulse_time >= RC6_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= RC6_START_BIT_PULSE_LEN_MAX &&
 8000668:	3b1d      	subs	r3, #29
 800066a:	2b09      	cmp	r3, #9
 800066c:	d80b      	bhi.n	8000686 <irmp_ISR+0x26a>
 800066e:	7823      	ldrb	r3, [r4, #0]
 8000670:	3b09      	subs	r3, #9
 8000672:	2b04      	cmp	r3, #4
 8000674:	d807      	bhi.n	8000686 <irmp_ISR+0x26a>
                        last_pause = 0;
 8000676:	2100      	movs	r1, #0
 8000678:	4b39      	ldr	r3, [pc, #228]	; (8000760 <irmp_ISR+0x344>)
 800067a:	7019      	strb	r1, [r3, #0]
                        last_value = 1;
 800067c:	4b39      	ldr	r3, [pc, #228]	; (8000764 <irmp_ISR+0x348>)
 800067e:	3101      	adds	r1, #1
 8000680:	6019      	str	r1, [r3, #0]
                        irmp_param_p = (IRMP_PARAMETER *) &rc6_param;
 8000682:	493b      	ldr	r1, [pc, #236]	; (8000770 <irmp_ISR+0x354>)
                        last_value = 1;
 8000684:	e77e      	b.n	8000584 <irmp_ISR+0x168>
                        irmp_start_bit_detected = 0;                            // wait for another start bit...
 8000686:	2100      	movs	r1, #0
 8000688:	6011      	str	r1, [r2, #0]
 800068a:	e77b      	b.n	8000584 <irmp_ISR+0x168>
                        else if (! last_value)  // && irmp_pause_time >= irmp_param.pause_1_len_min && irmp_pause_time <= irmp_param.pause_1_len_max)
 800068c:	4a35      	ldr	r2, [pc, #212]	; (8000764 <irmp_ISR+0x348>)
 800068e:	6812      	ldr	r2, [r2, #0]
 8000690:	2a00      	cmp	r2, #0
 8000692:	d197      	bne.n	80005c4 <irmp_ISR+0x1a8>
                            irmp_store_bit ((irmp_param.flags & IRMP_PARAM_FLAG_1ST_PULSE_IS_1) ? 1 : 0);
 8000694:	0798      	lsls	r0, r3, #30
 8000696:	0fc0      	lsrs	r0, r0, #31
 8000698:	e792      	b.n	80005c0 <irmp_ISR+0x1a4>
                    if (irmp_param.protocol == IRMP_DENON_PROTOCOL)
 800069a:	2908      	cmp	r1, #8
 800069c:	d192      	bne.n	80005c4 <irmp_ISR+0x1a8>
                        if (irmp_pause_time >= DENON_1_PAUSE_LEN_MIN && irmp_pause_time <= DENON_1_PAUSE_LEN_MAX)
 800069e:	7823      	ldrb	r3, [r4, #0]
 80006a0:	3b13      	subs	r3, #19
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d98c      	bls.n	80005c0 <irmp_ISR+0x1a4>
                            irmp_store_bit (0);
 80006a6:	0010      	movs	r0, r2
 80006a8:	e78a      	b.n	80005c0 <irmp_ISR+0x1a4>
            else if (wait_for_space)                                            // the data section....
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <irmp_ISR+0x2e4>)
 80006ac:	6813      	ldr	r3, [r2, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d100      	bne.n	80006b4 <irmp_ISR+0x298>
 80006b2:	e17d      	b.n	80009b0 <irmp_ISR+0x594>
 80006b4:	2601      	movs	r6, #1
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <irmp_ISR+0x320>)
 80006b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ba:	4694      	mov	ip, r2
 80006bc:	4016      	ands	r6, r2
                if (irmp_input)                                                 // still dark?
 80006be:	2800      	cmp	r0, #0
 80006c0:	d073      	beq.n	80007aa <irmp_ISR+0x38e>
                    if (irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 1)
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <irmp_ISR+0x2f8>)
 80006c4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	4294      	cmp	r4, r2
 80006ca:	d153      	bne.n	8000774 <irmp_ISR+0x358>
 80006cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006ce:	2901      	cmp	r1, #1
 80006d0:	d150      	bne.n	8000774 <irmp_ISR+0x358>
                        if (
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d109      	bne.n	80006ea <irmp_ISR+0x2ce>
                            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max))
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <irmp_ISR+0x2dc>)
                            (irmp_param.flags & IRMP_PARAM_FLAG_IS_MANCHESTER) ||
 80006d8:	6959      	ldr	r1, [r3, #20]
                            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max))
 80006da:	6812      	ldr	r2, [r2, #0]
                            (irmp_param.flags & IRMP_PARAM_FLAG_IS_MANCHESTER) ||
 80006dc:	4291      	cmp	r1, r2
 80006de:	d900      	bls.n	80006e2 <irmp_ISR+0x2c6>
 80006e0:	e0ac      	b.n	800083c <irmp_ISR+0x420>
                            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max))
 80006e2:	6999      	ldr	r1, [r3, #24]
 80006e4:	428a      	cmp	r2, r1
 80006e6:	d900      	bls.n	80006ea <irmp_ISR+0x2ce>
 80006e8:	e0a8      	b.n	800083c <irmp_ISR+0x420>
                            irmp_param.stop_bit = 0;
 80006ea:	2200      	movs	r2, #0
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38
 80006ee:	e6ef      	b.n	80004d0 <irmp_ISR+0xb4>
 80006f0:	2000004c 	.word	0x2000004c
 80006f4:	200000a0 	.word	0x200000a0
 80006f8:	2000009c 	.word	0x2000009c
 80006fc:	200000cc 	.word	0x200000cc
 8000700:	200000c8 	.word	0x200000c8
 8000704:	200000a8 	.word	0x200000a8
 8000708:	200000a4 	.word	0x200000a4
 800070c:	20000034 	.word	0x20000034
 8000710:	200000ac 	.word	0x200000ac
 8000714:	2000003c 	.word	0x2000003c
 8000718:	20000094 	.word	0x20000094
 800071c:	200000c0 	.word	0x200000c0
 8000720:	200000b0 	.word	0x200000b0
 8000724:	0000fffe 	.word	0x0000fffe
 8000728:	20000000 	.word	0x20000000
 800072c:	0000026b 	.word	0x0000026b
 8000730:	200000b4 	.word	0x200000b4
 8000734:	0000ffff 	.word	0x0000ffff
 8000738:	20000098 	.word	0x20000098
 800073c:	20000050 	.word	0x20000050
 8000740:	20000008 	.word	0x20000008
 8000744:	000003e7 	.word	0x000003e7
 8000748:	200000c4 	.word	0x200000c4
 800074c:	08003b38 	.word	0x08003b38
 8000750:	080039e4 	.word	0x080039e4
 8000754:	08003a28 	.word	0x08003a28
 8000758:	08003af4 	.word	0x08003af4
 800075c:	080039a0 	.word	0x080039a0
 8000760:	200000b8 	.word	0x200000b8
 8000764:	200000bc 	.word	0x200000bc
 8000768:	08003a6c 	.word	0x08003a6c
 800076c:	0800395c 	.word	0x0800395c
 8000770:	08003ab0 	.word	0x08003ab0
                        irmp_pause_time++;                                                          // increment counter
 8000774:	4fbe      	ldr	r7, [pc, #760]	; (8000a70 <irmp_ISR+0x654>)
                        if (irmp_param.protocol == IRMP_SIRCS_PROTOCOL &&                           // Sony has a variable number of bits:
 8000776:	49bf      	ldr	r1, [pc, #764]	; (8000a74 <irmp_ISR+0x658>)
                        irmp_pause_time++;                                                          // increment counter
 8000778:	7838      	ldrb	r0, [r7, #0]
                        if (irmp_param.protocol == IRMP_SIRCS_PROTOCOL &&                           // Sony has a variable number of bits:
 800077a:	680d      	ldr	r5, [r1, #0]
                        irmp_pause_time++;                                                          // increment counter
 800077c:	3001      	adds	r0, #1
 800077e:	b2c0      	uxtb	r0, r0
 8000780:	7038      	strb	r0, [r7, #0]
                        if (irmp_param.protocol == IRMP_SIRCS_PROTOCOL &&                           // Sony has a variable number of bits:
 8000782:	2d01      	cmp	r5, #1
 8000784:	d137      	bne.n	80007f6 <irmp_ISR+0x3da>
 8000786:	2809      	cmp	r0, #9
 8000788:	d935      	bls.n	80007f6 <irmp_ISR+0x3da>
                            irmp_pause_time > SIRCS_PAUSE_LEN_MAX &&                                // minimum is 12
 800078a:	2a0a      	cmp	r2, #10
 800078c:	d933      	bls.n	80007f6 <irmp_ISR+0x3da>
                            irmp_tmp_address |= (irmp_bit - SIRCS_MINIMUM_DATA_LEN + 1) << 8;       // new: store number of additional bits in upper byte of address!
 800078e:	48ba      	ldr	r0, [pc, #744]	; (8000a78 <irmp_ISR+0x65c>)
                            irmp_param.complete_len = irmp_bit + 1;                                 // set new complete length
 8000790:	1c53      	adds	r3, r2, #1
                            irmp_tmp_address |= (irmp_bit - SIRCS_MINIMUM_DATA_LEN + 1) << 8;       // new: store number of additional bits in upper byte of address!
 8000792:	6804      	ldr	r4, [r0, #0]
                            irmp_param.complete_len = irmp_bit + 1;                                 // set new complete length
 8000794:	634b      	str	r3, [r1, #52]	; 0x34
                            irmp_tmp_address |= (irmp_bit - SIRCS_MINIMUM_DATA_LEN + 1) << 8;       // new: store number of additional bits in upper byte of address!
 8000796:	3b0c      	subs	r3, #12
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4323      	orrs	r3, r4
 800079c:	6003      	str	r3, [r0, #0]
                            irmp_param.command_end = irmp_param.command_offset + irmp_bit + 1;      // correct command length
 800079e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80007a0:	18d2      	adds	r2, r2, r3
                            irmp_pause_time = SIRCS_PAUSE_LEN_MAX - 1;                              // correct pause length
 80007a2:	2308      	movs	r3, #8
                            irmp_param.command_end = irmp_param.command_offset + irmp_bit + 1;      // correct command length
 80007a4:	3201      	adds	r2, #1
 80007a6:	630a      	str	r2, [r1, #48]	; 0x30
                            irmp_pause_time = SIRCS_PAUSE_LEN_MAX - 1;                              // correct pause length
 80007a8:	703b      	strb	r3, [r7, #0]
 80007aa:	4bb4      	ldr	r3, [pc, #720]	; (8000a7c <irmp_ISR+0x660>)
 80007ac:	4ab4      	ldr	r2, [pc, #720]	; (8000a80 <irmp_ISR+0x664>)
 80007ae:	681d      	ldr	r5, [r3, #0]
 80007b0:	4faf      	ldr	r7, [pc, #700]	; (8000a70 <irmp_ISR+0x654>)
 80007b2:	4cb0      	ldr	r4, [pc, #704]	; (8000a74 <irmp_ISR+0x658>)
                    if ((irmp_param.flags & IRMP_PARAM_FLAG_IS_MANCHESTER))                                     // Manchester
 80007b4:	2e00      	cmp	r6, #0
 80007b6:	d100      	bne.n	80007ba <irmp_ISR+0x39e>
 80007b8:	e0b7      	b.n	800092a <irmp_ISR+0x50e>
                        if (irmp_pulse_time > irmp_param.pulse_1_len_max /* && irmp_pulse_time <= 2 * irmp_param.pulse_1_len_max */)
 80007ba:	68a3      	ldr	r3, [r4, #8]
 80007bc:	42ab      	cmp	r3, r5
 80007be:	d300      	bcc.n	80007c2 <irmp_ISR+0x3a6>
 80007c0:	e087      	b.n	80008d2 <irmp_ISR+0x4b6>
                            if (irmp_param.protocol == IRMP_RC6_PROTOCOL && irmp_bit == 4 && irmp_pulse_time > RC6_TOGGLE_BIT_LEN_MIN)         // RC6 toggle bit
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2b09      	cmp	r3, #9
 80007c8:	d15c      	bne.n	8000884 <irmp_ISR+0x468>
 80007ca:	4bae      	ldr	r3, [pc, #696]	; (8000a84 <irmp_ISR+0x668>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d158      	bne.n	8000884 <irmp_ISR+0x468>
 80007d2:	2d09      	cmp	r5, #9
 80007d4:	d956      	bls.n	8000884 <irmp_ISR+0x468>
                                if (irmp_param.complete_len == RC6_COMPLETE_DATA_LEN_LONG)                      // RC6 mode 6A
 80007d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007d8:	4cab      	ldr	r4, [pc, #684]	; (8000a88 <irmp_ISR+0x66c>)
 80007da:	2b24      	cmp	r3, #36	; 0x24
 80007dc:	d14d      	bne.n	800087a <irmp_ISR+0x45e>
                                    irmp_store_bit (1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff fd3e 	bl	8000260 <irmp_store_bit>
                                    last_value = 1;
 80007e4:	2301      	movs	r3, #1
                                    last_value = 0;
 80007e6:	6023      	str	r3, [r4, #0]
                        last_pause      = irmp_pause_time;
 80007e8:	783b      	ldrb	r3, [r7, #0]
 80007ea:	4aa8      	ldr	r2, [pc, #672]	; (8000a8c <irmp_ISR+0x670>)
 80007ec:	7013      	strb	r3, [r2, #0]
                                wait_for_space = 0;
 80007ee:	2200      	movs	r2, #0
 80007f0:	4ba7      	ldr	r3, [pc, #668]	; (8000a90 <irmp_ISR+0x674>)
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	e0ac      	b.n	8000950 <irmp_ISR+0x534>
                        if ((irmp_param.flags & IRMP_PARAM_FLAG_IS_MANCHESTER) &&
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d00c      	beq.n	8000814 <irmp_ISR+0x3f8>
                            irmp_pause_time >= 2 * irmp_param.pause_1_len_max && irmp_bit >= irmp_param.complete_len - 2 && !irmp_param.stop_bit)
 80007fa:	690f      	ldr	r7, [r1, #16]
 80007fc:	007f      	lsls	r7, r7, #1
                        if ((irmp_param.flags & IRMP_PARAM_FLAG_IS_MANCHESTER) &&
 80007fe:	42b8      	cmp	r0, r7
 8000800:	d308      	bcc.n	8000814 <irmp_ISR+0x3f8>
                            irmp_pause_time >= 2 * irmp_param.pause_1_len_max && irmp_bit >= irmp_param.complete_len - 2 && !irmp_param.stop_bit)
 8000802:	1ea7      	subs	r7, r4, #2
 8000804:	42ba      	cmp	r2, r7
 8000806:	d305      	bcc.n	8000814 <irmp_ISR+0x3f8>
 8000808:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 800080a:	2f00      	cmp	r7, #0
 800080c:	d102      	bne.n	8000814 <irmp_ISR+0x3f8>
                            irmp_param.stop_bit = TRUE;                         // set flag
 800080e:	2301      	movs	r3, #1
 8000810:	638b      	str	r3, [r1, #56]	; 0x38
 8000812:	e7ca      	b.n	80007aa <irmp_ISR+0x38e>
                        if (irmp_pause_time > IRMP_TIMEOUT_LEN)                 // timeout?
 8000814:	28c2      	cmp	r0, #194	; 0xc2
 8000816:	d800      	bhi.n	800081a <irmp_ISR+0x3fe>
 8000818:	e65a      	b.n	80004d0 <irmp_ISR+0xb4>
                            if (irmp_bit == irmp_param.complete_len - 1 && irmp_param.stop_bit == 0)
 800081a:	1e60      	subs	r0, r4, #1
 800081c:	4282      	cmp	r2, r0
 800081e:	d105      	bne.n	800082c <irmp_ISR+0x410>
 8000820:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8000822:	2900      	cmp	r1, #0
 8000824:	d102      	bne.n	800082c <irmp_ISR+0x410>
                                irmp_bit++;
 8000826:	4b97      	ldr	r3, [pc, #604]	; (8000a84 <irmp_ISR+0x668>)
 8000828:	601c      	str	r4, [r3, #0]
 800082a:	e651      	b.n	80004d0 <irmp_ISR+0xb4>
                            else if ((irmp_param.protocol == IRMP_NEC_PROTOCOL || irmp_param.protocol == IRMP_NEC42_PROTOCOL) && irmp_bit == 0)
 800082c:	2d02      	cmp	r5, #2
 800082e:	d100      	bne.n	8000832 <irmp_ISR+0x416>
 8000830:	e1a8      	b.n	8000b84 <irmp_ISR+0x768>
 8000832:	2d1c      	cmp	r5, #28
 8000834:	d102      	bne.n	800083c <irmp_ISR+0x420>
 8000836:	2a00      	cmp	r2, #0
 8000838:	d100      	bne.n	800083c <irmp_ISR+0x420>
 800083a:	e1a6      	b.n	8000b8a <irmp_ISR+0x76e>
                            irmp_start_bit_detected = 0;                        // wait for another start bit...
 800083c:	2300      	movs	r3, #0
 800083e:	4a90      	ldr	r2, [pc, #576]	; (8000a80 <irmp_ISR+0x664>)
 8000840:	6013      	str	r3, [r2, #0]
                            irmp_pulse_time         = 0;
 8000842:	4a8e      	ldr	r2, [pc, #568]	; (8000a7c <irmp_ISR+0x660>)
                    wait_for_space  = 1;                                            // let's count the time (see above)
 8000844:	6013      	str	r3, [r2, #0]
                    irmp_pause_time = 1;                                            // set pause counter to 1, not 0
 8000846:	4a8a      	ldr	r2, [pc, #552]	; (8000a70 <irmp_ISR+0x654>)
 8000848:	7013      	strb	r3, [r2, #0]
 800084a:	e641      	b.n	80004d0 <irmp_ISR+0xb4>
                                    irmp_ir_detected = FALSE;
 800084c:	2300      	movs	r3, #0
 800084e:	4a91      	ldr	r2, [pc, #580]	; (8000a94 <irmp_ISR+0x678>)
 8000850:	e6bd      	b.n	80005ce <irmp_ISR+0x1b2>
                            else if (irmp_param.protocol == IRMP_NEC_PROTOCOL && (irmp_bit == 16 || irmp_bit == 17))      // it was a JVC stop bit
 8000852:	0011      	movs	r1, r2
 8000854:	3910      	subs	r1, #16
 8000856:	2901      	cmp	r1, #1
 8000858:	d8f0      	bhi.n	800083c <irmp_ISR+0x420>
                                irmp_param.stop_bit     = TRUE;                                     // set flag
 800085a:	2101      	movs	r1, #1
                                irmp_param.protocol     = IRMP_JVC_PROTOCOL;                        // switch protocol
 800085c:	2014      	movs	r0, #20
                                irmp_param.complete_len = irmp_bit;                                 // patch length: 16 or 17
 800085e:	635a      	str	r2, [r3, #52]	; 0x34
                                irmp_tmp_command        = (irmp_tmp_address >> 4);                  // set command: upper 12 bits are command bits
 8000860:	4a85      	ldr	r2, [pc, #532]	; (8000a78 <irmp_ISR+0x65c>)
                                irmp_param.protocol     = IRMP_JVC_PROTOCOL;                        // switch protocol
 8000862:	6018      	str	r0, [r3, #0]
                                irmp_param.stop_bit     = TRUE;                                     // set flag
 8000864:	6399      	str	r1, [r3, #56]	; 0x38
                                irmp_tmp_command        = (irmp_tmp_address >> 4);                  // set command: upper 12 bits are command bits
 8000866:	6813      	ldr	r3, [r2, #0]
 8000868:	488b      	ldr	r0, [pc, #556]	; (8000a98 <irmp_ISR+0x67c>)
 800086a:	091c      	lsrs	r4, r3, #4
 800086c:	6004      	str	r4, [r0, #0]
                                irmp_tmp_address        = irmp_tmp_address & 0x000F;                // lower 4 bits are address bits
 800086e:	200f      	movs	r0, #15
 8000870:	4003      	ands	r3, r0
 8000872:	6013      	str	r3, [r2, #0]
                                irmp_start_bit_detected = 1;                                        // tricky: don't wait for another start bit...
 8000874:	4b82      	ldr	r3, [pc, #520]	; (8000a80 <irmp_ISR+0x664>)
 8000876:	6019      	str	r1, [r3, #0]
 8000878:	e62a      	b.n	80004d0 <irmp_ISR+0xb4>
                                    irmp_store_bit (0);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fcf0 	bl	8000260 <irmp_store_bit>
                                    last_value = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	e7b0      	b.n	80007e6 <irmp_ISR+0x3ca>
                                irmp_store_bit ((irmp_param.flags & IRMP_PARAM_FLAG_1ST_PULSE_IS_1) ? 0  :  1 );
 8000884:	4663      	mov	r3, ip
 8000886:	2001      	movs	r0, #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	4398      	bics	r0, r3
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	f7ff fce7 	bl	8000260 <irmp_store_bit>
                                if (irmp_param.protocol == IRMP_RC6_PROTOCOL && irmp_bit == 4 && irmp_pulse_time > RC6_TOGGLE_BIT_LEN_MIN)      // RC6 toggle bit
 8000892:	9b00      	ldr	r3, [sp, #0]
 8000894:	4e7c      	ldr	r6, [pc, #496]	; (8000a88 <irmp_ISR+0x66c>)
 8000896:	2b09      	cmp	r3, #9
 8000898:	d112      	bne.n	80008c0 <irmp_ISR+0x4a4>
 800089a:	4b7a      	ldr	r3, [pc, #488]	; (8000a84 <irmp_ISR+0x668>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d10e      	bne.n	80008c0 <irmp_ISR+0x4a4>
 80008a2:	2d09      	cmp	r5, #9
 80008a4:	d90c      	bls.n	80008c0 <irmp_ISR+0x4a4>
                                    irmp_store_bit (1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	783d      	ldrb	r5, [r7, #0]
 80008aa:	f7ff fcd9 	bl	8000260 <irmp_store_bit>
                                    if (irmp_pause_time > 2 * irmp_param.pause_1_len_max)
 80008ae:	6923      	ldr	r3, [r4, #16]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	429d      	cmp	r5, r3
 80008b4:	d902      	bls.n	80008bc <irmp_ISR+0x4a0>
                                        last_value = 0;
 80008b6:	2300      	movs	r3, #0
                                        last_value = 1;
 80008b8:	6033      	str	r3, [r6, #0]
 80008ba:	e795      	b.n	80007e8 <irmp_ISR+0x3cc>
 80008bc:	2301      	movs	r3, #1
 80008be:	e7fb      	b.n	80008b8 <irmp_ISR+0x49c>
                                    irmp_store_bit ((irmp_param.flags & IRMP_PARAM_FLAG_1ST_PULSE_IS_1) ? 1 :   0 );
 80008c0:	2401      	movs	r4, #1
 80008c2:	9b01      	ldr	r3, [sp, #4]
 80008c4:	4023      	ands	r3, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff fcc9 	bl	8000260 <irmp_store_bit>
                                    last_value = (irmp_param.flags & IRMP_PARAM_FLAG_1ST_PULSE_IS_1) ? 1 : 0;
 80008ce:	6034      	str	r4, [r6, #0]
 80008d0:	e78a      	b.n	80007e8 <irmp_ISR+0x3cc>
                        else if (irmp_pulse_time >= irmp_param.pulse_1_len_min && irmp_pulse_time <= irmp_param.pulse_1_len_max
 80008d2:	6863      	ldr	r3, [r4, #4]
 80008d4:	42ab      	cmp	r3, r5
 80008d6:	d824      	bhi.n	8000922 <irmp_ISR+0x506>
                            if (last_pause > irmp_param.pause_1_len_max && last_pause <= 2 * irmp_param.pause_1_len_max)
 80008d8:	4b6c      	ldr	r3, [pc, #432]	; (8000a8c <irmp_ISR+0x670>)
 80008da:	4a6b      	ldr	r2, [pc, #428]	; (8000a88 <irmp_ISR+0x66c>)
 80008dc:	7819      	ldrb	r1, [r3, #0]
 80008de:	6923      	ldr	r3, [r4, #16]
 80008e0:	6810      	ldr	r0, [r2, #0]
 80008e2:	4299      	cmp	r1, r3
 80008e4:	d905      	bls.n	80008f2 <irmp_ISR+0x4d6>
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d802      	bhi.n	80008f2 <irmp_ISR+0x4d6>
                                manchester_value = last_value ? 0 : 1;
 80008ec:	4243      	negs	r3, r0
 80008ee:	4158      	adcs	r0, r3
                                last_value  = manchester_value;
 80008f0:	6010      	str	r0, [r2, #0]
                            if (irmp_param.protocol == IRMP_RC6_PROTOCOL && irmp_bit == 1 && manchester_value == 1)     // RC6 mode != 0 ???
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	2b09      	cmp	r3, #9
 80008f6:	d111      	bne.n	800091c <irmp_ISR+0x500>
 80008f8:	4b62      	ldr	r3, [pc, #392]	; (8000a84 <irmp_ISR+0x668>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d10d      	bne.n	800091c <irmp_ISR+0x500>
 8000900:	2801      	cmp	r0, #1
 8000902:	d10b      	bne.n	800091c <irmp_ISR+0x500>
                                irmp_param.address_offset = 5;
 8000904:	2205      	movs	r2, #5
 8000906:	6262      	str	r2, [r4, #36]	; 0x24
                                irmp_param.address_end = irmp_param.address_offset + 15;
 8000908:	320f      	adds	r2, #15
 800090a:	62a2      	str	r2, [r4, #40]	; 0x28
                                irmp_param.command_offset = irmp_param.address_end + 1;                                 // skip 1 system bit, changes like a toggle bit
 800090c:	3201      	adds	r2, #1
 800090e:	62e2      	str	r2, [r4, #44]	; 0x2c
                                irmp_tmp_address = 0;
 8000910:	2200      	movs	r2, #0
                                irmp_param.complete_len = RC6_COMPLETE_DATA_LEN_LONG;
 8000912:	3323      	adds	r3, #35	; 0x23
 8000914:	6363      	str	r3, [r4, #52]	; 0x34
                                irmp_param.command_end = irmp_param.command_offset + 16 - 1;
 8000916:	6323      	str	r3, [r4, #48]	; 0x30
                                irmp_tmp_address = 0;
 8000918:	4b57      	ldr	r3, [pc, #348]	; (8000a78 <irmp_ISR+0x65c>)
 800091a:	601a      	str	r2, [r3, #0]
                            irmp_store_bit (manchester_value);
 800091c:	f7ff fca0 	bl	8000260 <irmp_store_bit>
                        {
 8000920:	e762      	b.n	80007e8 <irmp_ISR+0x3cc>
                                irmp_start_bit_detected = 0;                            // reset flags and wait for next start bit
 8000922:	2300      	movs	r3, #0
 8000924:	6013      	str	r3, [r2, #0]
                                irmp_pause_time         = 0;
 8000926:	703b      	strb	r3, [r7, #0]
 8000928:	e75e      	b.n	80007e8 <irmp_ISR+0x3cc>
                    if (irmp_param.protocol == IRMP_SAMSUNG_PROTOCOL && irmp_bit == 16)       // Samsung: 16th bit
 800092a:	6823      	ldr	r3, [r4, #0]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d123      	bne.n	8000978 <irmp_ISR+0x55c>
 8000930:	4854      	ldr	r0, [pc, #336]	; (8000a84 <irmp_ISR+0x668>)
 8000932:	6801      	ldr	r1, [r0, #0]
 8000934:	2910      	cmp	r1, #16
 8000936:	d11f      	bne.n	8000978 <irmp_ISR+0x55c>
                        if (irmp_pulse_time >= SAMSUNG_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_PULSE_LEN_MAX &&
 8000938:	3d04      	subs	r5, #4
 800093a:	2d06      	cmp	r5, #6
 800093c:	d818      	bhi.n	8000970 <irmp_ISR+0x554>
                            irmp_pause_time >= SAMSUNG_START_BIT_PAUSE_LEN_MIN && irmp_pause_time <= SAMSUNG_START_BIT_PAUSE_LEN_MAX)
 800093e:	783b      	ldrb	r3, [r7, #0]
                        if (irmp_pulse_time >= SAMSUNG_PULSE_LEN_MIN && irmp_pulse_time <= SAMSUNG_PULSE_LEN_MAX &&
 8000940:	001a      	movs	r2, r3
 8000942:	3a32      	subs	r2, #50	; 0x32
 8000944:	2a0d      	cmp	r2, #13
 8000946:	d806      	bhi.n	8000956 <irmp_ISR+0x53a>
                            wait_for_space = 0;
 8000948:	4b51      	ldr	r3, [pc, #324]	; (8000a90 <irmp_ISR+0x674>)
 800094a:	601e      	str	r6, [r3, #0]
                            irmp_bit++;
 800094c:	2311      	movs	r3, #17
 800094e:	6003      	str	r3, [r0, #0]
                    irmp_pulse_time = 1;                                            // set counter to 1, not 0
 8000950:	2301      	movs	r3, #1
 8000952:	4a4a      	ldr	r2, [pc, #296]	; (8000a7c <irmp_ISR+0x660>)
 8000954:	e63b      	b.n	80005ce <irmp_ISR+0x1b2>
                            irmp_param.protocol         = IRMP_SAMSUNG32_PROTOCOL;
 8000956:	220a      	movs	r2, #10
                            if (irmp_pause_time >= SAMSUNG_1_PAUSE_LEN_MIN && irmp_pause_time <= SAMSUNG_1_PAUSE_LEN_MAX)
 8000958:	3b0c      	subs	r3, #12
                            irmp_param.protocol         = IRMP_SAMSUNG32_PROTOCOL;
 800095a:	6022      	str	r2, [r4, #0]
                            irmp_param.command_end      = SAMSUNG32_COMMAND_OFFSET + SAMSUNG32_COMMAND_LEN;
 800095c:	3216      	adds	r2, #22
                            irmp_param.command_offset   = SAMSUNG32_COMMAND_OFFSET;
 800095e:	62e1      	str	r1, [r4, #44]	; 0x2c
                            irmp_param.command_end      = SAMSUNG32_COMMAND_OFFSET + SAMSUNG32_COMMAND_LEN;
 8000960:	6322      	str	r2, [r4, #48]	; 0x30
                            irmp_param.complete_len     = SAMSUNG32_COMPLETE_DATA_LEN;
 8000962:	6362      	str	r2, [r4, #52]	; 0x34
                            if (irmp_pause_time >= SAMSUNG_1_PAUSE_LEN_MIN && irmp_pause_time <= SAMSUNG_1_PAUSE_LEN_MAX)
 8000964:	2b0d      	cmp	r3, #13
 8000966:	d821      	bhi.n	80009ac <irmp_ISR+0x590>
                                irmp_store_bit (1);
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fc79 	bl	8000260 <irmp_store_bit>
 800096e:	e73e      	b.n	80007ee <irmp_ISR+0x3d2>
                            irmp_start_bit_detected = 0;                            // reset flags and wait for next start bit
 8000970:	2300      	movs	r3, #0
 8000972:	6013      	str	r3, [r2, #0]
                            irmp_pause_time         = 0;
 8000974:	703b      	strb	r3, [r7, #0]
 8000976:	e7eb      	b.n	8000950 <irmp_ISR+0x534>
                    if (irmp_pulse_time >= irmp_param.pulse_1_len_min && irmp_pulse_time <= irmp_param.pulse_1_len_max &&
 8000978:	6863      	ldr	r3, [r4, #4]
 800097a:	42ab      	cmp	r3, r5
 800097c:	d809      	bhi.n	8000992 <irmp_ISR+0x576>
 800097e:	68a3      	ldr	r3, [r4, #8]
 8000980:	42ab      	cmp	r3, r5
 8000982:	d306      	bcc.n	8000992 <irmp_ISR+0x576>
                        irmp_pause_time >= irmp_param.pause_1_len_min && irmp_pause_time <= irmp_param.pause_1_len_max)
 8000984:	783b      	ldrb	r3, [r7, #0]
                    if (irmp_pulse_time >= irmp_param.pulse_1_len_min && irmp_pulse_time <= irmp_param.pulse_1_len_max &&
 8000986:	68e1      	ldr	r1, [r4, #12]
 8000988:	428b      	cmp	r3, r1
 800098a:	d302      	bcc.n	8000992 <irmp_ISR+0x576>
                        irmp_pause_time >= irmp_param.pause_1_len_min && irmp_pause_time <= irmp_param.pause_1_len_max)
 800098c:	6921      	ldr	r1, [r4, #16]
 800098e:	428b      	cmp	r3, r1
 8000990:	d9ea      	bls.n	8000968 <irmp_ISR+0x54c>
                    else if (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max &&
 8000992:	6963      	ldr	r3, [r4, #20]
 8000994:	42ab      	cmp	r3, r5
 8000996:	d8eb      	bhi.n	8000970 <irmp_ISR+0x554>
 8000998:	69a3      	ldr	r3, [r4, #24]
 800099a:	42ab      	cmp	r3, r5
 800099c:	d3e8      	bcc.n	8000970 <irmp_ISR+0x554>
                             irmp_pause_time >= irmp_param.pause_0_len_min && irmp_pause_time <= irmp_param.pause_0_len_max)
 800099e:	783b      	ldrb	r3, [r7, #0]
                    else if (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max &&
 80009a0:	69e1      	ldr	r1, [r4, #28]
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d3e4      	bcc.n	8000970 <irmp_ISR+0x554>
                             irmp_pause_time >= irmp_param.pause_0_len_min && irmp_pause_time <= irmp_param.pause_0_len_max)
 80009a6:	6a21      	ldr	r1, [r4, #32]
 80009a8:	428b      	cmp	r3, r1
 80009aa:	d8e1      	bhi.n	8000970 <irmp_ISR+0x554>
                                irmp_store_bit (0);
 80009ac:	2000      	movs	r0, #0
 80009ae:	e7dc      	b.n	800096a <irmp_ISR+0x54e>
                if (! irmp_input)                                                   // still light?
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d103      	bne.n	80009bc <irmp_ISR+0x5a0>
                    irmp_pulse_time++;                                              // increment counter
 80009b4:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <irmp_ISR+0x660>)
 80009b6:	6813      	ldr	r3, [r2, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	e608      	b.n	80005ce <irmp_ISR+0x1b2>
                    wait_for_space  = 1;                                            // let's count the time (see above)
 80009bc:	2301      	movs	r3, #1
 80009be:	e741      	b.n	8000844 <irmp_ISR+0x428>
                    repetition_frame_number = 0;
 80009c0:	2700      	movs	r7, #0
 80009c2:	4a36      	ldr	r2, [pc, #216]	; (8000a9c <irmp_ISR+0x680>)
 80009c4:	6017      	str	r7, [r2, #0]
 80009c6:	e5a1      	b.n	800050c <irmp_ISR+0xf0>
                    irmp_ir_detected = TRUE;
 80009c8:	2201      	movs	r2, #1
 80009ca:	4f32      	ldr	r7, [pc, #200]	; (8000a94 <irmp_ISR+0x678>)
 80009cc:	603a      	str	r2, [r7, #0]
 80009ce:	4f34      	ldr	r7, [pc, #208]	; (8000aa0 <irmp_ISR+0x684>)
                    if (irmp_param.protocol == IRMP_DENON_PROTOCOL)
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d179      	bne.n	8000ac8 <irmp_ISR+0x6ac>
                        if ((~irmp_tmp_command & 0x3FF) == last_irmp_denon_command) // command bits must be inverted
 80009d4:	43e8      	mvns	r0, r5
 80009d6:	4c33      	ldr	r4, [pc, #204]	; (8000aa4 <irmp_ISR+0x688>)
 80009d8:	0580      	lsls	r0, r0, #22
 80009da:	6821      	ldr	r1, [r4, #0]
 80009dc:	0d80      	lsrs	r0, r0, #22
 80009de:	2600      	movs	r6, #0
 80009e0:	4288      	cmp	r0, r1
 80009e2:	d139      	bne.n	8000a58 <irmp_ISR+0x63c>
                            irmp_protocol = irmp_param.protocol;                    // store protocol
 80009e4:	603b      	str	r3, [r7, #0]
                            irmp_tmp_command = last_irmp_denon_command;             // use command received before!
 80009e6:	4a2c      	ldr	r2, [pc, #176]	; (8000a98 <irmp_ISR+0x67c>)
                            irmp_address = irmp_tmp_address;                        // store address
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <irmp_ISR+0x65c>)
                            irmp_tmp_command = last_irmp_denon_command;             // use command received before!
 80009ea:	6010      	str	r0, [r2, #0]
                            irmp_address = irmp_tmp_address;                        // store address
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <irmp_ISR+0x68c>)
                            last_irmp_denon_command = 0;
 80009f0:	6026      	str	r6, [r4, #0]
                            irmp_address = irmp_tmp_address;                        // store address
 80009f2:	601a      	str	r2, [r3, #0]
                            irmp_command = irmp_tmp_command;                        // store command
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <irmp_ISR+0x690>)
 80009f6:	6018      	str	r0, [r3, #0]
                if (irmp_ir_detected)
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <irmp_ISR+0x678>)
 80009fa:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <irmp_ISR+0x67c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d01b      	beq.n	8000a3a <irmp_ISR+0x61e>
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <irmp_ISR+0x65c>)
                    if (last_irmp_command == irmp_tmp_command &&
 8000a04:	6814      	ldr	r4, [r2, #0]
 8000a06:	681e      	ldr	r6, [r3, #0]
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <irmp_ISR+0x694>)
 8000a0a:	482a      	ldr	r0, [pc, #168]	; (8000ab4 <irmp_ISR+0x698>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4d2a      	ldr	r5, [pc, #168]	; (8000ab8 <irmp_ISR+0x69c>)
 8000a10:	42a3      	cmp	r3, r4
 8000a12:	d10d      	bne.n	8000a30 <irmp_ISR+0x614>
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	42b3      	cmp	r3, r6
 8000a18:	d10a      	bne.n	8000a30 <irmp_ISR+0x614>
                        last_irmp_address == irmp_tmp_address &&
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <irmp_ISR+0x6a0>)
 8000a1c:	6801      	ldr	r1, [r0, #0]
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d806      	bhi.n	8000a30 <irmp_ISR+0x614>
                        irmp_flags |= IRMP_FLAG_REPETITION;
 8000a22:	4f27      	ldr	r7, [pc, #156]	; (8000ac0 <irmp_ISR+0x6a4>)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	469c      	mov	ip, r3
 8000a28:	2301      	movs	r3, #1
 8000a2a:	4661      	mov	r1, ip
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	603b      	str	r3, [r7, #0]
                    last_irmp_command = irmp_tmp_command;                           // store as last command, too
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <irmp_ISR+0x694>)
                    last_irmp_address = irmp_tmp_address;                           // store as last address, too
 8000a32:	602e      	str	r6, [r5, #0]
                    last_irmp_command = irmp_tmp_command;                           // store as last command, too
 8000a34:	601c      	str	r4, [r3, #0]
                    key_repetition_len = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	6003      	str	r3, [r0, #0]
                irmp_start_bit_detected = 0;                                        // and wait for next start bit
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	4910      	ldr	r1, [pc, #64]	; (8000a80 <irmp_ISR+0x664>)
                irmp_tmp_command        = 0;
 8000a3e:	6013      	str	r3, [r2, #0]
                irmp_start_bit_detected = 0;                                        // and wait for next start bit
 8000a40:	600b      	str	r3, [r1, #0]
                irmp_pulse_time         = 0;
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <irmp_ISR+0x660>)
                irmp_pause_time         = 0;
 8000a44:	490a      	ldr	r1, [pc, #40]	; (8000a70 <irmp_ISR+0x654>)
                irmp_pulse_time         = 0;
 8000a46:	6013      	str	r3, [r2, #0]
                irmp_pause_time         = 0;
 8000a48:	700b      	strb	r3, [r1, #0]
                if (irmp_protocol == IRMP_JVC_PROTOCOL)                             // the stop bit of JVC frame is also start bit of next frame
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <irmp_ISR+0x684>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b14      	cmp	r3, #20
 8000a50:	d000      	beq.n	8000a54 <irmp_ISR+0x638>
 8000a52:	e4f7      	b.n	8000444 <irmp_ISR+0x28>
                    irmp_pulse_time = ((uint_fast8_t)(F_INTERRUPTS * JVC_START_BIT_PULSE_TIME));
 8000a54:	335c      	adds	r3, #92	; 0x5c
 8000a56:	e50e      	b.n	8000476 <irmp_ISR+0x5a>
                            if ((irmp_tmp_command & 0x01) == 0x00)
 8000a58:	402a      	ands	r2, r5
 8000a5a:	d104      	bne.n	8000a66 <irmp_ISR+0x64a>
                                denon_repetition_len = 0;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <irmp_ISR+0x6a8>)
                                last_irmp_denon_command = irmp_tmp_command;
 8000a5e:	6025      	str	r5, [r4, #0]
                                denon_repetition_len = 0;
 8000a60:	601a      	str	r2, [r3, #0]
                                irmp_ir_detected = FALSE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <irmp_ISR+0x678>)
 8000a64:	e55e      	b.n	8000524 <irmp_ISR+0x108>
                                irmp_ir_detected = FALSE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <irmp_ISR+0x678>)
                                last_irmp_denon_command = 0;
 8000a68:	6026      	str	r6, [r4, #0]
                                irmp_ir_detected = FALSE;
 8000a6a:	601e      	str	r6, [r3, #0]
 8000a6c:	e7c4      	b.n	80009f8 <irmp_ISR+0x5dc>
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000094 	.word	0x20000094
 8000a74:	20000050 	.word	0x20000050
 8000a78:	200000a4 	.word	0x200000a4
 8000a7c:	2000009c 	.word	0x2000009c
 8000a80:	200000a0 	.word	0x200000a0
 8000a84:	2000003c 	.word	0x2000003c
 8000a88:	200000bc 	.word	0x200000bc
 8000a8c:	200000b8 	.word	0x200000b8
 8000a90:	200000c8 	.word	0x200000c8
 8000a94:	2000004c 	.word	0x2000004c
 8000a98:	200000a8 	.word	0x200000a8
 8000a9c:	200000c4 	.word	0x200000c4
 8000aa0:	20000098 	.word	0x20000098
 8000aa4:	200000b4 	.word	0x200000b4
 8000aa8:	20000038 	.word	0x20000038
 8000aac:	20000040 	.word	0x20000040
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200000b0 	.word	0x200000b0
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	00000752 	.word	0x00000752
 8000ac0:	20000044 	.word	0x20000044
 8000ac4:	20000000 	.word	0x20000000
                        if (irmp_param.protocol == IRMP_NEC_PROTOCOL && irmp_bit == 0)  // repetition frame
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d117      	bne.n	8000afc <irmp_ISR+0x6e0>
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d10f      	bne.n	8000af0 <irmp_ISR+0x6d4>
                            if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX)
 8000ad0:	4c3b      	ldr	r4, [pc, #236]	; (8000bc0 <irmp_ISR+0x7a4>)
 8000ad2:	4d3c      	ldr	r5, [pc, #240]	; (8000bc4 <irmp_ISR+0x7a8>)
 8000ad4:	6821      	ldr	r1, [r4, #0]
 8000ad6:	42a9      	cmp	r1, r5
 8000ad8:	d80d      	bhi.n	8000af6 <irmp_ISR+0x6da>
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 8000ada:	4d3b      	ldr	r5, [pc, #236]	; (8000bc8 <irmp_ISR+0x7ac>)
                                key_repetition_len = 0;
 8000adc:	6020      	str	r0, [r4, #0]
                                irmp_tmp_address = last_irmp_address;                   // address is last address
 8000ade:	682f      	ldr	r7, [r5, #0]
 8000ae0:	4d3a      	ldr	r5, [pc, #232]	; (8000bcc <irmp_ISR+0x7b0>)
 8000ae2:	602f      	str	r7, [r5, #0]
                                irmp_tmp_command = last_irmp_command;                   // command is last command
 8000ae4:	4d3a      	ldr	r5, [pc, #232]	; (8000bd0 <irmp_ISR+0x7b4>)
 8000ae6:	602e      	str	r6, [r5, #0]
                                irmp_flags |= IRMP_FLAG_REPETITION;
 8000ae8:	4d3a      	ldr	r5, [pc, #232]	; (8000bd4 <irmp_ISR+0x7b8>)
 8000aea:	682e      	ldr	r6, [r5, #0]
 8000aec:	4332      	orrs	r2, r6
 8000aee:	602a      	str	r2, [r5, #0]
                            irmp_protocol = irmp_param.protocol;
 8000af0:	4a39      	ldr	r2, [pc, #228]	; (8000bd8 <irmp_ISR+0x7bc>)
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	e02e      	b.n	8000b54 <irmp_ISR+0x738>
                                irmp_ir_detected = FALSE;
 8000af6:	4a39      	ldr	r2, [pc, #228]	; (8000bdc <irmp_ISR+0x7c0>)
 8000af8:	6010      	str	r0, [r2, #0]
 8000afa:	e7f9      	b.n	8000af0 <irmp_ISR+0x6d4>
                        if (irmp_param.protocol == IRMP_KASEIKYO_PROTOCOL)
 8000afc:	2b05      	cmp	r3, #5
 8000afe:	d123      	bne.n	8000b48 <irmp_ISR+0x72c>
                            if (xor_value != (xor_check[2] & 0x0F))
 8000b00:	200f      	movs	r0, #15
                            xor_value = (xor_check[0] & 0x0F) ^ ((xor_check[0] & 0xF0) >> 4) ^ (xor_check[1] & 0x0F) ^ ((xor_check[1] & 0xF0) >> 4);
 8000b02:	4c37      	ldr	r4, [pc, #220]	; (8000be0 <irmp_ISR+0x7c4>)
 8000b04:	7827      	ldrb	r7, [r4, #0]
 8000b06:	7866      	ldrb	r6, [r4, #1]
 8000b08:	093a      	lsrs	r2, r7, #4
                            if (xor_value != (xor_check[2] & 0x0F))
 8000b0a:	4007      	ands	r7, r0
 8000b0c:	407a      	eors	r2, r7
 8000b0e:	0037      	movs	r7, r6
 8000b10:	78a5      	ldrb	r5, [r4, #2]
 8000b12:	4007      	ands	r7, r0
 8000b14:	407a      	eors	r2, r7
                            xor_value = (xor_check[0] & 0x0F) ^ ((xor_check[0] & 0xF0) >> 4) ^ (xor_check[1] & 0x0F) ^ ((xor_check[1] & 0xF0) >> 4);
 8000b16:	0936      	lsrs	r6, r6, #4
                            if (xor_value != (xor_check[2] & 0x0F))
 8000b18:	4072      	eors	r2, r6
 8000b1a:	4028      	ands	r0, r5
 8000b1c:	4282      	cmp	r2, r0
 8000b1e:	d002      	beq.n	8000b26 <irmp_ISR+0x70a>
                                irmp_ir_detected = FALSE;
 8000b20:	2200      	movs	r2, #0
 8000b22:	492e      	ldr	r1, [pc, #184]	; (8000bdc <irmp_ISR+0x7c0>)
 8000b24:	600a      	str	r2, [r1, #0]
                            xor_value = xor_check[2] ^ xor_check[3] ^ xor_check[4];
 8000b26:	78e2      	ldrb	r2, [r4, #3]
                            if (xor_value != xor_check[5])
 8000b28:	7960      	ldrb	r0, [r4, #5]
                            xor_value = xor_check[2] ^ xor_check[3] ^ xor_check[4];
 8000b2a:	406a      	eors	r2, r5
 8000b2c:	7925      	ldrb	r5, [r4, #4]
                            if (xor_value != xor_check[5])
 8000b2e:	406a      	eors	r2, r5
 8000b30:	4290      	cmp	r0, r2
 8000b32:	d002      	beq.n	8000b3a <irmp_ISR+0x71e>
                                irmp_ir_detected = FALSE;
 8000b34:	2200      	movs	r2, #0
 8000b36:	4929      	ldr	r1, [pc, #164]	; (8000bdc <irmp_ISR+0x7c0>)
 8000b38:	600a      	str	r2, [r1, #0]
                            irmp_flags |= genre2;       // write the genre2 bits into MSB of the flag byte
 8000b3a:	4826      	ldr	r0, [pc, #152]	; (8000bd4 <irmp_ISR+0x7b8>)
 8000b3c:	4c29      	ldr	r4, [pc, #164]	; (8000be4 <irmp_ISR+0x7c8>)
 8000b3e:	6802      	ldr	r2, [r0, #0]
 8000b40:	6824      	ldr	r4, [r4, #0]
 8000b42:	4322      	orrs	r2, r4
 8000b44:	6002      	str	r2, [r0, #0]
 8000b46:	e7d3      	b.n	8000af0 <irmp_ISR+0x6d4>
                        if (irmp_param.protocol == IRMP_RC6_PROTOCOL && irmp_param.complete_len == RC6_COMPLETE_DATA_LEN_LONG)     // RC6 mode = 6?
 8000b48:	2b09      	cmp	r3, #9
 8000b4a:	d1d1      	bne.n	8000af0 <irmp_ISR+0x6d4>
 8000b4c:	2c24      	cmp	r4, #36	; 0x24
 8000b4e:	d1cf      	bne.n	8000af0 <irmp_ISR+0x6d4>
                            irmp_protocol = IRMP_RC6A_PROTOCOL;
 8000b50:	2215      	movs	r2, #21
 8000b52:	603a      	str	r2, [r7, #0]
                        irmp_address = irmp_tmp_address;                            // store address
 8000b54:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <irmp_ISR+0x7b0>)
 8000b56:	6810      	ldr	r0, [r2, #0]
 8000b58:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <irmp_ISR+0x7cc>)
 8000b5a:	6010      	str	r0, [r2, #0]
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <irmp_ISR+0x7b4>)
                        if (irmp_param.protocol == IRMP_NEC_PROTOCOL)
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d108      	bne.n	8000b74 <irmp_ISR+0x758>
                            last_irmp_address = irmp_tmp_address;                   // store as last address, too
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <irmp_ISR+0x7ac>)
 8000b64:	6018      	str	r0, [r3, #0]
                        irmp_command = irmp_tmp_command;                            // store command
 8000b66:	6812      	ldr	r2, [r2, #0]
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <irmp_ISR+0x7d0>)
 8000b6a:	601a      	str	r2, [r3, #0]
                        irmp_id = irmp_tmp_id;
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <irmp_ISR+0x7d4>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <irmp_ISR+0x7d8>)
 8000b72:	e4d7      	b.n	8000524 <irmp_ISR+0x108>
                        if (irmp_param.protocol == IRMP_RC5_PROTOCOL)
 8000b74:	2b07      	cmp	r3, #7
 8000b76:	d1f6      	bne.n	8000b66 <irmp_ISR+0x74a>
                            irmp_tmp_command |= rc5_cmd_bit6;                       // store bit 6
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <irmp_ISR+0x7dc>)
 8000b7a:	6811      	ldr	r1, [r2, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	430b      	orrs	r3, r1
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e7f0      	b.n	8000b66 <irmp_ISR+0x74a>
                            else if ((irmp_param.protocol == IRMP_NEC_PROTOCOL || irmp_param.protocol == IRMP_NEC42_PROTOCOL) && irmp_bit == 0)
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	d000      	beq.n	8000b8a <irmp_ISR+0x76e>
 8000b88:	e663      	b.n	8000852 <irmp_ISR+0x436>
                                if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX)
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <irmp_ISR+0x7a4>)
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <irmp_ISR+0x7a8>)
 8000b8e:	6808      	ldr	r0, [r1, #0]
 8000b90:	4290      	cmp	r0, r2
 8000b92:	d900      	bls.n	8000b96 <irmp_ISR+0x77a>
 8000b94:	e65a      	b.n	800084c <irmp_ISR+0x430>
                                    irmp_param.protocol     = IRMP_NEC_PROTOCOL;            // switch protocol
 8000b96:	2002      	movs	r0, #2
                                    irmp_param.stop_bit     = TRUE;                         // set flag
 8000b98:	2201      	movs	r2, #1
                                    irmp_param.protocol     = IRMP_NEC_PROTOCOL;            // switch protocol
 8000b9a:	6018      	str	r0, [r3, #0]
                                    irmp_param.complete_len = irmp_bit;                     // patch length: 16 or 17
 8000b9c:	2000      	movs	r0, #0
                                    irmp_param.stop_bit     = TRUE;                         // set flag
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
                                    irmp_param.complete_len = irmp_bit;                     // patch length: 16 or 17
 8000ba0:	6358      	str	r0, [r3, #52]	; 0x34
                                    irmp_tmp_address = last_irmp_address;                   // address is last address
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <irmp_ISR+0x7ac>)
                                    key_repetition_len = 0;
 8000ba4:	6008      	str	r0, [r1, #0]
                                    irmp_tmp_address = last_irmp_address;                   // address is last address
 8000ba6:	681c      	ldr	r4, [r3, #0]
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <irmp_ISR+0x7b0>)
 8000baa:	601c      	str	r4, [r3, #0]
                                    irmp_tmp_command = last_irmp_command;                   // command is last command
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <irmp_ISR+0x7e0>)
 8000bae:	681c      	ldr	r4, [r3, #0]
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <irmp_ISR+0x7b4>)
 8000bb2:	601c      	str	r4, [r3, #0]
                                    irmp_flags |= IRMP_FLAG_REPETITION;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <irmp_ISR+0x7b8>)
 8000bb6:	681c      	ldr	r4, [r3, #0]
 8000bb8:	4322      	orrs	r2, r4
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e488      	b.n	80004d0 <irmp_ISR+0xb4>
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	200000b0 	.word	0x200000b0
 8000bc4:	000005db 	.word	0x000005db
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	200000a4 	.word	0x200000a4
 8000bd0:	200000a8 	.word	0x200000a8
 8000bd4:	20000044 	.word	0x20000044
 8000bd8:	20000098 	.word	0x20000098
 8000bdc:	2000004c 	.word	0x2000004c
 8000be0:	200000d0 	.word	0x200000d0
 8000be4:	20000034 	.word	0x20000034
 8000be8:	20000038 	.word	0x20000038
 8000bec:	20000040 	.word	0x20000040
 8000bf0:	200000ac 	.word	0x200000ac
 8000bf4:	20000048 	.word	0x20000048
 8000bf8:	200000c0 	.word	0x200000c0
 8000bfc:	20000008 	.word	0x20000008

08000c00 <activateIR>:

/*** Function to activate the timer of the IR sensor ***/

static void activateIR()
{
	__HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);
 8000c00:	2202      	movs	r2, #2
{
 8000c02:	b510      	push	{r4, lr}
	__HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);
 8000c04:	4c05      	ldr	r4, [pc, #20]	; (8000c1c <activateIR+0x1c>)
 8000c06:	4252      	negs	r2, r2
 8000c08:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_Base_Start_IT(&htim14);
 8000c0a:	0020      	movs	r0, r4
	__HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);
 8000c0c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim14);
 8000c0e:	f002 f8b5 	bl	8002d7c <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c18:	bd10      	pop	{r4, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	20000228 	.word	0x20000228

08000c20 <RGB_MCU>:
{
 8000c20:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(RGB_MCU_EN_GPIO_Port, RGB_MCU_EN_Pin, GPIO_PIN_RESET);
 8000c22:	2490      	movs	r4, #144	; 0x90
 8000c24:	05e4      	lsls	r4, r4, #23
 8000c26:	0020      	movs	r0, r4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	f001 fb78 	bl	8002320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_RPi_EN_GPIO_Port, RGB_RPi_EN_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2108      	movs	r1, #8
 8000c34:	0020      	movs	r0, r4
 8000c36:	f001 fb73 	bl	8002320 <HAL_GPIO_WritePin>
}
 8000c3a:	bd10      	pop	{r4, pc}

08000c3c <RGB_RPi>:
{
 8000c3c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(RGB_MCU_EN_GPIO_Port, RGB_MCU_EN_Pin, GPIO_PIN_SET);
 8000c3e:	2490      	movs	r4, #144	; 0x90
 8000c40:	05e4      	lsls	r4, r4, #23
 8000c42:	0020      	movs	r0, r4
 8000c44:	2201      	movs	r2, #1
 8000c46:	2104      	movs	r1, #4
 8000c48:	f001 fb6a 	bl	8002320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGB_RPi_EN_GPIO_Port, RGB_RPi_EN_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2108      	movs	r1, #8
 8000c50:	0020      	movs	r0, r4
 8000c52:	f001 fb65 	bl	8002320 <HAL_GPIO_WritePin>
}
 8000c56:	bd10      	pop	{r4, pc}

08000c58 <WS2812_ChangeColor>:
{
 8000c58:	b510      	push	{r4, lr}
 8000c5a:	0004      	movs	r4, r0
	  ws28xx_SetColor(0, Color);
 8000c5c:	0001      	movs	r1, r0
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 fe4e 	bl	8001900 <ws28xx_SetColor>
	  ws28xx_SetColor(1, Color);
 8000c64:	0021      	movs	r1, r4
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fe4a 	bl	8001900 <ws28xx_SetColor>
	  ws28xx_SetColor(2, Color);
 8000c6c:	0021      	movs	r1, r4
 8000c6e:	2002      	movs	r0, #2
 8000c70:	f000 fe46 	bl	8001900 <ws28xx_SetColor>
	  ws28xx_SetColor(3, Color);
 8000c74:	0021      	movs	r1, r4
 8000c76:	2003      	movs	r0, #3
 8000c78:	f000 fe42 	bl	8001900 <ws28xx_SetColor>
	  ws28xx_Update();
 8000c7c:	f000 fe38 	bl	80018f0 <ws28xx_Update>
}
 8000c80:	bd10      	pop	{r4, pc}
	...

08000c84 <flashConfig>:
{
 8000c84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 8000c86:	f001 f99d 	bl	8001fc4 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000c8a:	2400      	movs	r4, #0
	EraseInitStruct.NbPages     = 1;
 8000c8c:	2301      	movs	r3, #1
	EraseInitStruct.PageAddress = 0x8007C00;
 8000c8e:	4e15      	ldr	r6, [pc, #84]	; (8000ce4 <flashConfig+0x60>)
	 if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000c90:	4915      	ldr	r1, [pc, #84]	; (8000ce8 <flashConfig+0x64>)
 8000c92:	a801      	add	r0, sp, #4
	EraseInitStruct.PageAddress = 0x8007C00;
 8000c94:	9602      	str	r6, [sp, #8]
	EraseInitStruct.NbPages     = 1;
 8000c96:	9303      	str	r3, [sp, #12]
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000c98:	9401      	str	r4, [sp, #4]
	 if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000c9a:	f001 fa41 	bl	8002120 <HAL_FLASHEx_Erase>
	  flashValue(irmp_protocol_FlashAdress,irmp_new_data.protocol);
 8000c9e:	4d13      	ldr	r5, [pc, #76]	; (8000cec <flashConfig+0x68>)
	 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address , data) != HAL_OK)
 8000ca0:	0031      	movs	r1, r6
 8000ca2:	782a      	ldrb	r2, [r5, #0]
 8000ca4:	0023      	movs	r3, r4
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f001 f9d4 	bl	8002054 <HAL_FLASH_Program>
	  flashValue(irmp_address_FlashAdress,irmp_new_data.address);
 8000cac:	78aa      	ldrb	r2, [r5, #2]
 8000cae:	786b      	ldrb	r3, [r5, #1]
 8000cb0:	0212      	lsls	r2, r2, #8
	 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address , data) != HAL_OK)
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <flashConfig+0x6c>)
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f001 f9cb 	bl	8002054 <HAL_FLASH_Program>
	  flashValue(irmp_command_FlashAdress,irmp_new_data.command);
 8000cbe:	792a      	ldrb	r2, [r5, #4]
 8000cc0:	78eb      	ldrb	r3, [r5, #3]
 8000cc2:	0212      	lsls	r2, r2, #8
	 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address , data) != HAL_OK)
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	490b      	ldr	r1, [pc, #44]	; (8000cf4 <flashConfig+0x70>)
 8000cc8:	0023      	movs	r3, r4
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f001 f9c2 	bl	8002054 <HAL_FLASH_Program>
	  flashValue(led_mode_FlashAdress,ledMode);
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <flashConfig+0x74>)
	 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address , data) != HAL_OK)
 8000cd2:	490a      	ldr	r1, [pc, #40]	; (8000cfc <flashConfig+0x78>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	0023      	movs	r3, r4
 8000cda:	f001 f9bb 	bl	8002054 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000cde:	f001 f985 	bl	8001fec <HAL_FLASH_Lock>
}
 8000ce2:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000ce4:	08007c00 	.word	0x08007c00
 8000ce8:	200000d8 	.word	0x200000d8
 8000cec:	200000f6 	.word	0x200000f6
 8000cf0:	08007c10 	.word	0x08007c10
 8000cf4:	08007c20 	.word	0x08007c20
 8000cf8:	200000e0 	.word	0x200000e0
 8000cfc:	08007c30 	.word	0x08007c30

08000d00 <SystemClock_Config>:
{
 8000d00:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d02:	2410      	movs	r4, #16
{
 8000d04:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	222c      	movs	r2, #44	; 0x2c
 8000d08:	2100      	movs	r1, #0
 8000d0a:	a809      	add	r0, sp, #36	; 0x24
 8000d0c:	f002 fde9 	bl	80038e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	0022      	movs	r2, r4
 8000d12:	2100      	movs	r1, #0
 8000d14:	4668      	mov	r0, sp
 8000d16:	f002 fde4 	bl	80038e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1a:	0022      	movs	r2, r4
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	a804      	add	r0, sp, #16
 8000d20:	f002 fddf 	bl	80038e2 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000d24:	2312      	movs	r3, #18
 8000d26:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000d28:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2a:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d2e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000d30:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	3c0e      	subs	r4, #14
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d34:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000d38:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3a:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d3c:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f001 fb03 	bl	8002348 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	2307      	movs	r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d48:	0021      	movs	r1, r4
 8000d4a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d50:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d52:	f001 fd2d 	bl	80027b0 <HAL_RCC_ClockConfig>
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d56:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d58:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d5a:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	f001 fdbc 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
}
 8000d60:	b015      	add	sp, #84	; 0x54
 8000d62:	bd30      	pop	{r4, r5, pc}

08000d64 <main>:
{
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	b095      	sub	sp, #84	; 0x54
	uint8_t shutdownMessage[] = "xxxShutdownRaspberryPixxx\n\r";
 8000d68:	221c      	movs	r2, #28
 8000d6a:	49ee      	ldr	r1, [pc, #952]	; (8001124 <main+0x3c0>)
 8000d6c:	a80d      	add	r0, sp, #52	; 0x34
 8000d6e:	f002 fdaf 	bl	80038d0 <memcpy>
	uint8_t ledStatus[] = "0\n\r";
 8000d72:	4bed      	ldr	r3, [pc, #948]	; (8001128 <main+0x3c4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4ded      	ldr	r5, [pc, #948]	; (800112c <main+0x3c8>)
	uint8_t ledStatus[] = "0\n\r";
 8000d76:	9302      	str	r3, [sp, #8]
  HAL_Init();
 8000d78:	f000 fe66 	bl	8001a48 <HAL_Init>
  SystemClock_Config();
 8000d7c:	f7ff ffc0 	bl	8000d00 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	2214      	movs	r2, #20
 8000d82:	2100      	movs	r1, #0
 8000d84:	a808      	add	r0, sp, #32
 8000d86:	f002 fdac 	bl	80038e2 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	696a      	ldr	r2, [r5, #20]
 8000d8e:	0289      	lsls	r1, r1, #10
 8000d90:	430a      	orrs	r2, r1
 8000d92:	616a      	str	r2, [r5, #20]
 8000d94:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOA, CTRL_VUSB_Pin|RGB_MCU_EN_Pin|RGB_RPi_EN_Pin, GPIO_PIN_RESET);
 8000d96:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	9304      	str	r3, [sp, #16]
 8000d9e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	696a      	ldr	r2, [r5, #20]
 8000da2:	02c9      	lsls	r1, r1, #11
 8000da4:	430a      	orrs	r2, r1
 8000da6:	616a      	str	r2, [r5, #20]
 8000da8:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOA, CTRL_VUSB_Pin|RGB_MCU_EN_Pin|RGB_RPi_EN_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	400b      	ands	r3, r1
 8000dae:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, CTRL_VUSB_Pin|RGB_MCU_EN_Pin|RGB_RPi_EN_Pin, GPIO_PIN_RESET);
 8000db0:	210d      	movs	r1, #13
 8000db2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, CTRL_VUSB_Pin|RGB_MCU_EN_Pin|RGB_RPi_EN_Pin, GPIO_PIN_RESET);
 8000db6:	f001 fab3 	bl	8002320 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CTRL_VUSB_Pin|RGB_MCU_EN_Pin|RGB_RPi_EN_Pin;
 8000dc0:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	a908      	add	r1, sp, #32
 8000dc4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = CTRL_VUSB_Pin|RGB_MCU_EN_Pin|RGB_RPi_EN_Pin;
 8000dc6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f001 f9f1 	bl	80021b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_IN_Pin;
 8000dd2:	2302      	movs	r3, #2
  HAL_GPIO_Init(BUTTON_IN_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = BUTTON_IN_Pin;
 8000dd6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd8:	4bd5      	ldr	r3, [pc, #852]	; (8001130 <main+0x3cc>)
  HAL_GPIO_Init(BUTTON_IN_GPIO_Port, &GPIO_InitStruct);
 8000dda:	a908      	add	r1, sp, #32
 8000ddc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dde:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de0:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(BUTTON_IN_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f001 f9e7 	bl	80021b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(IRMP_Receive_GPIO_Port, &GPIO_InitStruct);
 8000de6:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = IRMP_Receive_Pin;
 8000de8:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(IRMP_Receive_GPIO_Port, &GPIO_InitStruct);
 8000dea:	a908      	add	r1, sp, #32
 8000dec:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = IRMP_Receive_Pin;
 8000dee:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(IRMP_Receive_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f001 f9de 	bl	80021b4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df8:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000dfa:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfc:	4333      	orrs	r3, r6
 8000dfe:	616b      	str	r3, [r5, #20]
 8000e00:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000e02:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e04:	4033      	ands	r3, r6
 8000e06:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000e08:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000e0c:	f000 ff74 	bl	8001cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e10:	200a      	movs	r0, #10
 8000e12:	f000 ff9b 	bl	8001d4c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e16:	220c      	movs	r2, #12
 8000e18:	0021      	movs	r1, r4
 8000e1a:	a808      	add	r0, sp, #32
 8000e1c:	f002 fd61 	bl	80038e2 <memset>
  hadc.Instance = ADC1;
 8000e20:	4dc4      	ldr	r5, [pc, #784]	; (8001134 <main+0x3d0>)
 8000e22:	4bc5      	ldr	r3, [pc, #788]	; (8001138 <main+0x3d4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e24:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8000e26:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2c:	23c2      	movs	r3, #194	; 0xc2
 8000e2e:	33ff      	adds	r3, #255	; 0xff
 8000e30:	61eb      	str	r3, [r5, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e32:	1d6b      	adds	r3, r5, #5
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e34:	612e      	str	r6, [r5, #16]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e36:	62ae      	str	r6, [r5, #40]	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e38:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3a:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e3c:	60ec      	str	r4, [r5, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e3e:	762c      	strb	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e40:	766c      	strb	r4, [r5, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e42:	76ac      	strb	r4, [r5, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e44:	76ec      	strb	r4, [r5, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	622c      	str	r4, [r5, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e48:	77dc      	strb	r4, [r3, #31]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e4a:	f000 fe31 	bl	8001ab0 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_9;
 8000e4e:	2309      	movs	r3, #9
 8000e50:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e58:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e5a:	a908      	add	r1, sp, #32
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e5c:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e5e:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e60:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e62:	f000 fecb 	bl	8001bfc <HAL_ADC_ConfigChannel>
  hspi1.Instance = SPI1;
 8000e66:	48b5      	ldr	r0, [pc, #724]	; (800113c <main+0x3d8>)
 8000e68:	4bb5      	ldr	r3, [pc, #724]	; (8001140 <main+0x3dc>)
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e6a:	2508      	movs	r5, #8
  hspi1.Instance = SPI1;
 8000e6c:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	2382      	movs	r3, #130	; 0x82
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_7BIT;
 8000e74:	23c0      	movs	r3, #192	; 0xc0
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8000e80:	3bfa      	subs	r3, #250	; 0xfa
 8000e82:	3bff      	subs	r3, #255	; 0xff
 8000e84:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e86:	6345      	str	r5, [r0, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e88:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e8a:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8c:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e8e:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e90:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e92:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e94:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e96:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e98:	f001 fe24 	bl	8002ae4 <HAL_SPI_Init>
  htim14.Instance = TIM14;
 8000e9c:	4aa9      	ldr	r2, [pc, #676]	; (8001144 <main+0x3e0>)
 8000e9e:	4baa      	ldr	r3, [pc, #680]	; (8001148 <main+0x3e4>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ea0:	0010      	movs	r0, r2
  htim14.Instance = TIM14;
 8000ea2:	6013      	str	r3, [r2, #0]
  htim14.Init.Period = 1599;
 8000ea4:	4ba9      	ldr	r3, [pc, #676]	; (800114c <main+0x3e8>)
  htim14.Init.Prescaler = 0;
 8000ea6:	6054      	str	r4, [r2, #4]
  htim14.Init.Period = 1599;
 8000ea8:	60d3      	str	r3, [r2, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	6113      	str	r3, [r2, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	6094      	str	r4, [r2, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	6194      	str	r4, [r2, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000eb4:	f002 f872 	bl	8002f9c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim14);
 8000eb8:	48a2      	ldr	r0, [pc, #648]	; (8001144 <main+0x3e0>)
 8000eba:	f001 ff5f 	bl	8002d7c <HAL_TIM_Base_Start_IT>
  huart1.Instance = USART1;
 8000ebe:	4fa4      	ldr	r7, [pc, #656]	; (8001150 <main+0x3ec>)
 8000ec0:	4ba4      	ldr	r3, [pc, #656]	; (8001154 <main+0x3f0>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec2:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8000ec4:	603b      	str	r3, [r7, #0]
  huart1.Init.BaudRate = 38400;
 8000ec6:	2396      	movs	r3, #150	; 0x96
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec8:	0038      	movs	r0, r7
  huart1.Init.BaudRate = 38400;
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	607b      	str	r3, [r7, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ece:	617a      	str	r2, [r7, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed0:	60bc      	str	r4, [r7, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed2:	60fc      	str	r4, [r7, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ed4:	613c      	str	r4, [r7, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	61bc      	str	r4, [r7, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	61fc      	str	r4, [r7, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eda:	623c      	str	r4, [r7, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ede:	f002 fca1 	bl	8003824 <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart1, &RxBuffer, 1);
 8000ee2:	0032      	movs	r2, r6
 8000ee4:	499c      	ldr	r1, [pc, #624]	; (8001158 <main+0x3f4>)
 8000ee6:	0038      	movs	r0, r7
 8000ee8:	f002 f954 	bl	8003194 <HAL_UART_Receive_IT>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eec:	2210      	movs	r2, #16
 8000eee:	0021      	movs	r1, r4
 8000ef0:	a808      	add	r0, sp, #32
 8000ef2:	f002 fcf6 	bl	80038e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef6:	002a      	movs	r2, r5
 8000ef8:	0021      	movs	r1, r4
 8000efa:	a806      	add	r0, sp, #24
 8000efc:	f002 fcf1 	bl	80038e2 <memset>
  htim1.Instance = TIM1;
 8000f00:	4d96      	ldr	r5, [pc, #600]	; (800115c <main+0x3f8>)
 8000f02:	4b97      	ldr	r3, [pc, #604]	; (8001160 <main+0x3fc>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f04:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 8000f06:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 32000;
 8000f08:	23fa      	movs	r3, #250	; 0xfa
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	606b      	str	r3, [r5, #4]
  htim1.Init.Period = 50;
 8000f0e:	2332      	movs	r3, #50	; 0x32
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 50;
 8000f12:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f16:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f1a:	f002 f83f 	bl	8002f9c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f20:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f24:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f28:	f002 f860 	bl	8002fec <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f2c:	a906      	add	r1, sp, #24
 8000f2e:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f34:	f002 f8f0 	bl	8003118 <HAL_TIMEx_MasterConfigSynchronization>
  htim16.Instance = TIM16;
 8000f38:	4e8a      	ldr	r6, [pc, #552]	; (8001164 <main+0x400>)
 8000f3a:	4b8b      	ldr	r3, [pc, #556]	; (8001168 <main+0x404>)
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f3c:	0030      	movs	r0, r6
  htim16.Instance = TIM16;
 8000f3e:	6033      	str	r3, [r6, #0]
  htim16.Init.Prescaler = 3124;
 8000f40:	4b8a      	ldr	r3, [pc, #552]	; (800116c <main+0x408>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	60b4      	str	r4, [r6, #8]
  htim16.Init.Prescaler = 3124;
 8000f44:	6073      	str	r3, [r6, #4]
  htim16.Init.Period = 63999;
 8000f46:	4b8a      	ldr	r3, [pc, #552]	; (8001170 <main+0x40c>)
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	6134      	str	r4, [r6, #16]
  htim16.Init.Period = 63999;
 8000f4a:	60f3      	str	r3, [r6, #12]
  htim16.Init.RepetitionCounter = 0;
 8000f4c:	6174      	str	r4, [r6, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f50:	f002 f824 	bl	8002f9c <HAL_TIM_Base_Init>
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000f54:	0022      	movs	r2, r4
 8000f56:	0021      	movs	r1, r4
 8000f58:	2013      	movs	r0, #19
 8000f5a:	f000 fecd 	bl	8001cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f5e:	2013      	movs	r0, #19
 8000f60:	f000 fef4 	bl	8001d4c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f64:	0022      	movs	r2, r4
 8000f66:	0021      	movs	r1, r4
 8000f68:	201b      	movs	r0, #27
 8000f6a:	f000 fec5 	bl	8001cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f6e:	201b      	movs	r0, #27
 8000f70:	f000 feec 	bl	8001d4c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000f74:	0022      	movs	r2, r4
 8000f76:	0021      	movs	r1, r4
 8000f78:	2005      	movs	r0, #5
 8000f7a:	f000 febd 	bl	8001cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000f7e:	2005      	movs	r0, #5
 8000f80:	f000 fee4 	bl	8001d4c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f84:	0022      	movs	r2, r4
 8000f86:	0021      	movs	r1, r4
 8000f88:	200e      	movs	r0, #14
 8000f8a:	f000 feb5 	bl	8001cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f8e:	200e      	movs	r0, #14
 8000f90:	f000 fedc 	bl	8001d4c <HAL_NVIC_EnableIRQ>
  irmp_data.protocol = *(uint8_t *)irmp_protocol_FlashAdress;
 8000f94:	4b77      	ldr	r3, [pc, #476]	; (8001174 <main+0x410>)
  ledMode = *(uint8_t *)led_mode_FlashAdress;
 8000f96:	4d78      	ldr	r5, [pc, #480]	; (8001178 <main+0x414>)
  irmp_data.protocol = *(uint8_t *)irmp_protocol_FlashAdress;
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	4b78      	ldr	r3, [pc, #480]	; (800117c <main+0x418>)
 8000f9c:	701a      	strb	r2, [r3, #0]
  irmp_data.address = *(uint16_t *)irmp_address_FlashAdress;
 8000f9e:	4a78      	ldr	r2, [pc, #480]	; (8001180 <main+0x41c>)
 8000fa0:	8812      	ldrh	r2, [r2, #0]
 8000fa2:	705a      	strb	r2, [r3, #1]
 8000fa4:	0a12      	lsrs	r2, r2, #8
 8000fa6:	709a      	strb	r2, [r3, #2]
  irmp_data.command = *(uint16_t *)irmp_command_FlashAdress;
 8000fa8:	4a76      	ldr	r2, [pc, #472]	; (8001184 <main+0x420>)
 8000faa:	8812      	ldrh	r2, [r2, #0]
 8000fac:	70da      	strb	r2, [r3, #3]
 8000fae:	0a12      	lsrs	r2, r2, #8
 8000fb0:	711a      	strb	r2, [r3, #4]
  ledMode = *(uint8_t *)led_mode_FlashAdress;
 8000fb2:	4b75      	ldr	r3, [pc, #468]	; (8001188 <main+0x424>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	602b      	str	r3, [r5, #0]
  if (ledMode == 0xFF)
 8000fb8:	2bff      	cmp	r3, #255	; 0xff
 8000fba:	d100      	bne.n	8000fbe <main+0x25a>
	  ledMode = 0;
 8000fbc:	602c      	str	r4, [r5, #0]
  irmp_init();
 8000fbe:	f7ff f9b1 	bl	8000324 <irmp_init>
  RGB_MCU();
 8000fc2:	f7ff fe2d 	bl	8000c20 <RGB_MCU>
	  WS2812_ChangeColor(ws28xx_Color_Red);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff fe46 	bl	8000c58 <WS2812_ChangeColor>
	  if (!(ledMode == 0))
 8000fcc:	682b      	ldr	r3, [r5, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d005      	beq.n	8000fde <main+0x27a>
		  HAL_Delay(100);
 8000fd2:	2064      	movs	r0, #100	; 0x64
 8000fd4:	f000 fd5a 	bl	8001a8c <HAL_Delay>
		  WS2812_ChangeColor(ws28xx_Color_Black);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fe3d 	bl	8000c58 <WS2812_ChangeColor>
	HAL_GPIO_WritePin(CTRL_VUSB_GPIO_Port, CTRL_VUSB_Pin, GPIO_PIN_RESET);
 8000fde:	2090      	movs	r0, #144	; 0x90
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	05c0      	lsls	r0, r0, #23
 8000fe6:	f001 f99b 	bl	8002320 <HAL_GPIO_WritePin>
	  if(!strcmp(Rx_data,"X04\r"))
 8000fea:	4d68      	ldr	r5, [pc, #416]	; (800118c <main+0x428>)
 8000fec:	4968      	ldr	r1, [pc, #416]	; (8001190 <main+0x42c>)
 8000fee:	0028      	movs	r0, r5
 8000ff0:	f7ff f88a 	bl	8000108 <strcmp>
 8000ff4:	1e04      	subs	r4, r0, #0
 8000ff6:	d11d      	bne.n	8001034 <main+0x2d0>
		  	  strcpy(Rx_data, "    ");
 8000ff8:	4966      	ldr	r1, [pc, #408]	; (8001194 <main+0x430>)
 8000ffa:	0028      	movs	r0, r5
 8000ffc:	f002 fc79 	bl	80038f2 <strcpy>
static void learningmode()
{
	  uint8_t learningMode_on;

	  learningMode_on = 0;
	  RGB_MCU();
 8001000:	f7ff fe0e 	bl	8000c20 <RGB_MCU>
	  learningMode_on = 0;
 8001004:	9400      	str	r4, [sp, #0]
	  while (learningMode_on < 3)
 8001006:	9b00      	ldr	r3, [sp, #0]
 8001008:	4c63      	ldr	r4, [pc, #396]	; (8001198 <main+0x434>)
 800100a:	2b02      	cmp	r3, #2
 800100c:	d800      	bhi.n	8001010 <main+0x2ac>
 800100e:	e10a      	b.n	8001226 <main+0x4c2>
	HAL_TIM_Base_Stop(&htim14);
 8001010:	484c      	ldr	r0, [pc, #304]	; (8001144 <main+0x3e0>)
 8001012:	f001 fe99 	bl	8002d48 <HAL_TIM_Base_Stop>
	  	  	}
			activateIR();
	  	  }
	  }
	deactivateIR();
	flashConfig();
 8001016:	f7ff fe35 	bl	8000c84 <flashConfig>
	HAL_Delay(2000);
 800101a:	20fa      	movs	r0, #250	; 0xfa
 800101c:	00c0      	lsls	r0, r0, #3
 800101e:	f000 fd35 	bl	8001a8c <HAL_Delay>
	RGB_RPi();
 8001022:	f7ff fe0b 	bl	8000c3c <RGB_RPi>
	memset(&irmp_temp_data, 0, sizeof(IRMP_DATA));
 8001026:	2206      	movs	r2, #6
 8001028:	2100      	movs	r1, #0
 800102a:	0020      	movs	r0, r4
 800102c:	f002 fc59 	bl	80038e2 <memset>
		  	  activateIR();
 8001030:	f7ff fde6 	bl	8000c00 <activateIR>
	  if(!strncmp(Rx_data, "LM", 2) && Rx_data[2] >= '0' && Rx_data[2] <= '3' && Rx_data[3] == 13)
 8001034:	4c55      	ldr	r4, [pc, #340]	; (800118c <main+0x428>)
 8001036:	2202      	movs	r2, #2
 8001038:	4958      	ldr	r1, [pc, #352]	; (800119c <main+0x438>)
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fc61 	bl	8003902 <strncmp>
 8001040:	1e05      	subs	r5, r0, #0
 8001042:	d11e      	bne.n	8001082 <main+0x31e>
 8001044:	78a3      	ldrb	r3, [r4, #2]
 8001046:	3b30      	subs	r3, #48	; 0x30
 8001048:	2b03      	cmp	r3, #3
 800104a:	d81a      	bhi.n	8001082 <main+0x31e>
 800104c:	78e3      	ldrb	r3, [r4, #3]
 800104e:	2b0d      	cmp	r3, #13
 8001050:	d117      	bne.n	8001082 <main+0x31e>
		  RGB_MCU();
 8001052:	f7ff fde5 	bl	8000c20 <RGB_MCU>
		  if(Rx_data[2] == '0')
 8001056:	78a3      	ldrb	r3, [r4, #2]
 8001058:	2b30      	cmp	r3, #48	; 0x30
 800105a:	d000      	beq.n	800105e <main+0x2fa>
 800105c:	e16f      	b.n	800133e <main+0x5da>
			  ledMode = 0;
 800105e:	4a46      	ldr	r2, [pc, #280]	; (8001178 <main+0x414>)
			  HAL_Delay(100);
 8001060:	2064      	movs	r0, #100	; 0x64
			  ledMode = 0;
 8001062:	6015      	str	r5, [r2, #0]
			  ledStatus[0] = '0';
 8001064:	aa02      	add	r2, sp, #8
 8001066:	7013      	strb	r3, [r2, #0]
			  HAL_Delay(100);
 8001068:	f000 fd10 	bl	8001a8c <HAL_Delay>
			  WS2812_ChangeColor(ws28xx_Color_Green);
 800106c:	2002      	movs	r0, #2
			  WS2812_ChangeColor(ws28xx_Color_Black);
 800106e:	f7ff fdf3 	bl	8000c58 <WS2812_ChangeColor>
		  flashConfig();
 8001072:	f7ff fe07 	bl	8000c84 <flashConfig>
		  strcpy(Rx_data, "    ");
 8001076:	4947      	ldr	r1, [pc, #284]	; (8001194 <main+0x430>)
 8001078:	0020      	movs	r0, r4
 800107a:	f002 fc3a 	bl	80038f2 <strcpy>
		  RGB_RPi();
 800107e:	f7ff fddd 	bl	8000c3c <RGB_RPi>
	  	  if (irmp_get_data (&irmp_temp_data) || button > 0)
 8001082:	4c45      	ldr	r4, [pc, #276]	; (8001198 <main+0x434>)
 8001084:	0020      	movs	r0, r4
 8001086:	f7ff f94f 	bl	8000328 <irmp_get_data>
 800108a:	2800      	cmp	r0, #0
 800108c:	d103      	bne.n	8001096 <main+0x332>
 800108e:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <main+0x43c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0a9      	beq.n	8000fea <main+0x286>
	  		  	  __HAL_TIM_DISABLE_IT(&htim14, TIM_IT_UPDATE);
 8001096:	2101      	movs	r1, #1
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <main+0x3e0>)
	  		  	  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 800109a:	2005      	movs	r0, #5
	  		  	  __HAL_TIM_DISABLE_IT(&htim14, TIM_IT_UPDATE);
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68d3      	ldr	r3, [r2, #12]
 80010a0:	438b      	bics	r3, r1
 80010a2:	60d3      	str	r3, [r2, #12]
	  		  	  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 80010a4:	f000 fe5e 	bl	8001d64 <HAL_NVIC_DisableIRQ>
	  		  	  HAL_Delay(50);
 80010a8:	2032      	movs	r0, #50	; 0x32
 80010aa:	f000 fcef 	bl	8001a8c <HAL_Delay>
	  		  	  if (powerUP == 1)
 80010ae:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <main+0x440>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d000      	beq.n	80010b8 <main+0x354>
 80010b6:	e167      	b.n	8001388 <main+0x624>
		  		  	  if ((((irmp_temp_data.command == irmp_data.command) && (irmp_temp_data.address == irmp_data.address) && (irmp_temp_data.protocol == irmp_data.protocol) )|| (((button > 0)))))
 80010b8:	4b30      	ldr	r3, [pc, #192]	; (800117c <main+0x418>)
 80010ba:	7921      	ldrb	r1, [r4, #4]
 80010bc:	791a      	ldrb	r2, [r3, #4]
 80010be:	78e5      	ldrb	r5, [r4, #3]
 80010c0:	78d8      	ldrb	r0, [r3, #3]
 80010c2:	0209      	lsls	r1, r1, #8
 80010c4:	0212      	lsls	r2, r2, #8
 80010c6:	4329      	orrs	r1, r5
 80010c8:	4302      	orrs	r2, r0
 80010ca:	4291      	cmp	r1, r2
 80010cc:	d10d      	bne.n	80010ea <main+0x386>
 80010ce:	78a1      	ldrb	r1, [r4, #2]
 80010d0:	789a      	ldrb	r2, [r3, #2]
 80010d2:	7865      	ldrb	r5, [r4, #1]
 80010d4:	7858      	ldrb	r0, [r3, #1]
 80010d6:	0209      	lsls	r1, r1, #8
 80010d8:	0212      	lsls	r2, r2, #8
 80010da:	4329      	orrs	r1, r5
 80010dc:	4302      	orrs	r2, r0
 80010de:	4291      	cmp	r1, r2
 80010e0:	d103      	bne.n	80010ea <main+0x386>
 80010e2:	7822      	ldrb	r2, [r4, #0]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d004      	beq.n	80010f4 <main+0x390>
 80010ea:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <main+0x43c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d100      	bne.n	80010f4 <main+0x390>
 80010f2:	e084      	b.n	80011fe <main+0x49a>
		  		  		  memset(&irmp_temp_data, 0, sizeof(IRMP_DATA));
 80010f4:	2206      	movs	r2, #6
 80010f6:	2100      	movs	r1, #0
 80010f8:	4827      	ldr	r0, [pc, #156]	; (8001198 <main+0x434>)
 80010fa:	f002 fbf2 	bl	80038e2 <memset>
		  		  		  RGB_MCU();
 80010fe:	f7ff fd8f 	bl	8000c20 <RGB_MCU>
		  		  		  HAL_UART_Transmit(&huart1, (uint8_t *)shutdownMessage, sizeof(shutdownMessage), sizeof(shutdownMessage));
 8001102:	231c      	movs	r3, #28
 8001104:	a90d      	add	r1, sp, #52	; 0x34
 8001106:	001a      	movs	r2, r3
 8001108:	0038      	movs	r0, r7
 800110a:	f002 faf1 	bl	80036f0 <HAL_UART_Transmit>
		  		    	  if (ledMode == 2)
 800110e:	4d1a      	ldr	r5, [pc, #104]	; (8001178 <main+0x414>)
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d148      	bne.n	80011a8 <main+0x444>
		  		    		  WS2812_ChangeColor(ws28xx_Color_Red);
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff fd9e 	bl	8000c58 <WS2812_ChangeColor>
		  		    		  HAL_Delay(100);
 800111c:	2064      	movs	r0, #100	; 0x64
 800111e:	f000 fcb5 	bl	8001a8c <HAL_Delay>
 8001122:	e041      	b.n	80011a8 <main+0x444>
 8001124:	08003b8e 	.word	0x08003b8e
 8001128:	000d0a30 	.word	0x000d0a30
 800112c:	40021000 	.word	0x40021000
 8001130:	10210000 	.word	0x10210000
 8001134:	20000268 	.word	0x20000268
 8001138:	40012400 	.word	0x40012400
 800113c:	200001c4 	.word	0x200001c4
 8001140:	40013000 	.word	0x40013000
 8001144:	20000228 	.word	0x20000228
 8001148:	40002000 	.word	0x40002000
 800114c:	0000063f 	.word	0x0000063f
 8001150:	20000104 	.word	0x20000104
 8001154:	40013800 	.word	0x40013800
 8001158:	200000ec 	.word	0x200000ec
 800115c:	20000184 	.word	0x20000184
 8001160:	40012c00 	.word	0x40012c00
 8001164:	200002a8 	.word	0x200002a8
 8001168:	40014400 	.word	0x40014400
 800116c:	00000c34 	.word	0x00000c34
 8001170:	0000f9ff 	.word	0x0000f9ff
 8001174:	08007c00 	.word	0x08007c00
 8001178:	200000e0 	.word	0x200000e0
 800117c:	200000fc 	.word	0x200000fc
 8001180:	08007c10 	.word	0x08007c10
 8001184:	08007c20 	.word	0x08007c20
 8001188:	08007c30 	.word	0x08007c30
 800118c:	200000e5 	.word	0x200000e5
 8001190:	08003b7c 	.word	0x08003b7c
 8001194:	08003b81 	.word	0x08003b81
 8001198:	200000f0 	.word	0x200000f0
 800119c:	08003b86 	.word	0x08003b86
 80011a0:	200000eb 	.word	0x200000eb
 80011a4:	200000ed 	.word	0x200000ed
		  		  		  WS2812_ChangeColor(ws28xx_Color_Black);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fd55 	bl	8000c58 <WS2812_ChangeColor>
		  		    	  HAL_Delay(100);
 80011ae:	2064      	movs	r0, #100	; 0x64
 80011b0:	f000 fc6c 	bl	8001a8c <HAL_Delay>
		  		    	  __HAL_TIM_CLEAR_IT(&htim16 ,TIM_IT_UPDATE);
 80011b4:	2202      	movs	r2, #2
 80011b6:	6833      	ldr	r3, [r6, #0]
 80011b8:	4252      	negs	r2, r2
 80011ba:	611a      	str	r2, [r3, #16]
		  		    	  __HAL_TIM_SET_COUNTER(&htim16, 0);
 80011bc:	2200      	movs	r2, #0
		  		    	  HAL_TIM_Base_Start_IT(&htim16);
 80011be:	0030      	movs	r0, r6
		  		    	  __HAL_TIM_SET_COUNTER(&htim16, 0);
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
		  		    	  HAL_TIM_Base_Start_IT(&htim16);
 80011c2:	f001 fddb 	bl	8002d7c <HAL_TIM_Base_Start_IT>
		  		    	  timer = shutDownTime;
 80011c6:	2301      	movs	r3, #1
 80011c8:	4ca8      	ldr	r4, [pc, #672]	; (800146c <main+0x708>)
 80011ca:	7023      	strb	r3, [r4, #0]
							  	  if (!(ledMode == 2))
 80011cc:	682b      	ldr	r3, [r5, #0]
		  		    	  while(timer > 0)
 80011ce:	7822      	ldrb	r2, [r4, #0]
 80011d0:	2a00      	cmp	r2, #0
 80011d2:	d000      	beq.n	80011d6 <main+0x472>
 80011d4:	e0ce      	b.n	8001374 <main+0x610>
			  		    	  WS2812_ChangeColor(ws28xx_Color_Red);
 80011d6:	2001      	movs	r0, #1
		  		    	  if (ledMode == 0)
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d000      	beq.n	80011de <main+0x47a>
 80011dc:	e0d1      	b.n	8001382 <main+0x61e>
			  		    	  WS2812_ChangeColor(ws28xx_Color_Red);
 80011de:	f7ff fd3b 	bl	8000c58 <WS2812_ChangeColor>
		  		  		  HAL_Delay(50);
 80011e2:	2032      	movs	r0, #50	; 0x32
 80011e4:	f000 fc52 	bl	8001a8c <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_VUSB_GPIO_Port, CTRL_VUSB_Pin, GPIO_PIN_RESET);
 80011e8:	2090      	movs	r0, #144	; 0x90
 80011ea:	2200      	movs	r2, #0
 80011ec:	2101      	movs	r1, #1
 80011ee:	05c0      	lsls	r0, r0, #23
 80011f0:	f001 f896 	bl	8002320 <HAL_GPIO_WritePin>
		  		  		  powerUP = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	4a9e      	ldr	r2, [pc, #632]	; (8001470 <main+0x70c>)
 80011f8:	7013      	strb	r3, [r2, #0]
		  		  		  button = 0;
 80011fa:	4a9e      	ldr	r2, [pc, #632]	; (8001474 <main+0x710>)
 80011fc:	7013      	strb	r3, [r2, #0]
	  		  	__HAL_TIM_ENABLE_IT(&htim14, TIM_IT_UPDATE);
 80011fe:	2101      	movs	r1, #1
 8001200:	4b9d      	ldr	r3, [pc, #628]	; (8001478 <main+0x714>)
	  		  	  HAL_NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
 8001202:	2005      	movs	r0, #5
	  		  	__HAL_TIM_ENABLE_IT(&htim14, TIM_IT_UPDATE);
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68d3      	ldr	r3, [r2, #12]
 8001208:	430b      	orrs	r3, r1
 800120a:	60d3      	str	r3, [r2, #12]
	  		  	__HAL_GPIO_EXTI_CLEAR_FLAG(BUTTON_IN_Pin);
 800120c:	2202      	movs	r2, #2
 800120e:	4b9b      	ldr	r3, [pc, #620]	; (800147c <main+0x718>)
 8001210:	615a      	str	r2, [r3, #20]
	  		  	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_IN_Pin);
 8001212:	615a      	str	r2, [r3, #20]
	  		  	  HAL_NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
 8001214:	f000 fdd0 	bl	8001db8 <HAL_NVIC_ClearPendingIRQ>
	  		  	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001218:	2005      	movs	r0, #5
 800121a:	f000 fd97 	bl	8001d4c <HAL_NVIC_EnableIRQ>
	  		  	  HAL_Delay(50);
 800121e:	2032      	movs	r0, #50	; 0x32
 8001220:	f000 fc34 	bl	8001a8c <HAL_Delay>
 8001224:	e6e1      	b.n	8000fea <main+0x286>
		WS2812_ChangeColor(ws28xx_Color_Blue);
 8001226:	2003      	movs	r0, #3
 8001228:	f7ff fd16 	bl	8000c58 <WS2812_ChangeColor>
		HAL_Delay(300);
 800122c:	2096      	movs	r0, #150	; 0x96
 800122e:	0040      	lsls	r0, r0, #1
 8001230:	f000 fc2c 	bl	8001a8c <HAL_Delay>
	  	WS2812_ChangeColor(ws28xx_Color_Orange);
 8001234:	2004      	movs	r0, #4
 8001236:	f7ff fd0f 	bl	8000c58 <WS2812_ChangeColor>
		HAL_Delay(300);
 800123a:	2096      	movs	r0, #150	; 0x96
 800123c:	0040      	lsls	r0, r0, #1
 800123e:	f000 fc25 	bl	8001a8c <HAL_Delay>
		  if(irmp_get_data (&irmp_temp_data))
 8001242:	0020      	movs	r0, r4
 8001244:	f7ff f870 	bl	8000328 <irmp_get_data>
 8001248:	2800      	cmp	r0, #0
 800124a:	d100      	bne.n	800124e <main+0x4ea>
 800124c:	e6db      	b.n	8001006 <main+0x2a2>
	HAL_TIM_Base_Stop(&htim14);
 800124e:	488a      	ldr	r0, [pc, #552]	; (8001478 <main+0x714>)
 8001250:	f001 fd7a 	bl	8002d48 <HAL_TIM_Base_Stop>
			  if(!(irmp_temp_data.flags & IRMP_FLAG_REPETITION))
 8001254:	2301      	movs	r3, #1
 8001256:	7965      	ldrb	r5, [r4, #5]
 8001258:	401d      	ands	r5, r3
 800125a:	d130      	bne.n	80012be <main+0x55a>
	  		  	  WS2812_ChangeColor(ws28xx_Color_Black);
 800125c:	0028      	movs	r0, r5
 800125e:	f7ff fcfb 	bl	8000c58 <WS2812_ChangeColor>
	  		  	  HAL_Delay(500);
 8001262:	20fa      	movs	r0, #250	; 0xfa
 8001264:	0040      	lsls	r0, r0, #1
 8001266:	f000 fc11 	bl	8001a8c <HAL_Delay>
	  		  	  if (learningMode_on == 0)
 800126a:	9b00      	ldr	r3, [sp, #0]
 800126c:	4884      	ldr	r0, [pc, #528]	; (8001480 <main+0x71c>)
 800126e:	2b00      	cmp	r3, #0
 8001270:	d128      	bne.n	80012c4 <main+0x560>
	  		  		  irmp_new_data = irmp_temp_data;
 8001272:	2206      	movs	r2, #6
 8001274:	0021      	movs	r1, r4
 8001276:	f002 fb2b 	bl	80038d0 <memcpy>
	  		  		  WS2812_ChangeColor(ws28xx_Color_White);
 800127a:	2005      	movs	r0, #5
 800127c:	f7ff fcec 	bl	8000c58 <WS2812_ChangeColor>
		  			  HAL_Delay(350);
 8001280:	20af      	movs	r0, #175	; 0xaf
 8001282:	0040      	lsls	r0, r0, #1
 8001284:	f000 fc02 	bl	8001a8c <HAL_Delay>
		  			  WS2812_ChangeColor(ws28xx_Color_Black);
 8001288:	9800      	ldr	r0, [sp, #0]
 800128a:	f7ff fce5 	bl	8000c58 <WS2812_ChangeColor>
		  			  HAL_Delay(350);
 800128e:	20af      	movs	r0, #175	; 0xaf
 8001290:	0040      	lsls	r0, r0, #1
 8001292:	f000 fbfb 	bl	8001a8c <HAL_Delay>
	  		  		  learningMode_on++;
 8001296:	2301      	movs	r3, #1
 8001298:	9300      	str	r3, [sp, #0]
	  		  	if (ledMode == 0)
 800129a:	4b7a      	ldr	r3, [pc, #488]	; (8001484 <main+0x720>)
	  		  		WS2812_ChangeColor(ws28xx_Color_Green);
 800129c:	2002      	movs	r0, #2
	  		  	if (ledMode == 0)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d144      	bne.n	800132e <main+0x5ca>
	  		  	WS2812_ChangeColor(ws28xx_Color_Black);
 80012a4:	f7ff fcd8 	bl	8000c58 <WS2812_ChangeColor>
	  		  	irmp_data = irmp_temp_data;
 80012a8:	4c77      	ldr	r4, [pc, #476]	; (8001488 <main+0x724>)
 80012aa:	2206      	movs	r2, #6
 80012ac:	0021      	movs	r1, r4
 80012ae:	4877      	ldr	r0, [pc, #476]	; (800148c <main+0x728>)
 80012b0:	f002 fb0e 	bl	80038d0 <memcpy>
	  		  	memset(&irmp_temp_data, 0, sizeof(IRMP_DATA));
 80012b4:	2206      	movs	r2, #6
 80012b6:	2100      	movs	r1, #0
 80012b8:	0020      	movs	r0, r4
 80012ba:	f002 fb12 	bl	80038e2 <memset>
			activateIR();
 80012be:	f7ff fc9f 	bl	8000c00 <activateIR>
 80012c2:	e6a0      	b.n	8001006 <main+0x2a2>
	  		  		  if (irmp_new_data.command == irmp_temp_data.command)
 80012c4:	78c3      	ldrb	r3, [r0, #3]
 80012c6:	7902      	ldrb	r2, [r0, #4]
 80012c8:	469c      	mov	ip, r3
 80012ca:	7923      	ldrb	r3, [r4, #4]
 80012cc:	78e1      	ldrb	r1, [r4, #3]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	4663      	mov	r3, ip
 80012d4:	0212      	lsls	r2, r2, #8
 80012d6:	431a      	orrs	r2, r3
 80012d8:	9b01      	ldr	r3, [sp, #4]
 80012da:	430b      	orrs	r3, r1
 80012dc:	429a      	cmp	r2, r3
 80012de:	d116      	bne.n	800130e <main+0x5aa>
	  		  			irmp_new_data = irmp_temp_data;
 80012e0:	0021      	movs	r1, r4
 80012e2:	2206      	movs	r2, #6
 80012e4:	f002 faf4 	bl	80038d0 <memcpy>
	  		  			learningMode_on++;
 80012e8:	9c00      	ldr	r4, [sp, #0]
	  		  			  WS2812_ChangeColor(ws28xx_Color_White);
 80012ea:	2005      	movs	r0, #5
	  		  			learningMode_on++;
 80012ec:	3401      	adds	r4, #1
 80012ee:	b2e3      	uxtb	r3, r4
 80012f0:	9300      	str	r3, [sp, #0]
	  		  			  WS2812_ChangeColor(ws28xx_Color_White);
 80012f2:	f7ff fcb1 	bl	8000c58 <WS2812_ChangeColor>
	  		  			  HAL_Delay(350);
 80012f6:	20af      	movs	r0, #175	; 0xaf
 80012f8:	0040      	lsls	r0, r0, #1
 80012fa:	f000 fbc7 	bl	8001a8c <HAL_Delay>
	  		  			  WS2812_ChangeColor(ws28xx_Color_Black);
 80012fe:	0028      	movs	r0, r5
 8001300:	f7ff fcaa 	bl	8000c58 <WS2812_ChangeColor>
	  		  			  HAL_Delay(350);
 8001304:	20af      	movs	r0, #175	; 0xaf
 8001306:	0040      	lsls	r0, r0, #1
 8001308:	f000 fbc0 	bl	8001a8c <HAL_Delay>
 800130c:	e7c5      	b.n	800129a <main+0x536>
	  		  			WS2812_ChangeColor(ws28xx_Color_Red);
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff fca2 	bl	8000c58 <WS2812_ChangeColor>
	  		  			  HAL_Delay(500);
 8001314:	20fa      	movs	r0, #250	; 0xfa
 8001316:	0040      	lsls	r0, r0, #1
 8001318:	f000 fbb8 	bl	8001a8c <HAL_Delay>
	  		  			WS2812_ChangeColor(ws28xx_Color_Black);
 800131c:	0028      	movs	r0, r5
 800131e:	f7ff fc9b 	bl	8000c58 <WS2812_ChangeColor>
	  		  			  HAL_Delay(350);
 8001322:	20af      	movs	r0, #175	; 0xaf
 8001324:	0040      	lsls	r0, r0, #1
 8001326:	f000 fbb1 	bl	8001a8c <HAL_Delay>
	  		  			  learningMode_on = 0;
 800132a:	9500      	str	r5, [sp, #0]
 800132c:	e7b5      	b.n	800129a <main+0x536>
	  		  	WS2812_ChangeColor(ws28xx_Color_Green);
 800132e:	f7ff fc93 	bl	8000c58 <WS2812_ChangeColor>
	  		  	HAL_Delay(500);
 8001332:	20fa      	movs	r0, #250	; 0xfa
 8001334:	0040      	lsls	r0, r0, #1
 8001336:	f000 fba9 	bl	8001a8c <HAL_Delay>
	  		  	WS2812_ChangeColor(ws28xx_Color_Black);
 800133a:	2000      	movs	r0, #0
 800133c:	e7b2      	b.n	80012a4 <main+0x540>
		  else if(Rx_data[2] == '1')
 800133e:	2b31      	cmp	r3, #49	; 0x31
 8001340:	d109      	bne.n	8001356 <main+0x5f2>
			  ledMode = 1;
 8001342:	2101      	movs	r1, #1
 8001344:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <main+0x720>)
 8001346:	6011      	str	r1, [r2, #0]
			  HAL_Delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
			  ledStatus[0] = '1';
 800134a:	aa02      	add	r2, sp, #8
 800134c:	7013      	strb	r3, [r2, #0]
			  HAL_Delay(100);
 800134e:	f000 fb9d 	bl	8001a8c <HAL_Delay>
			  WS2812_ChangeColor(ws28xx_Color_Black);
 8001352:	0028      	movs	r0, r5
 8001354:	e68b      	b.n	800106e <main+0x30a>
		  else if(Rx_data[2] == '2')
 8001356:	2b32      	cmp	r3, #50	; 0x32
 8001358:	d102      	bne.n	8001360 <main+0x5fc>
			  ledMode = 2;
 800135a:	4a4a      	ldr	r2, [pc, #296]	; (8001484 <main+0x720>)
 800135c:	2102      	movs	r1, #2
 800135e:	e7f2      	b.n	8001346 <main+0x5e2>
		  else if(Rx_data[2] == '3')
 8001360:	2b33      	cmp	r3, #51	; 0x33
 8001362:	d000      	beq.n	8001366 <main+0x602>
 8001364:	e685      	b.n	8001072 <main+0x30e>
			  HAL_UART_Transmit(&huart1, (uint8_t *)ledStatus, sizeof(ledStatus), sizeof(ledStatus));
 8001366:	3b2f      	subs	r3, #47	; 0x2f
 8001368:	001a      	movs	r2, r3
 800136a:	a902      	add	r1, sp, #8
 800136c:	0038      	movs	r0, r7
 800136e:	f002 f9bf 	bl	80036f0 <HAL_UART_Transmit>
 8001372:	e67e      	b.n	8001072 <main+0x30e>
							  	  if (!(ledMode == 2))
 8001374:	2b02      	cmp	r3, #2
 8001376:	d100      	bne.n	800137a <main+0x616>
 8001378:	e729      	b.n	80011ce <main+0x46a>
							  		  ws28xx_fade(ws28xx_Color_Red);
 800137a:	2001      	movs	r0, #1
 800137c:	f000 faf4 	bl	8001968 <ws28xx_fade>
 8001380:	e724      	b.n	80011cc <main+0x468>
		  		    		  ws28xx_fade(ws28xx_Color_Red);
 8001382:	f000 faf1 	bl	8001968 <ws28xx_fade>
 8001386:	e72c      	b.n	80011e2 <main+0x47e>
	  		  	  else if (powerUP == 0)
 8001388:	2b00      	cmp	r3, #0
 800138a:	d000      	beq.n	800138e <main+0x62a>
 800138c:	e737      	b.n	80011fe <main+0x49a>
						if ((((irmp_temp_data.command == irmp_data.command) && (irmp_temp_data.address == irmp_data.address) && (irmp_temp_data.protocol == irmp_data.protocol) )||(( (button > 0)))))
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <main+0x728>)
 8001390:	7921      	ldrb	r1, [r4, #4]
 8001392:	791a      	ldrb	r2, [r3, #4]
 8001394:	78e5      	ldrb	r5, [r4, #3]
 8001396:	78d8      	ldrb	r0, [r3, #3]
 8001398:	0209      	lsls	r1, r1, #8
 800139a:	0212      	lsls	r2, r2, #8
 800139c:	4329      	orrs	r1, r5
 800139e:	4302      	orrs	r2, r0
 80013a0:	4291      	cmp	r1, r2
 80013a2:	d10d      	bne.n	80013c0 <main+0x65c>
 80013a4:	78a1      	ldrb	r1, [r4, #2]
 80013a6:	789a      	ldrb	r2, [r3, #2]
 80013a8:	7865      	ldrb	r5, [r4, #1]
 80013aa:	7858      	ldrb	r0, [r3, #1]
 80013ac:	0209      	lsls	r1, r1, #8
 80013ae:	0212      	lsls	r2, r2, #8
 80013b0:	4329      	orrs	r1, r5
 80013b2:	4302      	orrs	r2, r0
 80013b4:	4291      	cmp	r1, r2
 80013b6:	d103      	bne.n	80013c0 <main+0x65c>
 80013b8:	7822      	ldrb	r2, [r4, #0]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d004      	beq.n	80013ca <main+0x666>
 80013c0:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <main+0x710>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d100      	bne.n	80013ca <main+0x666>
 80013c8:	e719      	b.n	80011fe <main+0x49a>
							  memset(&irmp_temp_data, 0, sizeof(IRMP_DATA));
 80013ca:	2206      	movs	r2, #6
 80013cc:	2100      	movs	r1, #0
 80013ce:	482e      	ldr	r0, [pc, #184]	; (8001488 <main+0x724>)
 80013d0:	f002 fa87 	bl	80038e2 <memset>
	HAL_GPIO_WritePin(CTRL_VUSB_GPIO_Port, CTRL_VUSB_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2090      	movs	r0, #144	; 0x90
 80013d8:	0011      	movs	r1, r2
 80013da:	05c0      	lsls	r0, r0, #23
 80013dc:	f000 ffa0 	bl	8002320 <HAL_GPIO_WritePin>
			  		    	  if (ledMode == 2)
 80013e0:	4d28      	ldr	r5, [pc, #160]	; (8001484 <main+0x720>)
 80013e2:	6828      	ldr	r0, [r5, #0]
 80013e4:	2802      	cmp	r0, #2
 80013e6:	d104      	bne.n	80013f2 <main+0x68e>
			  		    		  WS2812_ChangeColor(ws28xx_Color_Green);
 80013e8:	f7ff fc36 	bl	8000c58 <WS2812_ChangeColor>
			  		    		  HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	; 0x64
 80013ee:	f000 fb4d 	bl	8001a8c <HAL_Delay>
							  WS2812_ChangeColor(ws28xx_Color_Black);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff fc30 	bl	8000c58 <WS2812_ChangeColor>
							  HAL_Delay(100);
 80013f8:	2064      	movs	r0, #100	; 0x64
 80013fa:	f000 fb47 	bl	8001a8c <HAL_Delay>
							  __HAL_TIM_CLEAR_IT(&htim16 ,TIM_IT_UPDATE);
 80013fe:	2202      	movs	r2, #2
 8001400:	6833      	ldr	r3, [r6, #0]
 8001402:	4252      	negs	r2, r2
 8001404:	611a      	str	r2, [r3, #16]
							  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8001406:	2200      	movs	r2, #0
							  HAL_TIM_Base_Start_IT(&htim16);
 8001408:	0030      	movs	r0, r6
							  __HAL_TIM_SET_COUNTER(&htim16, 0);
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
							  HAL_TIM_Base_Start_IT(&htim16);
 800140c:	f001 fcb6 	bl	8002d7c <HAL_TIM_Base_Start_IT>
							  timer = bootUpTime;
 8001410:	2305      	movs	r3, #5
 8001412:	4c16      	ldr	r4, [pc, #88]	; (800146c <main+0x708>)
											  timer = 0;
 8001414:	7023      	strb	r3, [r4, #0]
							  while(timer > 0)
 8001416:	7822      	ldrb	r2, [r4, #0]
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	2a00      	cmp	r2, #0
 800141c:	d110      	bne.n	8001440 <main+0x6dc>
								  WS2812_ChangeColor(ws28xx_Color_Green);
 800141e:	2002      	movs	r0, #2
							  if (ledMode == 0)
 8001420:	2b00      	cmp	r3, #0
 8001422:	d11f      	bne.n	8001464 <main+0x700>
								  WS2812_ChangeColor(ws28xx_Color_Green);
 8001424:	f7ff fc18 	bl	8000c58 <WS2812_ChangeColor>
							  HAL_Delay(50);
 8001428:	2032      	movs	r0, #50	; 0x32
 800142a:	f000 fb2f 	bl	8001a8c <HAL_Delay>
							  RGB_RPi();
 800142e:	f7ff fc05 	bl	8000c3c <RGB_RPi>
							  powerUP = 1;
 8001432:	2201      	movs	r2, #1
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <main+0x70c>)
 8001436:	701a      	strb	r2, [r3, #0]
							  button = 0;
 8001438:	2200      	movs	r2, #0
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <main+0x710>)
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e6de      	b.n	80011fe <main+0x49a>
									  if (!(ledMode == 2))
 8001440:	2b02      	cmp	r3, #2
 8001442:	d002      	beq.n	800144a <main+0x6e6>
										  	  ws28xx_fade(ws28xx_Color_Green);
 8001444:	2002      	movs	r0, #2
 8001446:	f000 fa8f 	bl	8001968 <ws28xx_fade>
									  if(!strcmp(Rx_data,"X05\r"))
 800144a:	4911      	ldr	r1, [pc, #68]	; (8001490 <main+0x72c>)
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <main+0x730>)
 800144e:	f7fe fe5b 	bl	8000108 <strcmp>
 8001452:	9000      	str	r0, [sp, #0]
 8001454:	2800      	cmp	r0, #0
 8001456:	d1de      	bne.n	8001416 <main+0x6b2>
										  	  strcpy(Rx_data, "    ");
 8001458:	490f      	ldr	r1, [pc, #60]	; (8001498 <main+0x734>)
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <main+0x730>)
 800145c:	f002 fa49 	bl	80038f2 <strcpy>
											  timer = 0;
 8001460:	9b00      	ldr	r3, [sp, #0]
 8001462:	e7d7      	b.n	8001414 <main+0x6b0>
								  ws28xx_fade(ws28xx_Color_Green);
 8001464:	f000 fa80 	bl	8001968 <ws28xx_fade>
 8001468:	e7de      	b.n	8001428 <main+0x6c4>
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	200000e4 	.word	0x200000e4
 8001470:	200000ed 	.word	0x200000ed
 8001474:	200000eb 	.word	0x200000eb
 8001478:	20000228 	.word	0x20000228
 800147c:	40010400 	.word	0x40010400
 8001480:	200000f6 	.word	0x200000f6
 8001484:	200000e0 	.word	0x200000e0
 8001488:	200000f0 	.word	0x200000f0
 800148c:	200000fc 	.word	0x200000fc
 8001490:	08003b89 	.word	0x08003b89
 8001494:	200000e5 	.word	0x200000e5
 8001498:	08003b81 	.word	0x08003b81

0800149c <setButtonPressed>:



void setButtonPressed()
{
	button = 1;
 800149c:	2201      	movs	r2, #1
 800149e:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <setButtonPressed+0x8>)
 80014a0:	701a      	strb	r2, [r3, #0]
}
 80014a2:	4770      	bx	lr
 80014a4:	200000eb 	.word	0x200000eb

080014a8 <setTimerReset>:

void setTimerReset()
{
 80014a8:	b510      	push	{r4, lr}
	if (timer <= 0)
 80014aa:	4c06      	ldr	r4, [pc, #24]	; (80014c4 <setTimerReset+0x1c>)
 80014ac:	7823      	ldrb	r3, [r4, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <setTimerReset+0x10>
	{
		HAL_TIM_Base_Stop_IT(&htim16);
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <setTimerReset+0x20>)
 80014b4:	f001 fc72 	bl	8002d9c <HAL_TIM_Base_Stop_IT>
	}

	timer--;
 80014b8:	7823      	ldrb	r3, [r4, #0]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	7023      	strb	r3, [r4, #0]
}
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	200000e4 	.word	0x200000e4
 80014c8:	200002a8 	.word	0x200002a8

080014cc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d0:	2001      	movs	r0, #1
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_MspInit+0x2c>)
{
 80014d4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	6999      	ldr	r1, [r3, #24]
 80014d8:	4301      	orrs	r1, r0
 80014da:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014dc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4002      	ands	r2, r0
 80014e4:	9200      	str	r2, [sp, #0]
 80014e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	69da      	ldr	r2, [r3, #28]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	61da      	str	r2, [r3, #28]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	400b      	ands	r3, r1
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	b002      	add	sp, #8
 80014f8:	4770      	bx	lr
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001500:	b510      	push	{r4, lr}
 8001502:	0004      	movs	r4, r0
 8001504:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	2214      	movs	r2, #20
 8001508:	2100      	movs	r1, #0
 800150a:	a803      	add	r0, sp, #12
 800150c:	f002 f9e9 	bl	80038e2 <memset>
  if(hadc->Instance==ADC1)
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_ADC_MspInit+0x54>)
 8001512:	6822      	ldr	r2, [r4, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d11a      	bne.n	800154e <HAL_ADC_MspInit+0x4e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001518:	2080      	movs	r0, #128	; 0x80
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_ADC_MspInit+0x58>)
 800151c:	0080      	lsls	r0, r0, #2
 800151e:	6999      	ldr	r1, [r3, #24]
 8001520:	4301      	orrs	r1, r0
 8001522:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001526:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_ADC1_CLK_ENABLE();
 800152a:	4002      	ands	r2, r0
 800152c:	9201      	str	r2, [sp, #4]
 800152e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	695a      	ldr	r2, [r3, #20]
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	430a      	orrs	r2, r1
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	400b      	ands	r3, r1
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8001540:	2302      	movs	r3, #2
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8001542:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8001544:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001546:	3301      	adds	r3, #1
 8001548:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 800154a:	f000 fe33 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800154e:	b008      	add	sp, #32
 8001550:	bd10      	pop	{r4, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	40012400 	.word	0x40012400
 8001558:	40021000 	.word	0x40021000
 800155c:	48000400 	.word	0x48000400

08001560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001560:	b530      	push	{r4, r5, lr}
 8001562:	0005      	movs	r5, r0
 8001564:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	2214      	movs	r2, #20
 8001568:	2100      	movs	r1, #0
 800156a:	a803      	add	r0, sp, #12
 800156c:	f002 f9b9 	bl	80038e2 <memset>
  if(hspi->Instance==SPI1)
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_SPI_MspInit+0x84>)
 8001572:	682a      	ldr	r2, [r5, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d133      	bne.n	80015e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001578:	2080      	movs	r0, #128	; 0x80
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_SPI_MspInit+0x88>)
 800157c:	0140      	lsls	r0, r0, #5
 800157e:	6999      	ldr	r1, [r3, #24]
 8001580:	4301      	orrs	r1, r0
 8001582:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001586:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158a:	4002      	ands	r2, r0
 800158c:	9201      	str	r2, [sp, #4]
 800158e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|RGB_MCU_OUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	430a      	orrs	r2, r1
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	400b      	ands	r3, r1
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|RGB_MCU_OUT_Pin;
 80015a2:	23a0      	movs	r3, #160	; 0xa0
 80015a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	3b9e      	subs	r3, #158	; 0x9e
 80015a8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ac:	3301      	adds	r3, #1
 80015ae:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f000 fe00 	bl	80021b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80015b4:	4c0d      	ldr	r4, [pc, #52]	; (80015ec <HAL_SPI_MspInit+0x8c>)
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_SPI_MspInit+0x90>)
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015b8:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80015ba:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015bc:	2310      	movs	r3, #16
 80015be:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015c2:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c4:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	60e2      	str	r2, [r4, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c8:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ca:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015cc:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ce:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015d0:	f000 fc00 	bl	8001dd4 <HAL_DMA_Init>
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d001      	beq.n	80015dc <HAL_SPI_MspInit+0x7c>
    {
      Error_Handler();
 80015d8:	f7ff ff78 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80015dc:	656c      	str	r4, [r5, #84]	; 0x54
 80015de:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015e0:	b009      	add	sp, #36	; 0x24
 80015e2:	bd30      	pop	{r4, r5, pc}
 80015e4:	40013000 	.word	0x40013000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	200002e8 	.word	0x200002e8
 80015f0:	40020030 	.word	0x40020030

080015f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM1)
 80015f6:	6803      	ldr	r3, [r0, #0]
 80015f8:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_TIM_Base_MspInit+0x78>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d112      	bne.n	8001624 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fe:	2080      	movs	r0, #128	; 0x80
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <HAL_TIM_Base_MspInit+0x7c>)
 8001602:	0100      	lsls	r0, r0, #4
 8001604:	6991      	ldr	r1, [r2, #24]
 8001606:	4301      	orrs	r1, r0
 8001608:	6191      	str	r1, [r2, #24]
 800160a:	6993      	ldr	r3, [r2, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160e:	4003      	ands	r3, r0
 8001610:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001612:	200d      	movs	r0, #13
 8001614:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001616:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001618:	f000 fb6e 	bl	8001cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800161c:	200d      	movs	r0, #13
  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800161e:	f000 fb95 	bl	8001d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001622:	e00c      	b.n	800163e <HAL_TIM_Base_MspInit+0x4a>
  else if(htim_base->Instance==TIM14)
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <HAL_TIM_Base_MspInit+0x80>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d10b      	bne.n	8001642 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800162a:	2080      	movs	r0, #128	; 0x80
 800162c:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_TIM_Base_MspInit+0x7c>)
 800162e:	0040      	lsls	r0, r0, #1
 8001630:	69d1      	ldr	r1, [r2, #28]
 8001632:	4301      	orrs	r1, r0
 8001634:	61d1      	str	r1, [r2, #28]
 8001636:	69d3      	ldr	r3, [r2, #28]
 8001638:	4003      	ands	r3, r0
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	9b02      	ldr	r3, [sp, #8]
}
 800163e:	b005      	add	sp, #20
 8001640:	bd00      	pop	{pc}
  else if(htim_base->Instance==TIM16)
 8001642:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_TIM_Base_MspInit+0x84>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d1fa      	bne.n	800163e <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001648:	2080      	movs	r0, #128	; 0x80
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_TIM_Base_MspInit+0x7c>)
 800164c:	0280      	lsls	r0, r0, #10
 800164e:	6991      	ldr	r1, [r2, #24]
 8001650:	4301      	orrs	r1, r0
 8001652:	6191      	str	r1, [r2, #24]
 8001654:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001658:	4003      	ands	r3, r0
 800165a:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800165c:	2015      	movs	r0, #21
 800165e:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001660:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001662:	f000 fb49 	bl	8001cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001666:	2015      	movs	r0, #21
 8001668:	e7d9      	b.n	800161e <HAL_TIM_Base_MspInit+0x2a>
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40012c00 	.word	0x40012c00
 8001670:	40021000 	.word	0x40021000
 8001674:	40002000 	.word	0x40002000
 8001678:	40014400 	.word	0x40014400

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b510      	push	{r4, lr}
 800167e:	0004      	movs	r4, r0
 8001680:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	2214      	movs	r2, #20
 8001684:	2100      	movs	r1, #0
 8001686:	a803      	add	r0, sp, #12
 8001688:	f002 f92b 	bl	80038e2 <memset>
  if(huart->Instance==USART1)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_UART_MspInit+0x60>)
 800168e:	6822      	ldr	r2, [r4, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d120      	bne.n	80016d6 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001694:	2080      	movs	r0, #128	; 0x80
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_UART_MspInit+0x64>)
 8001698:	01c0      	lsls	r0, r0, #7
 800169a:	6999      	ldr	r1, [r3, #24]
 800169c:	4301      	orrs	r1, r0
 800169e:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a6:	4002      	ands	r2, r0
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	430a      	orrs	r2, r1
 80016b2:	615a      	str	r2, [r3, #20]
 80016b4:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	400b      	ands	r3, r1
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	3301      	adds	r3, #1
 80016ca:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80016ce:	3b02      	subs	r3, #2
 80016d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f000 fd6f 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016d6:	b008      	add	sp, #32
 80016d8:	bd10      	pop	{r4, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40021000 	.word	0x40021000

080016e4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016e4:	4770      	bx	lr

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler>

080016e8 <SVC_Handler>:
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ee:	f000 f9bb 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f2:	bd10      	pop	{r4, pc}

080016f4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80016f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80016f6:	2002      	movs	r0, #2
 80016f8:	f000 fe1a 	bl	8002330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  setButtonPressed();
 80016fc:	f7ff fece 	bl	800149c <setButtonPressed>
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001700:	bd10      	pop	{r4, pc}
	...

08001704 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001704:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001706:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Channel2_3_IRQHandler+0xc>)
 8001708:	f000 fbf5 	bl	8001ef6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800170c:	bd10      	pop	{r4, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	200002e8 	.word	0x200002e8

08001714 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001714:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001716:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8001718:	f001 fb5b 	bl	8002dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800171c:	bd10      	pop	{r4, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	20000184 	.word	0x20000184

08001724 <TIM1_CC_IRQHandler>:
 8001724:	b510      	push	{r4, lr}
 8001726:	f7ff fff5 	bl	8001714 <TIM1_BRK_UP_TRG_COM_IRQHandler>
 800172a:	bd10      	pop	{r4, pc}

0800172c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800172c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */
		irmp_ISR();
 800172e:	f7fe fe75 	bl	800041c <irmp_ISR>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001732:	4802      	ldr	r0, [pc, #8]	; (800173c <TIM14_IRQHandler+0x10>)
 8001734:	f001 fb4d 	bl	8002dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001738:	bd10      	pop	{r4, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	20000228 	.word	0x20000228

08001740 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001740:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001742:	4803      	ldr	r0, [pc, #12]	; (8001750 <TIM16_IRQHandler+0x10>)
 8001744:	f001 fb45 	bl	8002dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  setTimerReset();
 8001748:	f7ff feae 	bl	80014a8 <setTimerReset>
  /* USER CODE END TIM16_IRQn 1 */
}
 800174c:	bd10      	pop	{r4, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	200002a8 	.word	0x200002a8

08001754 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001754:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001756:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <USART1_IRQHandler+0x2c>)
 8001758:	0020      	movs	r0, r4
 800175a:	f001 fdd7 	bl	800330c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */


  Rx_data[RxCounter] = RxBuffer;
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <USART1_IRQHandler+0x30>)
 8001760:	4909      	ldr	r1, [pc, #36]	; (8001788 <USART1_IRQHandler+0x34>)
 8001762:	7813      	ldrb	r3, [r2, #0]
 8001764:	7808      	ldrb	r0, [r1, #0]
 8001766:	4d09      	ldr	r5, [pc, #36]	; (800178c <USART1_IRQHandler+0x38>)
 8001768:	54e8      	strb	r0, [r5, r3]
  RxCounter++;
 800176a:	3301      	adds	r3, #1
  if (RxBuffer == '\r')
 800176c:	280d      	cmp	r0, #13
 800176e:	d100      	bne.n	8001772 <USART1_IRQHandler+0x1e>
  {
	  RxCounter = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	7013      	strb	r3, [r2, #0]
  }
  HAL_UART_Receive_IT(&huart1, &RxBuffer, 1);
 8001774:	0020      	movs	r0, r4
 8001776:	2201      	movs	r2, #1
 8001778:	f001 fd0c 	bl	8003194 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 800177c:	bd70      	pop	{r4, r5, r6, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	20000104 	.word	0x20000104
 8001784:	200000ea 	.word	0x200000ea
 8001788:	200000ec 	.word	0x200000ec
 800178c:	200000e5 	.word	0x200000e5

08001790 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001790:	4770      	bx	lr
	...

08001794 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001796:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800179a:	490e      	ldr	r1, [pc, #56]	; (80017d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <LoopForever+0xe>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b0:	4c0b      	ldr	r4, [pc, #44]	; (80017e0 <LoopForever+0x16>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017be:	f7ff ffe7 	bl	8001790 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80017c2:	f002 f861 	bl	8003888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c6:	f7ff facd 	bl	8000d64 <main>

080017ca <LoopForever>:

LoopForever:
    b LoopForever
 80017ca:	e7fe      	b.n	80017ca <LoopForever>
  ldr   r0, =_estack
 80017cc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80017d8:	08003bd0 	.word	0x08003bd0
  ldr r2, =_sbss
 80017dc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80017e0:	20000480 	.word	0x20000480

080017e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC1_IRQHandler>
	...

080017e8 <ws28xx_fill_a_bit>:

ws28xx_Data_TypeDef	ws28xxLEDs[WS28XX_MAX_PIXEL];

///////////////////////////////////////////////////////////////////////////////////////////////////////
void	ws28xx_fill_a_bit(uint16_t bit_number,uint8_t bit_value,uint16_t buffer_nember)
{
 80017e8:	b530      	push	{r4, r5, lr}
 80017ea:	2507      	movs	r5, #7
 80017ec:	08c4      	lsrs	r4, r0, #3
 80017ee:	4385      	bics	r5, r0
 80017f0:	2001      	movs	r0, #1
 80017f2:	2348      	movs	r3, #72	; 0x48
 80017f4:	40a8      	lsls	r0, r5
 80017f6:	435a      	muls	r2, r3
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <ws28xx_fill_a_bit+0x28>)
 80017fa:	b240      	sxtb	r0, r0
 80017fc:	189a      	adds	r2, r3, r2
 80017fe:	5713      	ldrsb	r3, [r2, r4]
	uint8_t		idx_bit = 0;
	uint16_t idx_buffer = 0;
	idx_buffer =  bit_number/8;
	idx_bit =	7-(bit_number % 8);
	if(bit_value == 0)
 8001800:	2900      	cmp	r1, #0
 8001802:	d102      	bne.n	800180a <ws28xx_fill_a_bit+0x22>
		ws28xx_temp[buffer_nember][idx_buffer] = 	ws28xx_temp[buffer_nember][idx_buffer] & (~(0x01<<idx_bit)) ;
 8001804:	4383      	bics	r3, r0
	else	
		ws28xx_temp[buffer_nember][idx_buffer] = 	ws28xx_temp[buffer_nember][idx_buffer] | (0x01<<idx_bit) ;
 8001806:	5513      	strb	r3, [r2, r4]
}
 8001808:	bd30      	pop	{r4, r5, pc}
		ws28xx_temp[buffer_nember][idx_buffer] = 	ws28xx_temp[buffer_nember][idx_buffer] | (0x01<<idx_bit) ;
 800180a:	4303      	orrs	r3, r0
 800180c:	e7fb      	b.n	8001806 <ws28xx_fill_a_bit+0x1e>
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	20000338 	.word	0x20000338

08001814 <ws28xx_set_buffer>:
///////////////////////////////////////////////////////////////////////////////////////////////////////
void	ws28xx_set_buffer(uint8_t RGB_bit_number_0_23,uint8_t bit_Value_0_1,uint16_t buffer_nember)
{
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t fill_bit=RGB_bit_number_0_23*24;
 8001816:	2518      	movs	r5, #24
{
 8001818:	0016      	movs	r6, r2
	uint16_t fill_bit=RGB_bit_number_0_23*24;
 800181a:	4345      	muls	r5, r0
	if(bit_Value_0_1 == 0)
 800181c:	2900      	cmp	r1, #0
 800181e:	d115      	bne.n	800184c <ws28xx_set_buffer+0x38>
 8001820:	002c      	movs	r4, r5
 8001822:	1cef      	adds	r7, r5, #3
	{
		for(uint8_t i=0; i<3 ; i++)
			ws28xx_fill_a_bit(fill_bit+i,1,buffer_nember);
 8001824:	0020      	movs	r0, r4
 8001826:	3401      	adds	r4, #1
 8001828:	0032      	movs	r2, r6
 800182a:	2101      	movs	r1, #1
 800182c:	b2a4      	uxth	r4, r4
 800182e:	f7ff ffdb 	bl	80017e8 <ws28xx_fill_a_bit>
		for(uint8_t i=0; i<3 ; i++)
 8001832:	42a7      	cmp	r7, r4
 8001834:	d1f6      	bne.n	8001824 <ws28xx_set_buffer+0x10>
 8001836:	3518      	adds	r5, #24
		for(uint8_t i=3; i<24 ; i++)
			ws28xx_fill_a_bit(fill_bit+i,0,buffer_nember);
 8001838:	0020      	movs	r0, r4
 800183a:	3401      	adds	r4, #1
 800183c:	0032      	movs	r2, r6
 800183e:	2100      	movs	r1, #0
 8001840:	b2a4      	uxth	r4, r4
 8001842:	f7ff ffd1 	bl	80017e8 <ws28xx_fill_a_bit>
		for(uint8_t i=3; i<24 ; i++)
 8001846:	42a5      	cmp	r5, r4
 8001848:	d1f6      	bne.n	8001838 <ws28xx_set_buffer+0x24>
		for(uint8_t i=0; i<7 ; i++)
			ws28xx_fill_a_bit(fill_bit+i,1,buffer_nember);
		for(uint8_t i=7; i<24 ; i++)
			ws28xx_fill_a_bit(fill_bit+i,0,buffer_nember);
	}
}
 800184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(bit_Value_0_1 == 0)
 800184c:	002c      	movs	r4, r5
 800184e:	1def      	adds	r7, r5, #7
			ws28xx_fill_a_bit(fill_bit+i,1,buffer_nember);
 8001850:	0020      	movs	r0, r4
 8001852:	3401      	adds	r4, #1
 8001854:	0032      	movs	r2, r6
 8001856:	2101      	movs	r1, #1
 8001858:	b2a4      	uxth	r4, r4
 800185a:	f7ff ffc5 	bl	80017e8 <ws28xx_fill_a_bit>
		for(uint8_t i=0; i<7 ; i++)
 800185e:	42bc      	cmp	r4, r7
 8001860:	d1f6      	bne.n	8001850 <ws28xx_set_buffer+0x3c>
 8001862:	3518      	adds	r5, #24
			ws28xx_fill_a_bit(fill_bit+i,0,buffer_nember);
 8001864:	0020      	movs	r0, r4
 8001866:	3401      	adds	r4, #1
 8001868:	0032      	movs	r2, r6
 800186a:	2100      	movs	r1, #0
 800186c:	b2a4      	uxth	r4, r4
 800186e:	f7ff ffbb 	bl	80017e8 <ws28xx_fill_a_bit>
		for(uint8_t i=7; i<24 ; i++)
 8001872:	42a5      	cmp	r5, r4
 8001874:	d1f6      	bne.n	8001864 <ws28xx_set_buffer+0x50>
 8001876:	e7e8      	b.n	800184a <ws28xx_set_buffer+0x36>

08001878 <ws28xx_Put_Pixels>:
/////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
void	ws28xx_Put_Pixels(ws28xx_Data_TypeDef	*LED_Pixel,uint8_t len)
{
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	for(uint8_t x=0 ; x<len ;x++)
 800187a:	2400      	movs	r4, #0
{
 800187c:	b085      	sub	sp, #20
 800187e:	9003      	str	r0, [sp, #12]
 8001880:	9102      	str	r1, [sp, #8]
	for(uint8_t x=0 ; x<len ;x++)
 8001882:	9b02      	ldr	r3, [sp, #8]
 8001884:	42a3      	cmp	r3, r4
 8001886:	d107      	bne.n	8001898 <ws28xx_Put_Pixels+0x20>
			ws28xx_set_buffer( i+16 ,(LED_Pixel[x].B & (0x80>>i)) ,x);
		}

	}
	
	HAL_SPI_Transmit_DMA(WS28XX_SPI,&ws28xx_temp[0][0],(72)*len);
 8001888:	2248      	movs	r2, #72	; 0x48
 800188a:	4917      	ldr	r1, [pc, #92]	; (80018e8 <ws28xx_Put_Pixels+0x70>)
 800188c:	435a      	muls	r2, r3
 800188e:	4817      	ldr	r0, [pc, #92]	; (80018ec <ws28xx_Put_Pixels+0x74>)
 8001890:	f001 f986 	bl	8002ba0 <HAL_SPI_Transmit_DMA>
	
}
 8001894:	b005      	add	sp, #20
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001898:	2303      	movs	r3, #3
	for(uint8_t x=0 ; x<len ;x++)
 800189a:	2500      	movs	r5, #0
 800189c:	4363      	muls	r3, r4
 800189e:	9a03      	ldr	r2, [sp, #12]
 80018a0:	18d3      	adds	r3, r2, r3
 80018a2:	9301      	str	r3, [sp, #4]
			ws28xx_set_buffer( i+0 ,(LED_Pixel[x].G & (0x80>>i)) ,x);
 80018a4:	2780      	movs	r7, #128	; 0x80
 80018a6:	412f      	asrs	r7, r5
 80018a8:	9b01      	ldr	r3, [sp, #4]
 80018aa:	b27f      	sxtb	r7, r7
 80018ac:	7859      	ldrb	r1, [r3, #1]
 80018ae:	b2a6      	uxth	r6, r4
 80018b0:	b2e8      	uxtb	r0, r5
 80018b2:	4039      	ands	r1, r7
 80018b4:	0032      	movs	r2, r6
 80018b6:	f7ff ffad 	bl	8001814 <ws28xx_set_buffer>
			ws28xx_set_buffer( i+8 ,(LED_Pixel[x].R & (0x80>>i)) ,x );
 80018ba:	9b01      	ldr	r3, [sp, #4]
 80018bc:	b2e8      	uxtb	r0, r5
 80018be:	7819      	ldrb	r1, [r3, #0]
 80018c0:	3008      	adds	r0, #8
 80018c2:	4039      	ands	r1, r7
 80018c4:	b2c0      	uxtb	r0, r0
 80018c6:	0032      	movs	r2, r6
 80018c8:	f7ff ffa4 	bl	8001814 <ws28xx_set_buffer>
			ws28xx_set_buffer( i+16 ,(LED_Pixel[x].B & (0x80>>i)) ,x);
 80018cc:	9b01      	ldr	r3, [sp, #4]
 80018ce:	b2e8      	uxtb	r0, r5
 80018d0:	7899      	ldrb	r1, [r3, #2]
 80018d2:	3010      	adds	r0, #16
 80018d4:	4039      	ands	r1, r7
 80018d6:	b2c0      	uxtb	r0, r0
 80018d8:	0032      	movs	r2, r6
 80018da:	3501      	adds	r5, #1
 80018dc:	f7ff ff9a 	bl	8001814 <ws28xx_set_buffer>
		for(int8_t i=0; i<8 ; i++){
 80018e0:	2d08      	cmp	r5, #8
 80018e2:	d1df      	bne.n	80018a4 <ws28xx_Put_Pixels+0x2c>
 80018e4:	3401      	adds	r4, #1
 80018e6:	e7cc      	b.n	8001882 <ws28xx_Put_Pixels+0xa>
 80018e8:	20000338 	.word	0x20000338
 80018ec:	200001c4 	.word	0x200001c4

080018f0 <ws28xx_Update>:
/////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
void	ws28xx_Update(void)
{
 80018f0:	b510      	push	{r4, lr}
	
	ws28xx_Put_Pixels(ws28xxLEDs,WS28XX_MAX_PIXEL);	
 80018f2:	2104      	movs	r1, #4
 80018f4:	4801      	ldr	r0, [pc, #4]	; (80018fc <ws28xx_Update+0xc>)
 80018f6:	f7ff ffbf 	bl	8001878 <ws28xx_Put_Pixels>
	
}
 80018fa:	bd10      	pop	{r4, pc}
 80018fc:	2000032c 	.word	0x2000032c

08001900 <ws28xx_SetColor>:

/////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
void	ws28xx_SetColor(uint16_t Pixel,ws28xx_Color_TypeDef Color)
{
 8001900:	b510      	push	{r4, lr}
 8001902:	0004      	movs	r4, r0
	if(Pixel >= WS28XX_MAX_PIXEL )
 8001904:	2803      	cmp	r0, #3
 8001906:	d80f      	bhi.n	8001928 <ws28xx_SetColor+0x28>
		return;	

	switch(Color)
 8001908:	2905      	cmp	r1, #5
 800190a:	d80d      	bhi.n	8001928 <ws28xx_SetColor+0x28>
 800190c:	2303      	movs	r3, #3
 800190e:	0008      	movs	r0, r1
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <ws28xx_SetColor+0x64>)
				ws28xxLEDs[Pixel].G = 0;
				ws28xxLEDs[Pixel].B = 0;
			break;
			//---------------------
			case ws28xx_Color_White:
				ws28xxLEDs[Pixel].R = 255;
 8001912:	4363      	muls	r3, r4
	switch(Color)
 8001914:	f7fe fc02 	bl	800011c <__gnu_thumb1_case_uqi>
 8001918:	18120b03 	.word	0x18120b03
 800191c:	091e      	.short	0x091e
				ws28xxLEDs[Pixel].R = 0;
 800191e:	2100      	movs	r1, #0
				ws28xxLEDs[Pixel].R = 255;
 8001920:	54d1      	strb	r1, [r2, r3]
				ws28xxLEDs[Pixel].G = 255;
 8001922:	18d3      	adds	r3, r2, r3
 8001924:	7059      	strb	r1, [r3, #1]
			break;
			//---------------------
			case ws28xx_Color_Green:
				ws28xxLEDs[Pixel].R = 0;
				ws28xxLEDs[Pixel].G = 128;
				ws28xxLEDs[Pixel].B = 0;
 8001926:	7099      	strb	r1, [r3, #2]
				ws28xxLEDs[Pixel].G = 165;
				ws28xxLEDs[Pixel].B = 0;
			break;
		}
	
}
 8001928:	bd10      	pop	{r4, pc}
				ws28xxLEDs[Pixel].R = 255;
 800192a:	21ff      	movs	r1, #255	; 0xff
 800192c:	e7f8      	b.n	8001920 <ws28xx_SetColor+0x20>
				ws28xxLEDs[Pixel].R = 80;
 800192e:	2150      	movs	r1, #80	; 0x50
 8001930:	54d1      	strb	r1, [r2, r3]
				ws28xxLEDs[Pixel].G = 0;
 8001932:	18d3      	adds	r3, r2, r3
 8001934:	2200      	movs	r2, #0
 8001936:	705a      	strb	r2, [r3, #1]
				ws28xxLEDs[Pixel].B = 0;
 8001938:	709a      	strb	r2, [r3, #2]
			break;
 800193a:	e7f5      	b.n	8001928 <ws28xx_SetColor+0x28>
				ws28xxLEDs[Pixel].R = 0;
 800193c:	2100      	movs	r1, #0
 800193e:	54d1      	strb	r1, [r2, r3]
				ws28xxLEDs[Pixel].G = 128;
 8001940:	18d3      	adds	r3, r2, r3
 8001942:	2280      	movs	r2, #128	; 0x80
 8001944:	705a      	strb	r2, [r3, #1]
 8001946:	e7ee      	b.n	8001926 <ws28xx_SetColor+0x26>
				ws28xxLEDs[Pixel].R = 0;
 8001948:	2100      	movs	r1, #0
 800194a:	54d1      	strb	r1, [r2, r3]
				ws28xxLEDs[Pixel].G = 0;
 800194c:	18d3      	adds	r3, r2, r3
 800194e:	7059      	strb	r1, [r3, #1]
				ws28xxLEDs[Pixel].B = 255;
 8001950:	22ff      	movs	r2, #255	; 0xff
 8001952:	e7f1      	b.n	8001938 <ws28xx_SetColor+0x38>
				ws28xxLEDs[Pixel].R = 255;
 8001954:	21ff      	movs	r1, #255	; 0xff
 8001956:	54d1      	strb	r1, [r2, r3]
				ws28xxLEDs[Pixel].G = 165;
 8001958:	18d3      	adds	r3, r2, r3
 800195a:	22a5      	movs	r2, #165	; 0xa5
 800195c:	705a      	strb	r2, [r3, #1]
				ws28xxLEDs[Pixel].B = 0;
 800195e:	2200      	movs	r2, #0
 8001960:	e7ea      	b.n	8001938 <ws28xx_SetColor+0x38>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	2000032c 	.word	0x2000032c

08001968 <ws28xx_fade>:
/////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

void	ws28xx_fade(ws28xx_Color_TypeDef Color)
{
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196a:	0006      	movs	r6, r0
	for(uint8_t i=0 ; i<=128 ; i++)
 800196c:	2500      	movs	r5, #0
 800196e:	2703      	movs	r7, #3
{
 8001970:	2300      	movs	r3, #0
				ws28xxLEDs[j].G = i;
			}
			else if (Color == ws28xx_Color_Red)
			{
				ws28xxLEDs[j].R = i;
				ws28xxLEDs[j].G = 0;
 8001972:	0019      	movs	r1, r3
 8001974:	4c21      	ldr	r4, [pc, #132]	; (80019fc <ws28xx_fade+0x94>)
			if (Color == ws28xx_Color_Green)
 8001976:	2e02      	cmp	r6, #2
 8001978:	d130      	bne.n	80019dc <ws28xx_fade+0x74>
				ws28xxLEDs[j].R = 0;
 800197a:	003a      	movs	r2, r7
 800197c:	435a      	muls	r2, r3
 800197e:	54a1      	strb	r1, [r4, r2]
				ws28xxLEDs[j].G = i;
 8001980:	18a2      	adds	r2, r4, r2
 8001982:	7055      	strb	r5, [r2, #1]
			}

			ws28xxLEDs[j].B = 0;
 8001984:	003a      	movs	r2, r7
 8001986:	435a      	muls	r2, r3
 8001988:	3301      	adds	r3, #1
 800198a:	18a2      	adds	r2, r4, r2
 800198c:	7091      	strb	r1, [r2, #2]
		for(uint8_t j=0; j<4; j++)
 800198e:	2b04      	cmp	r3, #4
 8001990:	d1f1      	bne.n	8001976 <ws28xx_fade+0xe>
	for(uint8_t i=0 ; i<=128 ; i++)
 8001992:	3501      	adds	r5, #1
		}
		ws28xx_Update();
 8001994:	f7ff ffac 	bl	80018f0 <ws28xx_Update>
	for(uint8_t i=0 ; i<=128 ; i++)
 8001998:	b2ed      	uxtb	r5, r5
		HAL_Delay(5);
 800199a:	2005      	movs	r0, #5
 800199c:	f000 f876 	bl	8001a8c <HAL_Delay>
	for(uint8_t i=0 ; i<=128 ; i++)
 80019a0:	2d81      	cmp	r5, #129	; 0x81
 80019a2:	d1e5      	bne.n	8001970 <ws28xx_fade+0x8>
 80019a4:	2580      	movs	r5, #128	; 0x80
 80019a6:	2703      	movs	r7, #3
 80019a8:	2300      	movs	r3, #0
				ws28xxLEDs[j].G = i;
			}
			else if (Color == ws28xx_Color_Red)
			{
				ws28xxLEDs[j].R = i;
				ws28xxLEDs[j].G = 0;
 80019aa:	0019      	movs	r1, r3
			if (Color == ws28xx_Color_Green)
 80019ac:	2e02      	cmp	r6, #2
 80019ae:	d11d      	bne.n	80019ec <ws28xx_fade+0x84>
				ws28xxLEDs[j].R = 0;
 80019b0:	003a      	movs	r2, r7
 80019b2:	435a      	muls	r2, r3
 80019b4:	54a1      	strb	r1, [r4, r2]
				ws28xxLEDs[j].G = i;
 80019b6:	18a2      	adds	r2, r4, r2
 80019b8:	7055      	strb	r5, [r2, #1]
			}

			ws28xxLEDs[j].B = 0;
 80019ba:	003a      	movs	r2, r7
 80019bc:	435a      	muls	r2, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	18a2      	adds	r2, r4, r2
 80019c2:	7091      	strb	r1, [r2, #2]
		for(uint8_t j=0; j<4; j++)
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d1f1      	bne.n	80019ac <ws28xx_fade+0x44>
 80019c8:	3d01      	subs	r5, #1
		}
		ws28xx_Update();
 80019ca:	f7ff ff91 	bl	80018f0 <ws28xx_Update>
 80019ce:	b2ed      	uxtb	r5, r5
		HAL_Delay(5);
 80019d0:	2005      	movs	r0, #5
 80019d2:	f000 f85b 	bl	8001a8c <HAL_Delay>
	for(uint8_t i=128 ; i>0 ; i--)
 80019d6:	2d00      	cmp	r5, #0
 80019d8:	d1e6      	bne.n	80019a8 <ws28xx_fade+0x40>
	}
}
 80019da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if (Color == ws28xx_Color_Red)
 80019dc:	2e01      	cmp	r6, #1
 80019de:	d1d1      	bne.n	8001984 <ws28xx_fade+0x1c>
				ws28xxLEDs[j].R = i;
 80019e0:	003a      	movs	r2, r7
 80019e2:	435a      	muls	r2, r3
 80019e4:	54a5      	strb	r5, [r4, r2]
				ws28xxLEDs[j].G = 0;
 80019e6:	18a2      	adds	r2, r4, r2
 80019e8:	7051      	strb	r1, [r2, #1]
 80019ea:	e7cb      	b.n	8001984 <ws28xx_fade+0x1c>
			else if (Color == ws28xx_Color_Red)
 80019ec:	2e01      	cmp	r6, #1
 80019ee:	d1e4      	bne.n	80019ba <ws28xx_fade+0x52>
				ws28xxLEDs[j].R = i;
 80019f0:	003a      	movs	r2, r7
 80019f2:	435a      	muls	r2, r3
 80019f4:	54a5      	strb	r5, [r4, r2]
				ws28xxLEDs[j].G = 0;
 80019f6:	18a2      	adds	r2, r4, r2
 80019f8:	7051      	strb	r1, [r2, #1]
 80019fa:	e7de      	b.n	80019ba <ws28xx_fade+0x52>
 80019fc:	2000032c 	.word	0x2000032c

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b570      	push	{r4, r5, r6, lr}
 8001a02:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	20fa      	movs	r0, #250	; 0xfa
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_InitTick+0x3c>)
 8001a08:	0080      	lsls	r0, r0, #2
 8001a0a:	7819      	ldrb	r1, [r3, #0]
 8001a0c:	f7fe fb90 	bl	8000130 <__udivsi3>
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_InitTick+0x40>)
 8001a12:	0001      	movs	r1, r0
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	f7fe fb8b 	bl	8000130 <__udivsi3>
 8001a1a:	f000 f9b3 	bl	8001d84 <HAL_SYSTICK_Config>
 8001a1e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a22:	2c00      	cmp	r4, #0
 8001a24:	d109      	bne.n	8001a3a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	2d03      	cmp	r5, #3
 8001a28:	d807      	bhi.n	8001a3a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2a:	3802      	subs	r0, #2
 8001a2c:	0022      	movs	r2, r4
 8001a2e:	0029      	movs	r1, r5
 8001a30:	f000 f962 	bl	8001cf8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a34:	0020      	movs	r0, r4
 8001a36:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_InitTick+0x44>)
 8001a38:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}
 8001a3c:	20000010 	.word	0x20000010
 8001a40:	2000000c 	.word	0x2000000c
 8001a44:	20000014 	.word	0x20000014

08001a48 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	2310      	movs	r3, #16
 8001a4a:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_Init+0x1c>)
{
 8001a4c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a50:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a52:	430b      	orrs	r3, r1
 8001a54:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	f7ff ffd3 	bl	8001a00 <HAL_InitTick>
  HAL_MspInit();
 8001a5a:	f7ff fd39 	bl	80014d0 <HAL_MspInit>
}
 8001a5e:	2000      	movs	r0, #0
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	40022000 	.word	0x40022000

08001a68 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_IncTick+0x10>)
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <HAL_IncTick+0x14>)
 8001a6c:	6811      	ldr	r1, [r2, #0]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	185b      	adds	r3, r3, r1
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	4770      	bx	lr
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	20000458 	.word	0x20000458
 8001a7c:	20000010 	.word	0x20000010

08001a80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a80:	4b01      	ldr	r3, [pc, #4]	; (8001a88 <HAL_GetTick+0x8>)
 8001a82:	6818      	ldr	r0, [r3, #0]
}
 8001a84:	4770      	bx	lr
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	20000458 	.word	0x20000458

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff fff6 	bl	8001a80 <HAL_GetTick>
 8001a94:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	1c63      	adds	r3, r4, #1
 8001a98:	d002      	beq.n	8001aa0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_Delay+0x20>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	1b40      	subs	r0, r0, r5
 8001aa6:	42a0      	cmp	r0, r4
 8001aa8:	d3fa      	bcc.n	8001aa0 <HAL_Delay+0x14>
  {
  }
}
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
 8001aac:	20000010 	.word	0x20000010

08001ab0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8001ab4:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	d07e      	beq.n	8001bb8 <HAL_ADC_Init+0x108>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac0:	0022      	movs	r2, r4
 8001ac2:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac4:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac6:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001ac8:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001aca:	f7ff fd19 	bl	8001500 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ad0:	06db      	lsls	r3, r3, #27
 8001ad2:	d500      	bpl.n	8001ad6 <HAL_ADC_Init+0x26>
 8001ad4:	e085      	b.n	8001be2 <HAL_ADC_Init+0x132>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	6898      	ldr	r0, [r3, #8]
 8001adc:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001ade:	d000      	beq.n	8001ae2 <HAL_ADC_Init+0x32>
 8001ae0:	e07f      	b.n	8001be2 <HAL_ADC_Init+0x132>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ae4:	4942      	ldr	r1, [pc, #264]	; (8001bf0 <HAL_ADC_Init+0x140>)
 8001ae6:	4011      	ands	r1, r2
 8001ae8:	2202      	movs	r2, #2
 8001aea:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001aec:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001aee:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	400a      	ands	r2, r1
 8001af4:	2a01      	cmp	r2, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_Init+0x54>
 8001af8:	6819      	ldr	r1, [r3, #0]
 8001afa:	4211      	tst	r1, r2
 8001afc:	d10e      	bne.n	8001b1c <HAL_ADC_Init+0x6c>
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	0412      	lsls	r2, r2, #16
 8001b02:	d40b      	bmi.n	8001b1c <HAL_ADC_Init+0x6c>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b04:	2118      	movs	r1, #24
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	438a      	bics	r2, r1
 8001b0a:	68a1      	ldr	r1, [r4, #8]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001b10:	6919      	ldr	r1, [r3, #16]
 8001b12:	6862      	ldr	r2, [r4, #4]
 8001b14:	0089      	lsls	r1, r1, #2
 8001b16:	0889      	lsrs	r1, r1, #2
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <HAL_ADC_Init+0x144>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b24:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b26:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b28:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b2a:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b2c:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b30:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b32:	3a01      	subs	r2, #1
 8001b34:	1e56      	subs	r6, r2, #1
 8001b36:	41b2      	sbcs	r2, r6
 8001b38:	0316      	lsls	r6, r2, #12
 8001b3a:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b3c:	034f      	lsls	r7, r1, #13
 8001b3e:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b40:	6922      	ldr	r2, [r4, #16]
 8001b42:	432f      	orrs	r7, r5
 8001b44:	2a02      	cmp	r2, #2
 8001b46:	d100      	bne.n	8001b4a <HAL_ADC_Init+0x9a>
 8001b48:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001b4a:	1d62      	adds	r2, r4, #5
 8001b4c:	7fd2      	ldrb	r2, [r2, #31]
 8001b4e:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b50:	433a      	orrs	r2, r7
 8001b52:	4332      	orrs	r2, r6
 8001b54:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b56:	7ee0      	ldrb	r0, [r4, #27]
 8001b58:	2801      	cmp	r0, #1
 8001b5a:	d104      	bne.n	8001b66 <HAL_ADC_Init+0xb6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b5c:	2900      	cmp	r1, #0
 8001b5e:	d12c      	bne.n	8001bba <HAL_ADC_Init+0x10a>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0249      	lsls	r1, r1, #9
 8001b64:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b66:	20c2      	movs	r0, #194	; 0xc2
 8001b68:	69e1      	ldr	r1, [r4, #28]
 8001b6a:	30ff      	adds	r0, #255	; 0xff
 8001b6c:	4281      	cmp	r1, r0
 8001b6e:	d002      	beq.n	8001b76 <HAL_ADC_Init+0xc6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b70:	6a20      	ldr	r0, [r4, #32]
 8001b72:	4301      	orrs	r1, r0
 8001b74:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b76:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b78:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b7a:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b7c:	4311      	orrs	r1, r2
 8001b7e:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b82:	4281      	cmp	r1, r0
 8001b84:	d002      	beq.n	8001b8c <HAL_ADC_Init+0xdc>
 8001b86:	1e48      	subs	r0, r1, #1
 8001b88:	2806      	cmp	r0, #6
 8001b8a:	d807      	bhi.n	8001b9c <HAL_ADC_Init+0xec>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b8c:	2507      	movs	r5, #7
 8001b8e:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b90:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b92:	43a8      	bics	r0, r5
 8001b94:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b96:	6958      	ldr	r0, [r3, #20]
 8001b98:	4301      	orrs	r1, r0
 8001b9a:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_ADC_Init+0x148>)
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d111      	bne.n	8001bca <HAL_ADC_Init+0x11a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba6:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001baa:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001bac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bae:	4393      	bics	r3, r2
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bba:	2120      	movs	r1, #32
 8001bbc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001bbe:	4329      	orrs	r1, r5
 8001bc0:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001bc4:	4308      	orrs	r0, r1
 8001bc6:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001bc8:	e7cd      	b.n	8001b66 <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8001bca:	2212      	movs	r2, #18
 8001bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bce:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bdc:	4303      	orrs	r3, r0
 8001bde:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001be0:	e7ea      	b.n	8001bb8 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be2:	2310      	movs	r3, #16
 8001be4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be8:	4313      	orrs	r3, r2
 8001bea:	63a3      	str	r3, [r4, #56]	; 0x38
 8001bec:	e7e4      	b.n	8001bb8 <HAL_ADC_Init+0x108>
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	fffffefd 	.word	0xfffffefd
 8001bf4:	fffe0219 	.word	0xfffe0219
 8001bf8:	833fffe7 	.word	0x833fffe7

08001bfc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001bfe:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c00:	0004      	movs	r4, r0
{
 8001c02:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0U;
 8001c04:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8001c06:	3434      	adds	r4, #52	; 0x34
 8001c08:	7823      	ldrb	r3, [r4, #0]
{
 8001c0a:	0002      	movs	r2, r0
  __HAL_LOCK(hadc);
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d02f      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x76>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c14:	6817      	ldr	r7, [r2, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c16:	469c      	mov	ip, r3
  __HAL_LOCK(hadc);
 8001c18:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c1a:	68bd      	ldr	r5, [r7, #8]
 8001c1c:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hadc);
 8001c1e:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c20:	4005      	ands	r5, r0
 8001c22:	d159      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0xdc>
 8001c24:	680e      	ldr	r6, [r1, #0]
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001c26:	482f      	ldr	r0, [pc, #188]	; (8001ce4 <HAL_ADC_ConfigChannel+0xe8>)
 8001c28:	40b3      	lsls	r3, r6
 8001c2a:	0032      	movs	r2, r6
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	684b      	ldr	r3, [r1, #4]
 8001c30:	3a10      	subs	r2, #16
 8001c32:	4283      	cmp	r3, r0
 8001c34:	d03d      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0xb6>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	9801      	ldr	r0, [sp, #4]
 8001c3a:	4318      	orrs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c3c:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c3e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c40:	055b      	lsls	r3, r3, #21
 8001c42:	459c      	cmp	ip, r3
 8001c44:	d010      	beq.n	8001c68 <HAL_ADC_ConfigChannel+0x6c>
 8001c46:	4663      	mov	r3, ip
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d90c      	bls.n	8001c68 <HAL_ADC_ConfigChannel+0x6c>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001c4e:	688b      	ldr	r3, [r1, #8]
 8001c50:	2107      	movs	r1, #7
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	4008      	ands	r0, r1
 8001c56:	4283      	cmp	r3, r0
 8001c58:	d006      	beq.n	8001c68 <HAL_ADC_ConfigChannel+0x6c>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c5a:	6978      	ldr	r0, [r7, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c5c:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c5e:	4388      	bics	r0, r1
 8001c60:	6178      	str	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	4303      	orrs	r3, r0
 8001c66:	617b      	str	r3, [r7, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c68:	2a01      	cmp	r2, #1
 8001c6a:	d904      	bls.n	8001c76 <HAL_ADC_ConfigChannel+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6c:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001c72:	b005      	add	sp, #20
 8001c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c76:	0033      	movs	r3, r6
 8001c78:	3b10      	subs	r3, #16
 8001c7a:	1e58      	subs	r0, r3, #1
 8001c7c:	4183      	sbcs	r3, r0
 8001c7e:	2080      	movs	r0, #128	; 0x80
 8001c80:	4919      	ldr	r1, [pc, #100]	; (8001ce8 <HAL_ADC_ConfigChannel+0xec>)
 8001c82:	425b      	negs	r3, r3
 8001c84:	680a      	ldr	r2, [r1, #0]
 8001c86:	059b      	lsls	r3, r3, #22
 8001c88:	0400      	lsls	r0, r0, #16
 8001c8a:	181b      	adds	r3, r3, r0
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c90:	2e10      	cmp	r6, #16
 8001c92:	d1eb      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_ADC_ConfigChannel+0xf0>)
 8001c96:	4916      	ldr	r1, [pc, #88]	; (8001cf0 <HAL_ADC_ConfigChannel+0xf4>)
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	f7fe fa49 	bl	8000130 <__udivsi3>
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	4358      	muls	r0, r3
 8001ca2:	9003      	str	r0, [sp, #12]
          while(wait_loop_index != 0U)
 8001ca4:	9b03      	ldr	r3, [sp, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0e0      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0x70>
            wait_loop_index--;
 8001caa:	9b03      	ldr	r3, [sp, #12]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	9303      	str	r3, [sp, #12]
 8001cb0:	e7f8      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0xa8>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cb4:	9b01      	ldr	r3, [sp, #4]
 8001cb6:	4399      	bics	r1, r3
 8001cb8:	62b9      	str	r1, [r7, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cba:	2a01      	cmp	r2, #1
 8001cbc:	d8d6      	bhi.n	8001c6c <HAL_ADC_ConfigChannel+0x70>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001cbe:	1e53      	subs	r3, r2, #1
 8001cc0:	419a      	sbcs	r2, r3
 8001cc2:	4253      	negs	r3, r2
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <HAL_ADC_ConfigChannel+0xec>)
 8001cc8:	03d2      	lsls	r2, r2, #15
 8001cca:	4013      	ands	r3, r2
 8001ccc:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_ADC_ConfigChannel+0xf8>)
 8001cce:	6808      	ldr	r0, [r1, #0]
 8001cd0:	189b      	adds	r3, r3, r2
 8001cd2:	4003      	ands	r3, r0
 8001cd4:	600b      	str	r3, [r1, #0]
 8001cd6:	e7c9      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd8:	2120      	movs	r1, #32
 8001cda:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8001cdc:	4301      	orrs	r1, r0
 8001cde:	6391      	str	r1, [r2, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	e7c4      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x72>
 8001ce4:	00001001 	.word	0x00001001
 8001ce8:	40012708 	.word	0x40012708
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	000f4240 	.word	0x000f4240
 8001cf4:	ff7fffff 	.word	0xff7fffff

08001cf8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf8:	b530      	push	{r4, r5, lr}
 8001cfa:	25ff      	movs	r5, #255	; 0xff
 8001cfc:	2403      	movs	r4, #3
 8001cfe:	002a      	movs	r2, r5
 8001d00:	b2c3      	uxtb	r3, r0
 8001d02:	401c      	ands	r4, r3
 8001d04:	00e4      	lsls	r4, r4, #3
 8001d06:	40a2      	lsls	r2, r4
 8001d08:	0189      	lsls	r1, r1, #6
 8001d0a:	4029      	ands	r1, r5
 8001d0c:	43d2      	mvns	r2, r2
 8001d0e:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001d10:	2800      	cmp	r0, #0
 8001d12:	db0a      	blt.n	8001d2a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d14:	24c0      	movs	r4, #192	; 0xc0
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_NVIC_SetPriority+0x4c>)
 8001d18:	0880      	lsrs	r0, r0, #2
 8001d1a:	0080      	lsls	r0, r0, #2
 8001d1c:	18c0      	adds	r0, r0, r3
 8001d1e:	00a4      	lsls	r4, r4, #2
 8001d20:	5903      	ldr	r3, [r0, r4]
 8001d22:	401a      	ands	r2, r3
 8001d24:	4311      	orrs	r1, r2
 8001d26:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001d28:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d2a:	200f      	movs	r0, #15
 8001d2c:	4003      	ands	r3, r0
 8001d2e:	3b08      	subs	r3, #8
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_NVIC_SetPriority+0x50>)
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	181b      	adds	r3, r3, r0
 8001d38:	69d8      	ldr	r0, [r3, #28]
 8001d3a:	4002      	ands	r2, r0
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	61d9      	str	r1, [r3, #28]
 8001d40:	e7f2      	b.n	8001d28 <HAL_NVIC_SetPriority+0x30>
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	db05      	blt.n	8001d5c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d50:	231f      	movs	r3, #31
 8001d52:	4018      	ands	r0, r3
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	4083      	lsls	r3, r0
 8001d58:	4a01      	ldr	r2, [pc, #4]	; (8001d60 <HAL_NVIC_EnableIRQ+0x14>)
 8001d5a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d5c:	4770      	bx	lr
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d64:	2800      	cmp	r0, #0
 8001d66:	db09      	blt.n	8001d7c <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d68:	231f      	movs	r3, #31
 8001d6a:	4018      	ands	r0, r3
 8001d6c:	3b1e      	subs	r3, #30
 8001d6e:	4083      	lsls	r3, r0
 8001d70:	4a03      	ldr	r2, [pc, #12]	; (8001d80 <HAL_NVIC_DisableIRQ+0x1c>)
 8001d72:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d78:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001d7c:	4770      	bx	lr
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	e000e104 	.word	0xe000e104

08001d84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	4a09      	ldr	r2, [pc, #36]	; (8001dac <HAL_SYSTICK_Config+0x28>)
 8001d86:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d88:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d80d      	bhi.n	8001daa <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d8e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d92:	4808      	ldr	r0, [pc, #32]	; (8001db4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d94:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d96:	6a03      	ldr	r3, [r0, #32]
 8001d98:	0609      	lsls	r1, r1, #24
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001daa:	4770      	bx	lr
 8001dac:	00ffffff 	.word	0x00ffffff
 8001db0:	e000e010 	.word	0xe000e010
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001db8:	2800      	cmp	r0, #0
 8001dba:	db07      	blt.n	8001dcc <HAL_NVIC_ClearPendingIRQ+0x14>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbc:	231f      	movs	r3, #31
 8001dbe:	22c0      	movs	r2, #192	; 0xc0
 8001dc0:	4018      	ands	r0, r3
 8001dc2:	3b1e      	subs	r3, #30
 8001dc4:	4083      	lsls	r3, r0
 8001dc6:	4902      	ldr	r1, [pc, #8]	; (8001dd0 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001dc8:	0052      	lsls	r2, r2, #1
 8001dca:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8001dcc:	4770      	bx	lr
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8001dd8:	2501      	movs	r5, #1
  if(NULL == hdma)
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dde:	2302      	movs	r3, #2
 8001de0:	1c86      	adds	r6, r0, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001de2:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001de4:	77f3      	strb	r3, [r6, #31]
  tmp = hdma->Instance->CCR;
 8001de6:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dea:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dec:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001dee:	6863      	ldr	r3, [r4, #4]
 8001df0:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	68e1      	ldr	r1, [r4, #12]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6921      	ldr	r1, [r4, #16]
 8001df8:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfa:	6961      	ldr	r1, [r4, #20]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	69a1      	ldr	r1, [r4, #24]
 8001e00:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e02:	69e1      	ldr	r1, [r4, #28]
 8001e04:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001e06:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e08:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_DMA_Init+0x5c>)
 8001e0c:	2114      	movs	r1, #20
 8001e0e:	18c0      	adds	r0, r0, r3
 8001e10:	f7fe f98e 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e16:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8001e18:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1a:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e1c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1e:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001e20:	77f5      	strb	r5, [r6, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001e22:	1964      	adds	r4, r4, r5
  return HAL_OK;
 8001e24:	001d      	movs	r5, r3
  hdma->Lock = HAL_UNLOCKED;
 8001e26:	77e3      	strb	r3, [r4, #31]
}  
 8001e28:	0028      	movs	r0, r5
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	ffffc00f 	.word	0xffffc00f
 8001e30:	bffdfff8 	.word	0xbffdfff8
 8001e34:	40020000 	.word	0x40020000

08001e38 <HAL_DMA_Start_IT>:
{
 8001e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001e3a:	1c44      	adds	r4, r0, #1
 8001e3c:	7fe6      	ldrb	r6, [r4, #31]
{
 8001e3e:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 8001e40:	2002      	movs	r0, #2
 8001e42:	2e01      	cmp	r6, #1
 8001e44:	d027      	beq.n	8001e96 <HAL_DMA_Start_IT+0x5e>
 8001e46:	3801      	subs	r0, #1
 8001e48:	77e0      	strb	r0, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e4a:	1ca8      	adds	r0, r5, #2
 8001e4c:	7fc6      	ldrb	r6, [r0, #31]
 8001e4e:	4684      	mov	ip, r0
 8001e50:	b2f6      	uxtb	r6, r6
 8001e52:	2002      	movs	r0, #2
 8001e54:	2700      	movs	r7, #0
 8001e56:	2e01      	cmp	r6, #1
 8001e58:	d128      	bne.n	8001eac <HAL_DMA_Start_IT+0x74>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001e5a:	4664      	mov	r4, ip
 8001e5c:	77e0      	strb	r0, [r4, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e5e:	682c      	ldr	r4, [r5, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e60:	63af      	str	r7, [r5, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e62:	6820      	ldr	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e64:	6c2f      	ldr	r7, [r5, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e66:	43b0      	bics	r0, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e68:	40be      	lsls	r6, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e6a:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e6c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8001e6e:	6046      	str	r6, [r0, #4]
  hdma->Instance->CNDTR = DataLength;
 8001e70:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e72:	686b      	ldr	r3, [r5, #4]
 8001e74:	6828      	ldr	r0, [r5, #0]
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d10e      	bne.n	8001e98 <HAL_DMA_Start_IT+0x60>
    hdma->Instance->CPAR = DstAddress;
 8001e7a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001e7c:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001e7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e80:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_DMA_Start_IT+0x66>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e86:	230e      	movs	r3, #14
 8001e88:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e8a:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	6802      	ldr	r2, [r0, #0]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	6003      	str	r3, [r0, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e94:	2000      	movs	r0, #0
} 
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8001e98:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e9a:	60e2      	str	r2, [r4, #12]
 8001e9c:	e7ef      	b.n	8001e7e <HAL_DMA_Start_IT+0x46>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e9e:	230a      	movs	r3, #10
 8001ea0:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ea2:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ea4:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	e7ee      	b.n	8001e8a <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001eac:	77e7      	strb	r7, [r4, #31]
 8001eae:	e7f2      	b.n	8001e96 <HAL_DMA_Start_IT+0x5e>

08001eb0 <HAL_DMA_Abort_IT>:
{  
 8001eb0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eb2:	1c84      	adds	r4, r0, #2
 8001eb4:	7fe3      	ldrb	r3, [r4, #31]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001ebe:	3b03      	subs	r3, #3
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ec4:	210e      	movs	r1, #14
 8001ec6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ec8:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	438a      	bics	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	6819      	ldr	r1, [r3, #0]
 8001ed4:	4391      	bics	r1, r2
 8001ed6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ed8:	0011      	movs	r1, r2
 8001eda:	40a9      	lsls	r1, r5
 8001edc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001ede:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001ee0:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001ee2:	2400      	movs	r4, #0
 8001ee4:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8001ee6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001ee8:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001eec:	42a2      	cmp	r2, r4
 8001eee:	d0e7      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001ef0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	0023      	movs	r3, r4
 8001ef4:	e7e4      	b.n	8001ec0 <HAL_DMA_Abort_IT+0x10>

08001ef6 <HAL_DMA_IRQHandler>:
{
 8001ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ef8:	2704      	movs	r7, #4
 8001efa:	003e      	movs	r6, r7
 8001efc:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001efe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f00:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f02:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001f04:	6803      	ldr	r3, [r0, #0]
 8001f06:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f08:	4235      	tst	r5, r6
 8001f0a:	d00d      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x32>
 8001f0c:	423c      	tst	r4, r7
 8001f0e:	d00b      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	0689      	lsls	r1, r1, #26
 8001f14:	d402      	bmi.n	8001f1c <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	43b9      	bics	r1, r7
 8001f1a:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f1e:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d019      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8001f24:	4798      	blx	r3
}  
 8001f26:	e017      	b.n	8001f58 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f28:	2702      	movs	r7, #2
 8001f2a:	003e      	movs	r6, r7
 8001f2c:	408e      	lsls	r6, r1
 8001f2e:	4235      	tst	r5, r6
 8001f30:	d013      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x64>
 8001f32:	423c      	tst	r4, r7
 8001f34:	d011      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	0689      	lsls	r1, r1, #26
 8001f3a:	d406      	bmi.n	8001f4a <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f3c:	240a      	movs	r4, #10
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	43a1      	bics	r1, r4
 8001f42:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001f44:	2101      	movs	r1, #1
 8001f46:	19c3      	adds	r3, r0, r7
 8001f48:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f4a:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	1c43      	adds	r3, r0, #1
 8001f50:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8001f52:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d1e5      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x2e>
}  
 8001f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f5a:	2608      	movs	r6, #8
 8001f5c:	0037      	movs	r7, r6
 8001f5e:	408f      	lsls	r7, r1
 8001f60:	423d      	tst	r5, r7
 8001f62:	d0f9      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x62>
 8001f64:	4234      	tst	r4, r6
 8001f66:	d0f7      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f68:	250e      	movs	r5, #14
 8001f6a:	681c      	ldr	r4, [r3, #0]
 8001f6c:	43ac      	bics	r4, r5
 8001f6e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f70:	2301      	movs	r3, #1
 8001f72:	001c      	movs	r4, r3
 8001f74:	408c      	lsls	r4, r1
 8001f76:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8001f78:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f7a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001f7c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8001f7e:	2200      	movs	r2, #0
 8001f80:	18c3      	adds	r3, r0, r3
 8001f82:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8001f84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f86:	e7e5      	b.n	8001f54 <HAL_DMA_IRQHandler+0x5e>

08001f88 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001f88:	2110      	movs	r1, #16
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <FLASH_SetErrorCode+0x34>)
{
 8001f8c:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001f8e:	68d8      	ldr	r0, [r3, #12]
  uint32_t flags = 0U;
 8001f90:	2200      	movs	r2, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001f92:	4208      	tst	r0, r1
 8001f94:	d005      	beq.n	8001fa2 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f96:	480a      	ldr	r0, [pc, #40]	; (8001fc0 <FLASH_SetErrorCode+0x38>)
 8001f98:	3202      	adds	r2, #2
 8001f9a:	69c4      	ldr	r4, [r0, #28]
 8001f9c:	4322      	orrs	r2, r4
 8001f9e:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001fa0:	000a      	movs	r2, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001fa2:	2004      	movs	r0, #4
 8001fa4:	68d9      	ldr	r1, [r3, #12]
 8001fa6:	4201      	tst	r1, r0
 8001fa8:	d005      	beq.n	8001fb6 <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001faa:	2101      	movs	r1, #1
 8001fac:	4c04      	ldr	r4, [pc, #16]	; (8001fc0 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8001fae:	4302      	orrs	r2, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001fb0:	69e5      	ldr	r5, [r4, #28]
 8001fb2:	4329      	orrs	r1, r5
 8001fb4:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001fb6:	60da      	str	r2, [r3, #12]
}  
 8001fb8:	bd30      	pop	{r4, r5, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	20000460 	.word	0x20000460

08001fc4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	0612      	lsls	r2, r2, #24
 8001fcc:	d506      	bpl.n	8001fdc <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_FLASH_Unlock+0x20>)
 8001fd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <HAL_FLASH_Unlock+0x24>)
 8001fd4:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fd6:	6918      	ldr	r0, [r3, #16]
 8001fd8:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 8001fda:	0fc0      	lsrs	r0, r0, #31
}
 8001fdc:	4770      	bx	lr
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	45670123 	.word	0x45670123
 8001fe8:	cdef89ab 	.word	0xcdef89ab

08001fec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <HAL_FLASH_Lock+0x10>)
}
 8001ff0:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ff2:	6911      	ldr	r1, [r2, #16]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6113      	str	r3, [r2, #16]
}
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40022000 	.word	0x40022000

08002000 <FLASH_WaitForLastOperation>:
{
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff fd3c 	bl	8001a80 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002008:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 800200a:	0006      	movs	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <FLASH_WaitForLastOperation+0x50>)
 800200e:	001a      	movs	r2, r3
 8002010:	68d9      	ldr	r1, [r3, #12]
 8002012:	4229      	tst	r1, r5
 8002014:	d10f      	bne.n	8002036 <FLASH_WaitForLastOperation+0x36>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002016:	2120      	movs	r1, #32
 8002018:	68d8      	ldr	r0, [r3, #12]
 800201a:	4208      	tst	r0, r1
 800201c:	d000      	beq.n	8002020 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800201e:	60d9      	str	r1, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002020:	2310      	movs	r3, #16
 8002022:	68d0      	ldr	r0, [r2, #12]
 8002024:	4018      	ands	r0, r3
 8002026:	d102      	bne.n	800202e <FLASH_WaitForLastOperation+0x2e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002028:	68d3      	ldr	r3, [r2, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800202a:	075b      	lsls	r3, r3, #29
 800202c:	d508      	bpl.n	8002040 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 800202e:	f7ff ffab 	bl	8001f88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
 8002034:	e004      	b.n	8002040 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8002036:	1c61      	adds	r1, r4, #1
 8002038:	d0ea      	beq.n	8002010 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800203a:	2c00      	cmp	r4, #0
 800203c:	d101      	bne.n	8002042 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 800203e:	2003      	movs	r0, #3
}
 8002040:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002042:	f7ff fd1d 	bl	8001a80 <HAL_GetTick>
 8002046:	1b80      	subs	r0, r0, r6
 8002048:	42a0      	cmp	r0, r4
 800204a:	d9df      	bls.n	800200c <FLASH_WaitForLastOperation+0xc>
 800204c:	e7f7      	b.n	800203e <FLASH_WaitForLastOperation+0x3e>
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	40022000 	.word	0x40022000

08002054 <HAL_FLASH_Program>:
{
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	b085      	sub	sp, #20
 8002058:	9202      	str	r2, [sp, #8]
 800205a:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_FLASH_Program+0x78>)
{
 800205e:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 8002060:	7e1a      	ldrb	r2, [r3, #24]
{
 8002062:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8002064:	2002      	movs	r0, #2
 8002066:	2a01      	cmp	r2, #1
 8002068:	d02e      	beq.n	80020c8 <HAL_FLASH_Program+0x74>
 800206a:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800206c:	4818      	ldr	r0, [pc, #96]	; (80020d0 <HAL_FLASH_Program+0x7c>)
  __HAL_LOCK(&pFlash);
 800206e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002070:	f7ff ffc6 	bl	8002000 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002074:	2800      	cmp	r0, #0
 8002076:	d124      	bne.n	80020c2 <HAL_FLASH_Program+0x6e>
      nbiterations = 1U;
 8002078:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800207a:	2c01      	cmp	r4, #1
 800207c:	d002      	beq.n	8002084 <HAL_FLASH_Program+0x30>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800207e:	2c02      	cmp	r4, #2
 8002080:	d000      	beq.n	8002084 <HAL_FLASH_Program+0x30>
      nbiterations = 4U;
 8002082:	2604      	movs	r6, #4
 8002084:	2400      	movs	r4, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002086:	9802      	ldr	r0, [sp, #8]
 8002088:	9903      	ldr	r1, [sp, #12]
 800208a:	0122      	lsls	r2, r4, #4
 800208c:	f7fe f8dc 	bl	8000248 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002090:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002092:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_FLASH_Program+0x78>)
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002096:	4d0f      	ldr	r5, [pc, #60]	; (80020d4 <HAL_FLASH_Program+0x80>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002098:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800209a:	692b      	ldr	r3, [r5, #16]
 800209c:	9a01      	ldr	r2, [sp, #4]
 800209e:	433b      	orrs	r3, r7
 80020a0:	612b      	str	r3, [r5, #16]
 80020a2:	0063      	lsls	r3, r4, #1
 80020a4:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80020a6:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 80020a8:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020aa:	4809      	ldr	r0, [pc, #36]	; (80020d0 <HAL_FLASH_Program+0x7c>)
 80020ac:	f7ff ffa8 	bl	8002000 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80020b0:	692b      	ldr	r3, [r5, #16]
 80020b2:	43bb      	bics	r3, r7
 80020b4:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_FLASH_Program+0x6e>
 80020ba:	19e4      	adds	r4, r4, r7
    for (index = 0U; index < nbiterations; index++)
 80020bc:	b2e3      	uxtb	r3, r4
 80020be:	429e      	cmp	r6, r3
 80020c0:	d8e1      	bhi.n	8002086 <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 80020c2:	2200      	movs	r2, #0
 80020c4:	4b01      	ldr	r3, [pc, #4]	; (80020cc <HAL_FLASH_Program+0x78>)
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	b005      	add	sp, #20
 80020ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020cc:	20000460 	.word	0x20000460
 80020d0:	0000c350 	.word	0x0000c350
 80020d4:	40022000 	.word	0x40022000

080020d8 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020d8:	2200      	movs	r2, #0
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <FLASH_MassErase+0x1c>)
 80020dc:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <FLASH_MassErase+0x20>)
 80020e0:	3204      	adds	r2, #4
 80020e2:	6919      	ldr	r1, [r3, #16]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020e8:	2240      	movs	r2, #64	; 0x40
 80020ea:	6919      	ldr	r1, [r3, #16]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	611a      	str	r2, [r3, #16]
}
 80020f0:	4770      	bx	lr
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	20000460 	.word	0x20000460
 80020f8:	40022000 	.word	0x40022000

080020fc <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020fc:	2200      	movs	r2, #0
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <FLASH_PageErase+0x1c>)
 8002100:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <FLASH_PageErase+0x20>)
 8002104:	3202      	adds	r2, #2
 8002106:	6919      	ldr	r1, [r3, #16]
 8002108:	430a      	orrs	r2, r1
 800210a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800210c:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 800210e:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002110:	6919      	ldr	r1, [r3, #16]
 8002112:	430a      	orrs	r2, r1
 8002114:	611a      	str	r2, [r3, #16]
}
 8002116:	4770      	bx	lr
 8002118:	20000460 	.word	0x20000460
 800211c:	40022000 	.word	0x40022000

08002120 <HAL_FLASHEx_Erase>:
{
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8002122:	4e21      	ldr	r6, [pc, #132]	; (80021a8 <HAL_FLASHEx_Erase+0x88>)
{
 8002124:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 8002126:	7e33      	ldrb	r3, [r6, #24]
{
 8002128:	000f      	movs	r7, r1
  __HAL_LOCK(&pFlash);
 800212a:	2002      	movs	r0, #2
 800212c:	2b01      	cmp	r3, #1
 800212e:	d00c      	beq.n	800214a <HAL_FLASHEx_Erase+0x2a>
 8002130:	2301      	movs	r3, #1
 8002132:	7633      	strb	r3, [r6, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002134:	682b      	ldr	r3, [r5, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002136:	481d      	ldr	r0, [pc, #116]	; (80021ac <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002138:	2b01      	cmp	r3, #1
 800213a:	d112      	bne.n	8002162 <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800213c:	f7ff ff60 	bl	8002000 <FLASH_WaitForLastOperation>
 8002140:	2800      	cmp	r0, #0
 8002142:	d003      	beq.n	800214c <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002144:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8002146:	2300      	movs	r3, #0
 8002148:	7633      	strb	r3, [r6, #24]
}
 800214a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 800214c:	f7ff ffc4 	bl	80020d8 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002150:	4816      	ldr	r0, [pc, #88]	; (80021ac <HAL_FLASHEx_Erase+0x8c>)
 8002152:	f7ff ff55 	bl	8002000 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002156:	2104      	movs	r1, #4
 8002158:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <HAL_FLASHEx_Erase+0x90>)
 800215a:	6913      	ldr	r3, [r2, #16]
 800215c:	438b      	bics	r3, r1
 800215e:	6113      	str	r3, [r2, #16]
 8002160:	e7f1      	b.n	8002146 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002162:	f7ff ff4d 	bl	8002000 <FLASH_WaitForLastOperation>
 8002166:	2800      	cmp	r0, #0
 8002168:	d1ec      	bne.n	8002144 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800216a:	2301      	movs	r3, #1
 800216c:	425b      	negs	r3, r3
 800216e:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 8002170:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002172:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002174:	68ab      	ldr	r3, [r5, #8]
 8002176:	686a      	ldr	r2, [r5, #4]
 8002178:	029b      	lsls	r3, r3, #10
 800217a:	189b      	adds	r3, r3, r2
        for(address = pEraseInit->PageAddress;
 800217c:	42a3      	cmp	r3, r4
 800217e:	d9e2      	bls.n	8002146 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8002180:	0020      	movs	r0, r4
 8002182:	f7ff ffbb 	bl	80020fc <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002186:	4809      	ldr	r0, [pc, #36]	; (80021ac <HAL_FLASHEx_Erase+0x8c>)
 8002188:	f7ff ff3a 	bl	8002000 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800218c:	2102      	movs	r1, #2
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_FLASHEx_Erase+0x90>)
 8002190:	6913      	ldr	r3, [r2, #16]
 8002192:	438b      	bics	r3, r1
 8002194:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8002196:	2800      	cmp	r0, #0
 8002198:	d001      	beq.n	800219e <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 800219a:	603c      	str	r4, [r7, #0]
            break;
 800219c:	e7d3      	b.n	8002146 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	18e4      	adds	r4, r4, r3
 80021a4:	e7e6      	b.n	8002174 <HAL_FLASHEx_Erase+0x54>
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	20000460 	.word	0x20000460
 80021ac:	0000c350 	.word	0x0000c350
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	680b      	ldr	r3, [r1, #0]
{ 
 80021b8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ba:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 80021bc:	2300      	movs	r3, #0
{ 
 80021be:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c0:	9a03      	ldr	r2, [sp, #12]
 80021c2:	40da      	lsrs	r2, r3
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 80021c6:	b007      	add	sp, #28
 80021c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	9202      	str	r2, [sp, #8]
 80021d0:	9902      	ldr	r1, [sp, #8]
 80021d2:	9a03      	ldr	r2, [sp, #12]
 80021d4:	400a      	ands	r2, r1
 80021d6:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80021d8:	d100      	bne.n	80021dc <HAL_GPIO_Init+0x28>
 80021da:	e08c      	b.n	80022f6 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021dc:	9a01      	ldr	r2, [sp, #4]
 80021de:	2110      	movs	r1, #16
 80021e0:	6852      	ldr	r2, [r2, #4]
 80021e2:	0016      	movs	r6, r2
 80021e4:	438e      	bics	r6, r1
 80021e6:	2e02      	cmp	r6, #2
 80021e8:	d10e      	bne.n	8002208 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ea:	2507      	movs	r5, #7
 80021ec:	401d      	ands	r5, r3
 80021ee:	00ad      	lsls	r5, r5, #2
 80021f0:	3901      	subs	r1, #1
 80021f2:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 80021f4:	08dc      	lsrs	r4, r3, #3
 80021f6:	00a4      	lsls	r4, r4, #2
 80021f8:	1904      	adds	r4, r0, r4
 80021fa:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021fc:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021fe:	9901      	ldr	r1, [sp, #4]
 8002200:	6909      	ldr	r1, [r1, #16]
 8002202:	40a9      	lsls	r1, r5
 8002204:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002206:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002208:	2403      	movs	r4, #3
 800220a:	005f      	lsls	r7, r3, #1
 800220c:	40bc      	lsls	r4, r7
 800220e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002210:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002212:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002214:	4025      	ands	r5, r4
 8002216:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002218:	2503      	movs	r5, #3
 800221a:	4015      	ands	r5, r2
 800221c:	40bd      	lsls	r5, r7
 800221e:	4661      	mov	r1, ip
 8002220:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8002222:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002224:	2e01      	cmp	r6, #1
 8002226:	d80f      	bhi.n	8002248 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002228:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 800222a:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800222c:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800222e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002230:	40bd      	lsls	r5, r7
 8002232:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002234:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002236:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002238:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800223a:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800223e:	2101      	movs	r1, #1
 8002240:	400d      	ands	r5, r1
 8002242:	409d      	lsls	r5, r3
 8002244:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002246:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8002248:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800224a:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800224c:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800224e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002250:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002252:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002254:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002256:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002258:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225a:	420a      	tst	r2, r1
 800225c:	d04b      	beq.n	80022f6 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	2101      	movs	r1, #1
 8002260:	4c26      	ldr	r4, [pc, #152]	; (80022fc <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002262:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002264:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002266:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002268:	430d      	orrs	r5, r1
 800226a:	61a5      	str	r5, [r4, #24]
 800226c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800226e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002270:	400c      	ands	r4, r1
 8002272:	9405      	str	r4, [sp, #20]
 8002274:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002276:	240f      	movs	r4, #15
 8002278:	4921      	ldr	r1, [pc, #132]	; (8002300 <HAL_GPIO_Init+0x14c>)
 800227a:	00ad      	lsls	r5, r5, #2
 800227c:	00b6      	lsls	r6, r6, #2
 800227e:	186d      	adds	r5, r5, r1
 8002280:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002282:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8002284:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002286:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002288:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800228a:	2400      	movs	r4, #0
 800228c:	4288      	cmp	r0, r1
 800228e:	d00c      	beq.n	80022aa <HAL_GPIO_Init+0xf6>
 8002290:	491c      	ldr	r1, [pc, #112]	; (8002304 <HAL_GPIO_Init+0x150>)
 8002292:	3401      	adds	r4, #1
 8002294:	4288      	cmp	r0, r1
 8002296:	d008      	beq.n	80022aa <HAL_GPIO_Init+0xf6>
 8002298:	491b      	ldr	r1, [pc, #108]	; (8002308 <HAL_GPIO_Init+0x154>)
 800229a:	3401      	adds	r4, #1
 800229c:	4288      	cmp	r0, r1
 800229e:	d004      	beq.n	80022aa <HAL_GPIO_Init+0xf6>
 80022a0:	491a      	ldr	r1, [pc, #104]	; (800230c <HAL_GPIO_Init+0x158>)
 80022a2:	3403      	adds	r4, #3
 80022a4:	4288      	cmp	r0, r1
 80022a6:	d100      	bne.n	80022aa <HAL_GPIO_Init+0xf6>
 80022a8:	3c02      	subs	r4, #2
 80022aa:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 80022ac:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ae:	433c      	orrs	r4, r7
          temp |= iocurrent;
 80022b0:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b2:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80022b4:	4c16      	ldr	r4, [pc, #88]	; (8002310 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 80022b6:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80022b8:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 80022ba:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022bc:	03d1      	lsls	r1, r2, #15
 80022be:	d401      	bmi.n	80022c4 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 80022c0:	003e      	movs	r6, r7
 80022c2:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80022c4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80022c6:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 80022c8:	9e00      	ldr	r6, [sp, #0]
 80022ca:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022cc:	0391      	lsls	r1, r2, #14
 80022ce:	d401      	bmi.n	80022d4 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 80022d0:	003e      	movs	r6, r7
 80022d2:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80022d4:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80022d6:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 80022d8:	9e00      	ldr	r6, [sp, #0]
 80022da:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022dc:	02d1      	lsls	r1, r2, #11
 80022de:	d401      	bmi.n	80022e4 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 80022e0:	003e      	movs	r6, r7
 80022e2:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80022e4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80022e6:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 80022e8:	9f00      	ldr	r7, [sp, #0]
 80022ea:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ec:	0292      	lsls	r2, r2, #10
 80022ee:	d401      	bmi.n	80022f4 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 80022f0:	402e      	ands	r6, r5
 80022f2:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80022f4:	60e7      	str	r7, [r4, #12]
    position++;
 80022f6:	3301      	adds	r3, #1
 80022f8:	e762      	b.n	80021c0 <HAL_GPIO_Init+0xc>
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010000 	.word	0x40010000
 8002304:	48000400 	.word	0x48000400
 8002308:	48000800 	.word	0x48000800
 800230c:	48000c00 	.word	0x48000c00
 8002310:	40010400 	.word	0x40010400

08002314 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002314:	6900      	ldr	r0, [r0, #16]
 8002316:	4008      	ands	r0, r1
 8002318:	1e41      	subs	r1, r0, #1
 800231a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800231c:	b2c0      	uxtb	r0, r0
  }
 800231e:	4770      	bx	lr

08002320 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002320:	2a00      	cmp	r2, #0
 8002322:	d001      	beq.n	8002328 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002324:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002326:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002328:	6281      	str	r1, [r0, #40]	; 0x28
}
 800232a:	e7fc      	b.n	8002326 <HAL_GPIO_WritePin+0x6>

0800232c <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800232c:	4770      	bx	lr
	...

08002330 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8002332:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	4210      	tst	r0, r2
 8002338:	d002      	beq.n	8002340 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800233c:	f7ff fff6 	bl	800232c <HAL_GPIO_EXTI_Callback>
}
 8002340:	bd10      	pop	{r4, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234a:	0004      	movs	r4, r0
 800234c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800234e:	2800      	cmp	r0, #0
 8002350:	d102      	bne.n	8002358 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002352:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8002354:	b005      	add	sp, #20
 8002356:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002358:	6803      	ldr	r3, [r0, #0]
 800235a:	07db      	lsls	r3, r3, #31
 800235c:	d42e      	bmi.n	80023bc <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	079b      	lsls	r3, r3, #30
 8002362:	d47e      	bmi.n	8002462 <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	071b      	lsls	r3, r3, #28
 8002368:	d500      	bpl.n	800236c <HAL_RCC_OscConfig+0x24>
 800236a:	e0ba      	b.n	80024e2 <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	075b      	lsls	r3, r3, #29
 8002370:	d500      	bpl.n	8002374 <HAL_RCC_OscConfig+0x2c>
 8002372:	e0dd      	b.n	8002530 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	06db      	lsls	r3, r3, #27
 8002378:	d51a      	bpl.n	80023b0 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800237a:	6962      	ldr	r2, [r4, #20]
 800237c:	4db4      	ldr	r5, [pc, #720]	; (8002650 <HAL_RCC_OscConfig+0x308>)
 800237e:	2304      	movs	r3, #4
 8002380:	2a01      	cmp	r2, #1
 8002382:	d000      	beq.n	8002386 <HAL_RCC_OscConfig+0x3e>
 8002384:	e149      	b.n	800261a <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002386:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002388:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800238a:	430b      	orrs	r3, r1
 800238c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800238e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002390:	431a      	orrs	r2, r3
 8002392:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002394:	f7ff fb74 	bl	8001a80 <HAL_GetTick>
 8002398:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800239a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800239c:	4233      	tst	r3, r6
 800239e:	d100      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5a>
 80023a0:	e134      	b.n	800260c <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023a2:	21f8      	movs	r1, #248	; 0xf8
 80023a4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80023a6:	69a3      	ldr	r3, [r4, #24]
 80023a8:	438a      	bics	r2, r1
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b0:	6a23      	ldr	r3, [r4, #32]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d000      	beq.n	80023b8 <HAL_RCC_OscConfig+0x70>
 80023b6:	e157      	b.n	8002668 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 80023b8:	2000      	movs	r0, #0
 80023ba:	e7cb      	b.n	8002354 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023bc:	210c      	movs	r1, #12
 80023be:	4da4      	ldr	r5, [pc, #656]	; (8002650 <HAL_RCC_OscConfig+0x308>)
 80023c0:	686a      	ldr	r2, [r5, #4]
 80023c2:	400a      	ands	r2, r1
 80023c4:	2a04      	cmp	r2, #4
 80023c6:	d006      	beq.n	80023d6 <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c8:	686b      	ldr	r3, [r5, #4]
 80023ca:	400b      	ands	r3, r1
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d109      	bne.n	80023e4 <HAL_RCC_OscConfig+0x9c>
 80023d0:	686b      	ldr	r3, [r5, #4]
 80023d2:	03db      	lsls	r3, r3, #15
 80023d4:	d506      	bpl.n	80023e4 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d6:	682b      	ldr	r3, [r5, #0]
 80023d8:	039b      	lsls	r3, r3, #14
 80023da:	d5c0      	bpl.n	800235e <HAL_RCC_OscConfig+0x16>
 80023dc:	6863      	ldr	r3, [r4, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1bd      	bne.n	800235e <HAL_RCC_OscConfig+0x16>
 80023e2:	e7b6      	b.n	8002352 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e4:	6863      	ldr	r3, [r4, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d113      	bne.n	8002412 <HAL_RCC_OscConfig+0xca>
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	682a      	ldr	r2, [r5, #0]
 80023ee:	025b      	lsls	r3, r3, #9
 80023f0:	4313      	orrs	r3, r2
 80023f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023f4:	f7ff fb44 	bl	8001a80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80023fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fc:	02b6      	lsls	r6, r6, #10
 80023fe:	682b      	ldr	r3, [r5, #0]
 8002400:	4233      	tst	r3, r6
 8002402:	d1ac      	bne.n	800235e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002404:	f7ff fb3c 	bl	8001a80 <HAL_GetTick>
 8002408:	1bc0      	subs	r0, r0, r7
 800240a:	2864      	cmp	r0, #100	; 0x64
 800240c:	d9f7      	bls.n	80023fe <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 800240e:	2003      	movs	r0, #3
 8002410:	e7a0      	b.n	8002354 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002412:	2b00      	cmp	r3, #0
 8002414:	d115      	bne.n	8002442 <HAL_RCC_OscConfig+0xfa>
 8002416:	682b      	ldr	r3, [r5, #0]
 8002418:	4a8e      	ldr	r2, [pc, #568]	; (8002654 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241c:	4013      	ands	r3, r2
 800241e:	602b      	str	r3, [r5, #0]
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	4a8d      	ldr	r2, [pc, #564]	; (8002658 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002424:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002426:	4013      	ands	r3, r2
 8002428:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800242a:	f7ff fb29 	bl	8001a80 <HAL_GetTick>
 800242e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002430:	682b      	ldr	r3, [r5, #0]
 8002432:	4233      	tst	r3, r6
 8002434:	d093      	beq.n	800235e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002436:	f7ff fb23 	bl	8001a80 <HAL_GetTick>
 800243a:	1bc0      	subs	r0, r0, r7
 800243c:	2864      	cmp	r0, #100	; 0x64
 800243e:	d9f7      	bls.n	8002430 <HAL_RCC_OscConfig+0xe8>
 8002440:	e7e5      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002442:	2b05      	cmp	r3, #5
 8002444:	d105      	bne.n	8002452 <HAL_RCC_OscConfig+0x10a>
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	682a      	ldr	r2, [r5, #0]
 800244a:	02db      	lsls	r3, r3, #11
 800244c:	4313      	orrs	r3, r2
 800244e:	602b      	str	r3, [r5, #0]
 8002450:	e7cb      	b.n	80023ea <HAL_RCC_OscConfig+0xa2>
 8002452:	682b      	ldr	r3, [r5, #0]
 8002454:	4a7f      	ldr	r2, [pc, #508]	; (8002654 <HAL_RCC_OscConfig+0x30c>)
 8002456:	4013      	ands	r3, r2
 8002458:	602b      	str	r3, [r5, #0]
 800245a:	682b      	ldr	r3, [r5, #0]
 800245c:	4a7e      	ldr	r2, [pc, #504]	; (8002658 <HAL_RCC_OscConfig+0x310>)
 800245e:	4013      	ands	r3, r2
 8002460:	e7c7      	b.n	80023f2 <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002462:	220c      	movs	r2, #12
 8002464:	4d7a      	ldr	r5, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x308>)
 8002466:	686b      	ldr	r3, [r5, #4]
 8002468:	4213      	tst	r3, r2
 800246a:	d006      	beq.n	800247a <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800246c:	686b      	ldr	r3, [r5, #4]
 800246e:	4013      	ands	r3, r2
 8002470:	2b08      	cmp	r3, #8
 8002472:	d111      	bne.n	8002498 <HAL_RCC_OscConfig+0x150>
 8002474:	686b      	ldr	r3, [r5, #4]
 8002476:	03db      	lsls	r3, r3, #15
 8002478:	d40e      	bmi.n	8002498 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	682b      	ldr	r3, [r5, #0]
 800247c:	079b      	lsls	r3, r3, #30
 800247e:	d503      	bpl.n	8002488 <HAL_RCC_OscConfig+0x140>
 8002480:	68e3      	ldr	r3, [r4, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d000      	beq.n	8002488 <HAL_RCC_OscConfig+0x140>
 8002486:	e764      	b.n	8002352 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	21f8      	movs	r1, #248	; 0xf8
 800248a:	682a      	ldr	r2, [r5, #0]
 800248c:	6923      	ldr	r3, [r4, #16]
 800248e:	438a      	bics	r2, r1
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4313      	orrs	r3, r2
 8002494:	602b      	str	r3, [r5, #0]
 8002496:	e765      	b.n	8002364 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002498:	68e2      	ldr	r2, [r4, #12]
 800249a:	2301      	movs	r3, #1
 800249c:	2a00      	cmp	r2, #0
 800249e:	d00f      	beq.n	80024c0 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 80024a0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4313      	orrs	r3, r2
 80024a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024a8:	f7ff faea 	bl	8001a80 <HAL_GetTick>
 80024ac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	682b      	ldr	r3, [r5, #0]
 80024b0:	4233      	tst	r3, r6
 80024b2:	d1e9      	bne.n	8002488 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b4:	f7ff fae4 	bl	8001a80 <HAL_GetTick>
 80024b8:	1bc0      	subs	r0, r0, r7
 80024ba:	2802      	cmp	r0, #2
 80024bc:	d9f7      	bls.n	80024ae <HAL_RCC_OscConfig+0x166>
 80024be:	e7a6      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 80024c0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80024c4:	439a      	bics	r2, r3
 80024c6:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80024c8:	f7ff fada 	bl	8001a80 <HAL_GetTick>
 80024cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	682b      	ldr	r3, [r5, #0]
 80024d0:	4233      	tst	r3, r6
 80024d2:	d100      	bne.n	80024d6 <HAL_RCC_OscConfig+0x18e>
 80024d4:	e746      	b.n	8002364 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d6:	f7ff fad3 	bl	8001a80 <HAL_GetTick>
 80024da:	1bc0      	subs	r0, r0, r7
 80024dc:	2802      	cmp	r0, #2
 80024de:	d9f6      	bls.n	80024ce <HAL_RCC_OscConfig+0x186>
 80024e0:	e795      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e2:	69e2      	ldr	r2, [r4, #28]
 80024e4:	2301      	movs	r3, #1
 80024e6:	4d5a      	ldr	r5, [pc, #360]	; (8002650 <HAL_RCC_OscConfig+0x308>)
 80024e8:	2a00      	cmp	r2, #0
 80024ea:	d010      	beq.n	800250e <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 80024ec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ee:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80024f0:	4313      	orrs	r3, r2
 80024f2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80024f4:	f7ff fac4 	bl	8001a80 <HAL_GetTick>
 80024f8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80024fc:	4233      	tst	r3, r6
 80024fe:	d000      	beq.n	8002502 <HAL_RCC_OscConfig+0x1ba>
 8002500:	e734      	b.n	800236c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002502:	f7ff fabd 	bl	8001a80 <HAL_GetTick>
 8002506:	1bc0      	subs	r0, r0, r7
 8002508:	2802      	cmp	r0, #2
 800250a:	d9f6      	bls.n	80024fa <HAL_RCC_OscConfig+0x1b2>
 800250c:	e77f      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 800250e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8002512:	439a      	bics	r2, r3
 8002514:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002516:	f7ff fab3 	bl	8001a80 <HAL_GetTick>
 800251a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800251e:	4233      	tst	r3, r6
 8002520:	d100      	bne.n	8002524 <HAL_RCC_OscConfig+0x1dc>
 8002522:	e723      	b.n	800236c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002524:	f7ff faac 	bl	8001a80 <HAL_GetTick>
 8002528:	1bc0      	subs	r0, r0, r7
 800252a:	2802      	cmp	r0, #2
 800252c:	d9f6      	bls.n	800251c <HAL_RCC_OscConfig+0x1d4>
 800252e:	e76e      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002530:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002534:	4d46      	ldr	r5, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x308>)
 8002536:	0552      	lsls	r2, r2, #21
 8002538:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800253a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253c:	4213      	tst	r3, r2
 800253e:	d108      	bne.n	8002552 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	69eb      	ldr	r3, [r5, #28]
 8002542:	4313      	orrs	r3, r2
 8002544:	61eb      	str	r3, [r5, #28]
 8002546:	69eb      	ldr	r3, [r5, #28]
 8002548:	4013      	ands	r3, r2
 800254a:	9303      	str	r3, [sp, #12]
 800254c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	2780      	movs	r7, #128	; 0x80
 8002554:	4e41      	ldr	r6, [pc, #260]	; (800265c <HAL_RCC_OscConfig+0x314>)
 8002556:	007f      	lsls	r7, r7, #1
 8002558:	6833      	ldr	r3, [r6, #0]
 800255a:	423b      	tst	r3, r7
 800255c:	d006      	beq.n	800256c <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255e:	68a3      	ldr	r3, [r4, #8]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d113      	bne.n	800258c <HAL_RCC_OscConfig+0x244>
 8002564:	6a2a      	ldr	r2, [r5, #32]
 8002566:	4313      	orrs	r3, r2
 8002568:	622b      	str	r3, [r5, #32]
 800256a:	e030      	b.n	80025ce <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256c:	6833      	ldr	r3, [r6, #0]
 800256e:	433b      	orrs	r3, r7
 8002570:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002572:	f7ff fa85 	bl	8001a80 <HAL_GetTick>
 8002576:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	6833      	ldr	r3, [r6, #0]
 800257a:	423b      	tst	r3, r7
 800257c:	d1ef      	bne.n	800255e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7ff fa7f 	bl	8001a80 <HAL_GetTick>
 8002582:	9b01      	ldr	r3, [sp, #4]
 8002584:	1ac0      	subs	r0, r0, r3
 8002586:	2864      	cmp	r0, #100	; 0x64
 8002588:	d9f6      	bls.n	8002578 <HAL_RCC_OscConfig+0x230>
 800258a:	e740      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
 800258c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258e:	2b00      	cmp	r3, #0
 8002590:	d114      	bne.n	80025bc <HAL_RCC_OscConfig+0x274>
 8002592:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002596:	4393      	bics	r3, r2
 8002598:	622b      	str	r3, [r5, #32]
 800259a:	6a2b      	ldr	r3, [r5, #32]
 800259c:	3203      	adds	r2, #3
 800259e:	4393      	bics	r3, r2
 80025a0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80025a2:	f7ff fa6d 	bl	8001a80 <HAL_GetTick>
 80025a6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	6a2b      	ldr	r3, [r5, #32]
 80025aa:	423b      	tst	r3, r7
 80025ac:	d025      	beq.n	80025fa <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7ff fa67 	bl	8001a80 <HAL_GetTick>
 80025b2:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_RCC_OscConfig+0x318>)
 80025b4:	1b80      	subs	r0, r0, r6
 80025b6:	4298      	cmp	r0, r3
 80025b8:	d9f6      	bls.n	80025a8 <HAL_RCC_OscConfig+0x260>
 80025ba:	e728      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d10b      	bne.n	80025d8 <HAL_RCC_OscConfig+0x290>
 80025c0:	6a29      	ldr	r1, [r5, #32]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	430b      	orrs	r3, r1
 80025c6:	622b      	str	r3, [r5, #32]
 80025c8:	6a2b      	ldr	r3, [r5, #32]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80025ce:	f7ff fa57 	bl	8001a80 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80025d4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	e00d      	b.n	80025f4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d8:	6a2b      	ldr	r3, [r5, #32]
 80025da:	4393      	bics	r3, r2
 80025dc:	2204      	movs	r2, #4
 80025de:	622b      	str	r3, [r5, #32]
 80025e0:	6a2b      	ldr	r3, [r5, #32]
 80025e2:	4393      	bics	r3, r2
 80025e4:	e7c0      	b.n	8002568 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7ff fa4b 	bl	8001a80 <HAL_GetTick>
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCC_OscConfig+0x318>)
 80025ec:	1b80      	subs	r0, r0, r6
 80025ee:	4298      	cmp	r0, r3
 80025f0:	d900      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2ac>
 80025f2:	e70c      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	6a2b      	ldr	r3, [r5, #32]
 80025f6:	423b      	tst	r3, r7
 80025f8:	d0f5      	beq.n	80025e6 <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 80025fa:	9b00      	ldr	r3, [sp, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d000      	beq.n	8002602 <HAL_RCC_OscConfig+0x2ba>
 8002600:	e6b8      	b.n	8002374 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002602:	69eb      	ldr	r3, [r5, #28]
 8002604:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_RCC_OscConfig+0x31c>)
 8002606:	4013      	ands	r3, r2
 8002608:	61eb      	str	r3, [r5, #28]
 800260a:	e6b3      	b.n	8002374 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800260c:	f7ff fa38 	bl	8001a80 <HAL_GetTick>
 8002610:	1bc0      	subs	r0, r0, r7
 8002612:	2802      	cmp	r0, #2
 8002614:	d800      	bhi.n	8002618 <HAL_RCC_OscConfig+0x2d0>
 8002616:	e6c0      	b.n	800239a <HAL_RCC_OscConfig+0x52>
 8002618:	e6f9      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800261a:	3205      	adds	r2, #5
 800261c:	d103      	bne.n	8002626 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 800261e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002620:	439a      	bics	r2, r3
 8002622:	636a      	str	r2, [r5, #52]	; 0x34
 8002624:	e6bd      	b.n	80023a2 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002626:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002628:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800262a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800262c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800262e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002630:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002632:	4393      	bics	r3, r2
 8002634:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002636:	f7ff fa23 	bl	8001a80 <HAL_GetTick>
 800263a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800263c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800263e:	4233      	tst	r3, r6
 8002640:	d100      	bne.n	8002644 <HAL_RCC_OscConfig+0x2fc>
 8002642:	e6b5      	b.n	80023b0 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002644:	f7ff fa1c 	bl	8001a80 <HAL_GetTick>
 8002648:	1bc0      	subs	r0, r0, r7
 800264a:	2802      	cmp	r0, #2
 800264c:	d9f6      	bls.n	800263c <HAL_RCC_OscConfig+0x2f4>
 800264e:	e6de      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
 8002650:	40021000 	.word	0x40021000
 8002654:	fffeffff 	.word	0xfffeffff
 8002658:	fffbffff 	.word	0xfffbffff
 800265c:	40007000 	.word	0x40007000
 8002660:	00001388 	.word	0x00001388
 8002664:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002668:	200c      	movs	r0, #12
 800266a:	4a35      	ldr	r2, [pc, #212]	; (8002740 <HAL_RCC_OscConfig+0x3f8>)
 800266c:	6851      	ldr	r1, [r2, #4]
 800266e:	0015      	movs	r5, r2
 8002670:	4001      	ands	r1, r0
 8002672:	2908      	cmp	r1, #8
 8002674:	d047      	beq.n	8002706 <HAL_RCC_OscConfig+0x3be>
 8002676:	4a33      	ldr	r2, [pc, #204]	; (8002744 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002678:	2b02      	cmp	r3, #2
 800267a:	d132      	bne.n	80026e2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 800267c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002680:	4013      	ands	r3, r2
 8002682:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002684:	f7ff f9fc 	bl	8001a80 <HAL_GetTick>
 8002688:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268a:	04b6      	lsls	r6, r6, #18
 800268c:	682b      	ldr	r3, [r5, #0]
 800268e:	4233      	tst	r3, r6
 8002690:	d121      	bne.n	80026d6 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002692:	220f      	movs	r2, #15
 8002694:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002696:	4393      	bics	r3, r2
 8002698:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800269a:	4313      	orrs	r3, r2
 800269c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800269e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026a2:	686a      	ldr	r2, [r5, #4]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	4928      	ldr	r1, [pc, #160]	; (8002748 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026aa:	400a      	ands	r2, r1
 80026ac:	4313      	orrs	r3, r2
 80026ae:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	682a      	ldr	r2, [r5, #0]
 80026b4:	045b      	lsls	r3, r3, #17
 80026b6:	4313      	orrs	r3, r2
 80026b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026ba:	f7ff f9e1 	bl	8001a80 <HAL_GetTick>
 80026be:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c0:	04a4      	lsls	r4, r4, #18
 80026c2:	682b      	ldr	r3, [r5, #0]
 80026c4:	4223      	tst	r3, r4
 80026c6:	d000      	beq.n	80026ca <HAL_RCC_OscConfig+0x382>
 80026c8:	e676      	b.n	80023b8 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ca:	f7ff f9d9 	bl	8001a80 <HAL_GetTick>
 80026ce:	1b80      	subs	r0, r0, r6
 80026d0:	2802      	cmp	r0, #2
 80026d2:	d9f6      	bls.n	80026c2 <HAL_RCC_OscConfig+0x37a>
 80026d4:	e69b      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d6:	f7ff f9d3 	bl	8001a80 <HAL_GetTick>
 80026da:	1bc0      	subs	r0, r0, r7
 80026dc:	2802      	cmp	r0, #2
 80026de:	d9d5      	bls.n	800268c <HAL_RCC_OscConfig+0x344>
 80026e0:	e695      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 80026e2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e4:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4013      	ands	r3, r2
 80026e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026ea:	f7ff f9c9 	bl	8001a80 <HAL_GetTick>
 80026ee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f0:	04a4      	lsls	r4, r4, #18
 80026f2:	682b      	ldr	r3, [r5, #0]
 80026f4:	4223      	tst	r3, r4
 80026f6:	d100      	bne.n	80026fa <HAL_RCC_OscConfig+0x3b2>
 80026f8:	e65e      	b.n	80023b8 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7ff f9c1 	bl	8001a80 <HAL_GetTick>
 80026fe:	1b80      	subs	r0, r0, r6
 8002700:	2802      	cmp	r0, #2
 8002702:	d9f6      	bls.n	80026f2 <HAL_RCC_OscConfig+0x3aa>
 8002704:	e683      	b.n	800240e <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8002706:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002708:	2b01      	cmp	r3, #1
 800270a:	d100      	bne.n	800270e <HAL_RCC_OscConfig+0x3c6>
 800270c:	e622      	b.n	8002354 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8002710:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002714:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8002716:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002718:	4019      	ands	r1, r3
        return HAL_ERROR;
 800271a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800271c:	42a9      	cmp	r1, r5
 800271e:	d000      	beq.n	8002722 <HAL_RCC_OscConfig+0x3da>
 8002720:	e618      	b.n	8002354 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002722:	210f      	movs	r1, #15
 8002724:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002728:	428a      	cmp	r2, r1
 800272a:	d000      	beq.n	800272e <HAL_RCC_OscConfig+0x3e6>
 800272c:	e612      	b.n	8002354 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800272e:	20f0      	movs	r0, #240	; 0xf0
 8002730:	0380      	lsls	r0, r0, #14
 8002732:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002734:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002736:	1a1b      	subs	r3, r3, r0
 8002738:	1e58      	subs	r0, r3, #1
 800273a:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 800273c:	b2d8      	uxtb	r0, r3
 800273e:	e609      	b.n	8002354 <HAL_RCC_OscConfig+0xc>
 8002740:	40021000 	.word	0x40021000
 8002744:	feffffff 	.word	0xfeffffff
 8002748:	ffc2ffff 	.word	0xffc2ffff

0800274c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800274e:	4c14      	ldr	r4, [pc, #80]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8002750:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002752:	2210      	movs	r2, #16
 8002754:	0021      	movs	r1, r4
 8002756:	4668      	mov	r0, sp
 8002758:	f001 f8ba 	bl	80038d0 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800275c:	0021      	movs	r1, r4
 800275e:	ad04      	add	r5, sp, #16
 8002760:	2210      	movs	r2, #16
 8002762:	3110      	adds	r1, #16
 8002764:	0028      	movs	r0, r5
 8002766:	f001 f8b3 	bl	80038d0 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800276a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800276c:	4e0d      	ldr	r6, [pc, #52]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x58>)
 800276e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002770:	401a      	ands	r2, r3
 8002772:	2a08      	cmp	r2, #8
 8002774:	d111      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002776:	200f      	movs	r0, #15
 8002778:	466a      	mov	r2, sp
 800277a:	0c99      	lsrs	r1, r3, #18
 800277c:	4001      	ands	r1, r0
 800277e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002780:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002782:	4002      	ands	r2, r0
 8002784:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002786:	03db      	lsls	r3, r3, #15
 8002788:	d505      	bpl.n	8002796 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800278c:	f7fd fcd0 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002790:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002792:	b008      	add	sp, #32
 8002794:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <HAL_RCC_GetSysClockFreq+0x60>)
 8002798:	e7fa      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800279c:	e7f9      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x46>
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	0800393c 	.word	0x0800393c
 80027a4:	40021000 	.word	0x40021000
 80027a8:	007a1200 	.word	0x007a1200
 80027ac:	003d0900 	.word	0x003d0900

080027b0 <HAL_RCC_ClockConfig>:
{
 80027b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027b2:	0005      	movs	r5, r0
 80027b4:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80027ba:	2001      	movs	r0, #1
}
 80027bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027be:	2201      	movs	r2, #1
 80027c0:	4c37      	ldr	r4, [pc, #220]	; (80028a0 <HAL_RCC_ClockConfig+0xf0>)
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	4013      	ands	r3, r2
 80027c6:	428b      	cmp	r3, r1
 80027c8:	d31c      	bcc.n	8002804 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ca:	6829      	ldr	r1, [r5, #0]
 80027cc:	078b      	lsls	r3, r1, #30
 80027ce:	d422      	bmi.n	8002816 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d0:	07cb      	lsls	r3, r1, #31
 80027d2:	d42f      	bmi.n	8002834 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	2301      	movs	r3, #1
 80027d6:	6822      	ldr	r2, [r4, #0]
 80027d8:	401a      	ands	r2, r3
 80027da:	42ba      	cmp	r2, r7
 80027dc:	d851      	bhi.n	8002882 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027de:	682b      	ldr	r3, [r5, #0]
 80027e0:	4c30      	ldr	r4, [pc, #192]	; (80028a4 <HAL_RCC_ClockConfig+0xf4>)
 80027e2:	075b      	lsls	r3, r3, #29
 80027e4:	d454      	bmi.n	8002890 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027e6:	f7ff ffb1 	bl	800274c <HAL_RCC_GetSysClockFreq>
 80027ea:	6863      	ldr	r3, [r4, #4]
 80027ec:	4a2e      	ldr	r2, [pc, #184]	; (80028a8 <HAL_RCC_ClockConfig+0xf8>)
 80027ee:	061b      	lsls	r3, r3, #24
 80027f0:	0f1b      	lsrs	r3, r3, #28
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	40d8      	lsrs	r0, r3
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_RCC_ClockConfig+0xfc>)
 80027f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7ff f900 	bl	8001a00 <HAL_InitTick>
  return HAL_OK;
 8002800:	2000      	movs	r0, #0
 8002802:	e7db      	b.n	80027bc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	4393      	bics	r3, r2
 8002808:	430b      	orrs	r3, r1
 800280a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	4013      	ands	r3, r2
 8002810:	428b      	cmp	r3, r1
 8002812:	d1d2      	bne.n	80027ba <HAL_RCC_ClockConfig+0xa>
 8002814:	e7d9      	b.n	80027ca <HAL_RCC_ClockConfig+0x1a>
 8002816:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	074b      	lsls	r3, r1, #29
 800281a:	d504      	bpl.n	8002826 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800281c:	23e0      	movs	r3, #224	; 0xe0
 800281e:	6850      	ldr	r0, [r2, #4]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4303      	orrs	r3, r0
 8002824:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002826:	20f0      	movs	r0, #240	; 0xf0
 8002828:	6853      	ldr	r3, [r2, #4]
 800282a:	4383      	bics	r3, r0
 800282c:	68a8      	ldr	r0, [r5, #8]
 800282e:	4303      	orrs	r3, r0
 8002830:	6053      	str	r3, [r2, #4]
 8002832:	e7cd      	b.n	80027d0 <HAL_RCC_ClockConfig+0x20>
 8002834:	4e1b      	ldr	r6, [pc, #108]	; (80028a4 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002836:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002838:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283a:	2a01      	cmp	r2, #1
 800283c:	d119      	bne.n	8002872 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	039b      	lsls	r3, r3, #14
 8002840:	d5bb      	bpl.n	80027ba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002842:	2103      	movs	r1, #3
 8002844:	6873      	ldr	r3, [r6, #4]
 8002846:	438b      	bics	r3, r1
 8002848:	4313      	orrs	r3, r2
 800284a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800284c:	f7ff f918 	bl	8001a80 <HAL_GetTick>
 8002850:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	230c      	movs	r3, #12
 8002854:	6872      	ldr	r2, [r6, #4]
 8002856:	401a      	ands	r2, r3
 8002858:	686b      	ldr	r3, [r5, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	429a      	cmp	r2, r3
 800285e:	d0b9      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7ff f90e 	bl	8001a80 <HAL_GetTick>
 8002864:	9b01      	ldr	r3, [sp, #4]
 8002866:	1ac0      	subs	r0, r0, r3
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_RCC_ClockConfig+0x100>)
 800286a:	4298      	cmp	r0, r3
 800286c:	d9f1      	bls.n	8002852 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800286e:	2003      	movs	r0, #3
 8002870:	e7a4      	b.n	80027bc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002872:	2a02      	cmp	r2, #2
 8002874:	d102      	bne.n	800287c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	019b      	lsls	r3, r3, #6
 8002878:	d4e3      	bmi.n	8002842 <HAL_RCC_ClockConfig+0x92>
 800287a:	e79e      	b.n	80027ba <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	079b      	lsls	r3, r3, #30
 800287e:	d4e0      	bmi.n	8002842 <HAL_RCC_ClockConfig+0x92>
 8002880:	e79b      	b.n	80027ba <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	439a      	bics	r2, r3
 8002886:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002888:	6822      	ldr	r2, [r4, #0]
 800288a:	421a      	tst	r2, r3
 800288c:	d0a7      	beq.n	80027de <HAL_RCC_ClockConfig+0x2e>
 800288e:	e794      	b.n	80027ba <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	6863      	ldr	r3, [r4, #4]
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <HAL_RCC_ClockConfig+0x104>)
 8002894:	4013      	ands	r3, r2
 8002896:	68ea      	ldr	r2, [r5, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	6063      	str	r3, [r4, #4]
 800289c:	e7a3      	b.n	80027e6 <HAL_RCC_ClockConfig+0x36>
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08003baa 	.word	0x08003baa
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	00001388 	.word	0x00001388
 80028b4:	fffff8ff 	.word	0xfffff8ff

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	055b      	lsls	r3, r3, #21
 80028c0:	0f5b      	lsrs	r3, r3, #29
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028c6:	6810      	ldr	r0, [r2, #0]
 80028c8:	40d8      	lsrs	r0, r3
}    
 80028ca:	4770      	bx	lr
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08003bba 	.word	0x08003bba
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028da:	6803      	ldr	r3, [r0, #0]
{
 80028dc:	b085      	sub	sp, #20
 80028de:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028e0:	03db      	lsls	r3, r3, #15
 80028e2:	d528      	bpl.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e8:	4c37      	ldr	r4, [pc, #220]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80028ea:	0552      	lsls	r2, r2, #21
 80028ec:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f0:	4213      	tst	r3, r2
 80028f2:	d108      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	69e3      	ldr	r3, [r4, #28]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61e3      	str	r3, [r4, #28]
 80028fa:	69e3      	ldr	r3, [r4, #28]
 80028fc:	4013      	ands	r3, r2
 80028fe:	9303      	str	r3, [sp, #12]
 8002900:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002902:	2301      	movs	r3, #1
 8002904:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	2780      	movs	r7, #128	; 0x80
 8002908:	4e30      	ldr	r6, [pc, #192]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800290a:	007f      	lsls	r7, r7, #1
 800290c:	6833      	ldr	r3, [r6, #0]
 800290e:	423b      	tst	r3, r7
 8002910:	d026      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002912:	22c0      	movs	r2, #192	; 0xc0
 8002914:	6a23      	ldr	r3, [r4, #32]
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	4e2d      	ldr	r6, [pc, #180]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800291c:	d132      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291e:	6a23      	ldr	r3, [r4, #32]
 8002920:	401e      	ands	r6, r3
 8002922:	686b      	ldr	r3, [r5, #4]
 8002924:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002926:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002928:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800292a:	2b01      	cmp	r3, #1
 800292c:	d103      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292e:	69e3      	ldr	r3, [r4, #28]
 8002930:	4a28      	ldr	r2, [pc, #160]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8002932:	4013      	ands	r3, r2
 8002934:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002936:	682a      	ldr	r2, [r5, #0]
 8002938:	07d3      	lsls	r3, r2, #31
 800293a:	d506      	bpl.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293c:	2003      	movs	r0, #3
 800293e:	4922      	ldr	r1, [pc, #136]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8002940:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002942:	4383      	bics	r3, r0
 8002944:	68a8      	ldr	r0, [r5, #8]
 8002946:	4303      	orrs	r3, r0
 8002948:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800294a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800294c:	0693      	lsls	r3, r2, #26
 800294e:	d517      	bpl.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002950:	2110      	movs	r1, #16
 8002952:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8002954:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002956:	438b      	bics	r3, r1
 8002958:	68e9      	ldr	r1, [r5, #12]
 800295a:	430b      	orrs	r3, r1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	e00f      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002960:	6833      	ldr	r3, [r6, #0]
 8002962:	433b      	orrs	r3, r7
 8002964:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002966:	f7ff f88b 	bl	8001a80 <HAL_GetTick>
 800296a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	6833      	ldr	r3, [r6, #0]
 800296e:	423b      	tst	r3, r7
 8002970:	d1cf      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002972:	f7ff f885 	bl	8001a80 <HAL_GetTick>
 8002976:	9b01      	ldr	r3, [sp, #4]
 8002978:	1ac0      	subs	r0, r0, r3
 800297a:	2864      	cmp	r0, #100	; 0x64
 800297c:	d9f6      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 800297e:	2003      	movs	r0, #3
}
 8002980:	b005      	add	sp, #20
 8002982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002984:	6869      	ldr	r1, [r5, #4]
 8002986:	400a      	ands	r2, r1
 8002988:	429a      	cmp	r2, r3
 800298a:	d0c8      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800298c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800298e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002990:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002992:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002994:	025b      	lsls	r3, r3, #9
 8002996:	4303      	orrs	r3, r0
 8002998:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800299a:	6a23      	ldr	r3, [r4, #32]
 800299c:	480e      	ldr	r0, [pc, #56]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800299e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a0:	4003      	ands	r3, r0
 80029a2:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80029a4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029a6:	07d3      	lsls	r3, r2, #31
 80029a8:	d5b9      	bpl.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80029aa:	f7ff f869 	bl	8001a80 <HAL_GetTick>
 80029ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b0:	2202      	movs	r2, #2
 80029b2:	6a23      	ldr	r3, [r4, #32]
 80029b4:	4213      	tst	r3, r2
 80029b6:	d1b2      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7ff f862 	bl	8001a80 <HAL_GetTick>
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80029be:	1bc0      	subs	r0, r0, r7
 80029c0:	4298      	cmp	r0, r3
 80029c2:	d9f5      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80029c4:	e7db      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
 80029d0:	fffffcff 	.word	0xfffffcff
 80029d4:	efffffff 	.word	0xefffffff
 80029d8:	fffeffff 	.word	0xfffeffff
 80029dc:	00001388 	.word	0x00001388

080029e0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029e0:	21e0      	movs	r1, #224	; 0xe0
 80029e2:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80029e4:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	438a      	bics	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ec:	2282      	movs	r2, #130	; 0x82
 80029ee:	6841      	ldr	r1, [r0, #4]
 80029f0:	0052      	lsls	r2, r2, #1
 80029f2:	4291      	cmp	r1, r2
 80029f4:	d10c      	bne.n	8002a10 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	6882      	ldr	r2, [r0, #8]
 80029fa:	0209      	lsls	r1, r1, #8
 80029fc:	428a      	cmp	r2, r1
 80029fe:	d003      	beq.n	8002a08 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	00c9      	lsls	r1, r1, #3
 8002a04:	428a      	cmp	r2, r1
 8002a06:	d103      	bne.n	8002a10 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a08:	2140      	movs	r1, #64	; 0x40
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002a14:	0189      	lsls	r1, r1, #6
 8002a16:	428a      	cmp	r2, r1
 8002a18:	d106      	bne.n	8002a28 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	4c07      	ldr	r4, [pc, #28]	; (8002a3c <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8002a1e:	4021      	ands	r1, r4
 8002a20:	6019      	str	r1, [r3, #0]
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a28:	0003      	movs	r3, r0
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	335d      	adds	r3, #93	; 0x5d
 8002a2e:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a30:	2300      	movs	r3, #0
 8002a32:	305c      	adds	r0, #92	; 0x5c
 8002a34:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8002a36:	2003      	movs	r0, #3
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	ffffdfff 	.word	0xffffdfff

08002a40 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	0004      	movs	r4, r0
 8002a44:	000d      	movs	r5, r1
 8002a46:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a48:	2680      	movs	r6, #128	; 0x80
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	6898      	ldr	r0, [r3, #8]
 8002a4e:	4030      	ands	r0, r6
 8002a50:	d009      	beq.n	8002a66 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	1c6a      	adds	r2, r5, #1
 8002a54:	d0fa      	beq.n	8002a4c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a56:	f7ff f813 	bl	8001a80 <HAL_GetTick>
 8002a5a:	1bc0      	subs	r0, r0, r7
 8002a5c:	4285      	cmp	r5, r0
 8002a5e:	d8f4      	bhi.n	8002a4a <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8002a60:	0020      	movs	r0, r4
 8002a62:	f7ff ffbd 	bl	80029e0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8002a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a68 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a6a:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002a6c:	0005      	movs	r5, r0
 8002a6e:	000c      	movs	r4, r1
 8002a70:	0016      	movs	r6, r2
 8002a72:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a74:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8002a76:	682b      	ldr	r3, [r5, #0]
 8002a78:	6898      	ldr	r0, [r3, #8]
 8002a7a:	4020      	ands	r0, r4
 8002a7c:	d00d      	beq.n	8002a9a <SPI_WaitFifoStateUntilTimeout.constprop.10+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a7e:	42bc      	cmp	r4, r7
 8002a80:	d100      	bne.n	8002a84 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002a82:	7b1a      	ldrb	r2, [r3, #12]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a84:	1c72      	adds	r2, r6, #1
 8002a86:	d0f7      	beq.n	8002a78 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a88:	f7fe fffa 	bl	8001a80 <HAL_GetTick>
 8002a8c:	9b01      	ldr	r3, [sp, #4]
 8002a8e:	1ac0      	subs	r0, r0, r3
 8002a90:	4286      	cmp	r6, r0
 8002a92:	d8f0      	bhi.n	8002a76 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
 8002a94:	0028      	movs	r0, r5
 8002a96:	f7ff ffa3 	bl	80029e0 <SPI_WaitFifoStateUntilTimeout.part.1>
      }
    }
  }

  return HAL_OK;
}
 8002a9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002a9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a9e:	0013      	movs	r3, r2
{
 8002aa0:	000d      	movs	r5, r1
 8002aa2:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aa4:	000a      	movs	r2, r1
 8002aa6:	21c0      	movs	r1, #192	; 0xc0
 8002aa8:	0149      	lsls	r1, r1, #5
{
 8002aaa:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aac:	f7ff ffdc 	bl	8002a68 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d005      	beq.n	8002ac0 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ab8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aba:	4313      	orrs	r3, r2
 8002abc:	6623      	str	r3, [r4, #96]	; 0x60
 8002abe:	e00f      	b.n	8002ae0 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac0:	0032      	movs	r2, r6
 8002ac2:	0029      	movs	r1, r5
 8002ac4:	0020      	movs	r0, r4
 8002ac6:	f7ff ffbb 	bl	8002a40 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d1f2      	bne.n	8002ab4 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ace:	21c0      	movs	r1, #192	; 0xc0
 8002ad0:	0033      	movs	r3, r6
 8002ad2:	002a      	movs	r2, r5
 8002ad4:	00c9      	lsls	r1, r1, #3
 8002ad6:	0020      	movs	r0, r4
 8002ad8:	f7ff ffc6 	bl	8002a68 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	d1e9      	bne.n	8002ab4 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ae4 <HAL_SPI_Init>:
{
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002aea:	2c00      	cmp	r4, #0
 8002aec:	d04e      	beq.n	8002b8c <HAL_SPI_Init+0xa8>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aee:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af0:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af4:	355d      	adds	r5, #93	; 0x5d
 8002af6:	782b      	ldrb	r3, [r5, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8002afe:	0022      	movs	r2, r4
 8002b00:	325c      	adds	r2, #92	; 0x5c
 8002b02:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8002b04:	0020      	movs	r0, r4
 8002b06:	f7fe fd2b 	bl	8001560 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002b0a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002b0c:	2140      	movs	r1, #64	; 0x40
 8002b0e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002b10:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002b12:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b14:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002b16:	438b      	bics	r3, r1
 8002b18:	21e0      	movs	r1, #224	; 0xe0
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	00c9      	lsls	r1, r1, #3
 8002b1e:	2300      	movs	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b20:	4288      	cmp	r0, r1
 8002b22:	d834      	bhi.n	8002b8e <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b24:	2680      	movs	r6, #128	; 0x80
 8002b26:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b28:	4288      	cmp	r0, r1
 8002b2a:	d101      	bne.n	8002b30 <HAL_SPI_Init+0x4c>
 8002b2c:	e001      	b.n	8002b32 <HAL_SPI_Init+0x4e>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b2e:	001e      	movs	r6, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b30:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002b32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d104      	bne.n	8002b42 <HAL_SPI_Init+0x5e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002b38:	3302      	adds	r3, #2
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b3a:	4288      	cmp	r0, r1
 8002b3c:	d800      	bhi.n	8002b40 <HAL_SPI_Init+0x5c>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002b42:	68a7      	ldr	r7, [r4, #8]
 8002b44:	6863      	ldr	r3, [r4, #4]
 8002b46:	69a1      	ldr	r1, [r4, #24]
 8002b48:	433b      	orrs	r3, r7
 8002b4a:	6927      	ldr	r7, [r4, #16]
 8002b4c:	433b      	orrs	r3, r7
 8002b4e:	6967      	ldr	r7, [r4, #20]
 8002b50:	433b      	orrs	r3, r7
 8002b52:	69e7      	ldr	r7, [r4, #28]
 8002b54:	433b      	orrs	r3, r7
 8002b56:	6a27      	ldr	r7, [r4, #32]
 8002b58:	433b      	orrs	r3, r7
 8002b5a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002b5c:	433b      	orrs	r3, r7
 8002b5e:	2780      	movs	r7, #128	; 0x80
 8002b60:	00bf      	lsls	r7, r7, #2
 8002b62:	400f      	ands	r7, r1
 8002b64:	433b      	orrs	r3, r7
 8002b66:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b6a:	0c09      	lsrs	r1, r1, #16
 8002b6c:	4318      	orrs	r0, r3
 8002b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b70:	4318      	orrs	r0, r3
 8002b72:	2304      	movs	r3, #4
 8002b74:	4019      	ands	r1, r3
 8002b76:	4301      	orrs	r1, r0
 8002b78:	430e      	orrs	r6, r1
 8002b7a:	6056      	str	r6, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b7c:	69d3      	ldr	r3, [r2, #28]
 8002b7e:	4907      	ldr	r1, [pc, #28]	; (8002b9c <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b80:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b82:	400b      	ands	r3, r1
 8002b84:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002b86:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b88:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b8a:	702b      	strb	r3, [r5, #0]
}
 8002b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b8e:	26f0      	movs	r6, #240	; 0xf0
 8002b90:	0136      	lsls	r6, r6, #4
 8002b92:	42b0      	cmp	r0, r6
 8002b94:	d1cb      	bne.n	8002b2e <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b96:	001e      	movs	r6, r3
 8002b98:	e7cb      	b.n	8002b32 <HAL_SPI_Init+0x4e>
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	fffff7ff 	.word	0xfffff7ff

08002ba0 <HAL_SPI_Transmit_DMA>:
{
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8002ba2:	0005      	movs	r5, r0
 8002ba4:	355c      	adds	r5, #92	; 0x5c
 8002ba6:	782b      	ldrb	r3, [r5, #0]
{
 8002ba8:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8002baa:	2002      	movs	r0, #2
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d056      	beq.n	8002c5e <HAL_SPI_Transmit_DMA+0xbe>
 8002bb0:	2301      	movs	r3, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8002bb2:	0026      	movs	r6, r4
  __HAL_LOCK(hspi);
 8002bb4:	702b      	strb	r3, [r5, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8002bb6:	365d      	adds	r6, #93	; 0x5d
 8002bb8:	7833      	ldrb	r3, [r6, #0]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d14c      	bne.n	8002c5a <HAL_SPI_Transmit_DMA+0xba>
    errorcode = HAL_ERROR;
 8002bc0:	0018      	movs	r0, r3
  if ((pData == NULL) || (Size == 0U))
 8002bc2:	2900      	cmp	r1, #0
 8002bc4:	d049      	beq.n	8002c5a <HAL_SPI_Transmit_DMA+0xba>
 8002bc6:	2a00      	cmp	r2, #0
 8002bc8:	d047      	beq.n	8002c5a <HAL_SPI_Transmit_DMA+0xba>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bca:	3302      	adds	r3, #2
 8002bcc:	7033      	strb	r3, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bce:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8002bd0:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bd2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8002bd4:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8002bd6:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bd8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bda:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002bdc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bde:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002be0:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8002be2:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002be4:	87d3      	strh	r3, [r2, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	68a0      	ldr	r0, [r4, #8]
 8002bea:	6822      	ldr	r2, [r4, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	4298      	cmp	r0, r3
 8002bf0:	d104      	bne.n	8002bfc <HAL_SPI_Transmit_DMA+0x5c>
    SPI_1LINE_TX(hspi);
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	6810      	ldr	r0, [r2, #0]
 8002bf6:	01db      	lsls	r3, r3, #7
 8002bf8:	4303      	orrs	r3, r0
 8002bfa:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002bfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bfe:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <HAL_SPI_Transmit_DMA+0xf4>)
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002c00:	6857      	ldr	r7, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002c02:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_SPI_Transmit_DMA+0xf8>)
 8002c06:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <HAL_SPI_Transmit_DMA+0xfc>)
 8002c0a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	6343      	str	r3, [r0, #52]	; 0x34
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_SPI_Transmit_DMA+0x100>)
 8002c12:	401f      	ands	r7, r3
 8002c14:	469c      	mov	ip, r3
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002c16:	23e0      	movs	r3, #224	; 0xe0
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002c18:	6057      	str	r7, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002c1a:	68e7      	ldr	r7, [r4, #12]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	429f      	cmp	r7, r3
 8002c20:	d80e      	bhi.n	8002c40 <HAL_SPI_Transmit_DMA+0xa0>
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	6947      	ldr	r7, [r0, #20]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	429f      	cmp	r7, r3
 8002c2a:	d109      	bne.n	8002c40 <HAL_SPI_Transmit_DMA+0xa0>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002c2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c2e:	07db      	lsls	r3, r3, #31
 8002c30:	d416      	bmi.n	8002c60 <HAL_SPI_Transmit_DMA+0xc0>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002c32:	4667      	mov	r7, ip
 8002c34:	6853      	ldr	r3, [r2, #4]
 8002c36:	403b      	ands	r3, r7
 8002c38:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002c3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c3c:	085b      	lsrs	r3, r3, #1
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002c3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
                                 hspi->TxXferCount))
 8002c40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c42:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 8002c44:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c46:	f7ff f8f7 	bl	8001e38 <HAL_DMA_Start_IT>
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	d011      	beq.n	8002c72 <HAL_SPI_Transmit_DMA+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c4e:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 8002c50:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c52:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002c54:	4313      	orrs	r3, r2
 8002c56:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8002c58:	7030      	strb	r0, [r6, #0]
  __HAL_UNLOCK(hspi);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	702b      	strb	r3, [r5, #0]
}
 8002c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	6857      	ldr	r7, [r2, #4]
 8002c64:	01db      	lsls	r3, r3, #7
 8002c66:	433b      	orrs	r3, r7
 8002c68:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002c6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3301      	adds	r3, #1
 8002c70:	e7e5      	b.n	8002c3e <HAL_SPI_Transmit_DMA+0x9e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	4211      	tst	r1, r2
 8002c7a:	d102      	bne.n	8002c82 <HAL_SPI_Transmit_DMA+0xe2>
    __HAL_SPI_ENABLE(hspi);
 8002c7c:	6819      	ldr	r1, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002c82:	2220      	movs	r2, #32
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	e7e2      	b.n	8002c5a <HAL_SPI_Transmit_DMA+0xba>
 8002c94:	08002ca9 	.word	0x08002ca9
 8002c98:	08002cd9 	.word	0x08002cd9
 8002c9c:	08002cb5 	.word	0x08002cb5
 8002ca0:	ffffbfff 	.word	0xffffbfff

08002ca4 <HAL_SPI_TxCpltCallback>:
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_SPI_TxHalfCpltCallback>:
 8002ca6:	4770      	bx	lr

08002ca8 <SPI_DMAHalfTransmitCplt>:
{
 8002ca8:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002caa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002cac:	f7ff fffb 	bl	8002ca6 <HAL_SPI_TxHalfCpltCallback>
}
 8002cb0:	bd10      	pop	{r4, pc}

08002cb2 <HAL_SPI_ErrorCallback>:
 8002cb2:	4770      	bx	lr

08002cb4 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002cb4:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cb6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002cb8:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002cba:	6802      	ldr	r2, [r0, #0]
 8002cbc:	6853      	ldr	r3, [r2, #4]
 8002cbe:	438b      	bics	r3, r1
 8002cc0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002cca:	0003      	movs	r3, r0
 8002ccc:	2201      	movs	r2, #1
 8002cce:	335d      	adds	r3, #93	; 0x5d
 8002cd0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8002cd2:	f7ff ffee 	bl	8002cb2 <HAL_SPI_ErrorCallback>
}
 8002cd6:	bd10      	pop	{r4, pc}

08002cd8 <SPI_DMATransmitCplt>:
{
 8002cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cda:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cdc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8002cde:	f7fe fecf 	bl	8001a80 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002ce2:	682b      	ldr	r3, [r5, #0]
 8002ce4:	2520      	movs	r5, #32
 8002ce6:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8002ce8:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002cea:	422b      	tst	r3, r5
 8002cec:	d127      	bne.n	8002d3e <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cee:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	43a9      	bics	r1, r5
 8002cf6:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	4381      	bics	r1, r0
 8002cfc:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002cfe:	0020      	movs	r0, r4
 8002d00:	2164      	movs	r1, #100	; 0x64
 8002d02:	f7ff fecb 	bl	8002a9c <SPI_EndRxTxTransaction>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d002      	beq.n	8002d10 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d0c:	431d      	orrs	r5, r3
 8002d0e:	6625      	str	r5, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d10:	68a3      	ldr	r3, [r4, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	9201      	str	r2, [sp, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002d28:	0023      	movs	r3, r4
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	335d      	adds	r3, #93	; 0x5d
 8002d2e:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d30:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8002d36:	0020      	movs	r0, r4
 8002d38:	f7ff ffbb 	bl	8002cb2 <HAL_SPI_ErrorCallback>
}
 8002d3c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8002d3e:	0020      	movs	r0, r4
 8002d40:	f7ff ffb0 	bl	8002ca4 <HAL_SPI_TxCpltCallback>
 8002d44:	e7fa      	b.n	8002d3c <SPI_DMATransmitCplt+0x64>
	...

08002d48 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	0001      	movs	r1, r0
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	313d      	adds	r1, #61	; 0x3d
 8002d4e:	700b      	strb	r3, [r1, #0]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d50:	6803      	ldr	r3, [r0, #0]
 8002d52:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <HAL_TIM_Base_Stop+0x2c>)
 8002d54:	6a18      	ldr	r0, [r3, #32]
 8002d56:	4210      	tst	r0, r2
 8002d58:	d107      	bne.n	8002d6a <HAL_TIM_Base_Stop+0x22>
 8002d5a:	6a18      	ldr	r0, [r3, #32]
 8002d5c:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <HAL_TIM_Base_Stop+0x30>)
 8002d5e:	4210      	tst	r0, r2
 8002d60:	d103      	bne.n	8002d6a <HAL_TIM_Base_Stop+0x22>
 8002d62:	2001      	movs	r0, #1
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4382      	bics	r2, r0
 8002d68:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
}
 8002d6c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d6e:	700b      	strb	r3, [r1, #0]
}
 8002d70:	4770      	bx	lr
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	00001111 	.word	0x00001111
 8002d78:	00000444 	.word	0x00000444

08002d7c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d80:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d82:	68d9      	ldr	r1, [r3, #12]
 8002d84:	4311      	orrs	r1, r2
 8002d86:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d88:	6899      	ldr	r1, [r3, #8]
 8002d8a:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8c:	2906      	cmp	r1, #6
 8002d8e:	d002      	beq.n	8002d96 <HAL_TIM_Base_Start_IT+0x1a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002d96:	2000      	movs	r0, #0
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	6803      	ldr	r3, [r0, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	438a      	bics	r2, r1
 8002da4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002da6:	6a18      	ldr	r0, [r3, #32]
 8002da8:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_TIM_Base_Stop_IT+0x24>)
 8002daa:	4210      	tst	r0, r2
 8002dac:	d106      	bne.n	8002dbc <HAL_TIM_Base_Stop_IT+0x20>
 8002dae:	6a18      	ldr	r0, [r3, #32]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_TIM_Base_Stop_IT+0x28>)
 8002db2:	4210      	tst	r0, r2
 8002db4:	d102      	bne.n	8002dbc <HAL_TIM_Base_Stop_IT+0x20>
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	438a      	bics	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	4770      	bx	lr
 8002dc0:	00001111 	.word	0x00001111
 8002dc4:	00000444 	.word	0x00000444

08002dc8 <HAL_TIM_PeriodElapsedCallback>:
 8002dc8:	4770      	bx	lr

08002dca <HAL_TIM_OC_DelayElapsedCallback>:
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_IC_CaptureCallback>:
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_PWM_PulseFinishedCallback>:
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIM_TriggerCallback>:
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	6803      	ldr	r3, [r0, #0]
{
 8002dd6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dd8:	6919      	ldr	r1, [r3, #16]
{
 8002dda:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ddc:	4211      	tst	r1, r2
 8002dde:	d00e      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	4211      	tst	r1, r2
 8002de4:	d00b      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002de6:	3a05      	subs	r2, #5
 8002de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dea:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dec:	3204      	adds	r2, #4
 8002dee:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002df0:	079b      	lsls	r3, r3, #30
 8002df2:	d100      	bne.n	8002df6 <HAL_TIM_IRQHandler+0x24>
 8002df4:	e079      	b.n	8002eea <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	f7ff ffe9 	bl	8002dcc <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dfe:	2204      	movs	r2, #4
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	6919      	ldr	r1, [r3, #16]
 8002e04:	4211      	tst	r1, r2
 8002e06:	d010      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e08:	68d9      	ldr	r1, [r3, #12]
 8002e0a:	4211      	tst	r1, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e0e:	3a09      	subs	r2, #9
 8002e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e12:	3207      	adds	r2, #7
 8002e14:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	23c0      	movs	r3, #192	; 0xc0
 8002e1a:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e1e:	421a      	tst	r2, r3
 8002e20:	d069      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	f7ff ffd3 	bl	8002dcc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	2300      	movs	r3, #0
 8002e28:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	4211      	tst	r1, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e34:	68d9      	ldr	r1, [r3, #12]
 8002e36:	4211      	tst	r1, r2
 8002e38:	d00b      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e3a:	3a11      	subs	r2, #17
 8002e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e3e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e40:	320d      	adds	r2, #13
 8002e42:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e44:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e46:	079b      	lsls	r3, r3, #30
 8002e48:	d05b      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	f7ff ffbf 	bl	8002dcc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e52:	2210      	movs	r2, #16
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	6919      	ldr	r1, [r3, #16]
 8002e58:	4211      	tst	r1, r2
 8002e5a:	d010      	beq.n	8002e7e <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	4211      	tst	r1, r2
 8002e60:	d00d      	beq.n	8002e7e <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e62:	3a21      	subs	r2, #33	; 0x21
 8002e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e66:	3219      	adds	r2, #25
 8002e68:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	23c0      	movs	r3, #192	; 0xc0
 8002e6e:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e70:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e72:	421a      	tst	r2, r3
 8002e74:	d04b      	beq.n	8002f0e <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	f7ff ffa9 	bl	8002dcc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	6919      	ldr	r1, [r3, #16]
 8002e84:	4211      	tst	r1, r2
 8002e86:	d007      	beq.n	8002e98 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	4211      	tst	r1, r2
 8002e8c:	d004      	beq.n	8002e98 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e8e:	3a03      	subs	r2, #3
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e92:	0020      	movs	r0, r4
 8002e94:	f7ff ff98 	bl	8002dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	6919      	ldr	r1, [r3, #16]
 8002e9e:	4211      	tst	r1, r2
 8002ea0:	d008      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ea2:	68d9      	ldr	r1, [r3, #12]
 8002ea4:	4211      	tst	r1, r2
 8002ea6:	d005      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea8:	3a02      	subs	r2, #2
 8002eaa:	3aff      	subs	r2, #255	; 0xff
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eae:	0020      	movs	r0, r4
 8002eb0:	f000 f95d 	bl	800316e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb4:	2240      	movs	r2, #64	; 0x40
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	6919      	ldr	r1, [r3, #16]
 8002eba:	4211      	tst	r1, r2
 8002ebc:	d007      	beq.n	8002ece <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ebe:	68d9      	ldr	r1, [r3, #12]
 8002ec0:	4211      	tst	r1, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ec4:	3a81      	subs	r2, #129	; 0x81
 8002ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec8:	0020      	movs	r0, r4
 8002eca:	f7ff ff81 	bl	8002dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ece:	2220      	movs	r2, #32
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	6919      	ldr	r1, [r3, #16]
 8002ed4:	4211      	tst	r1, r2
 8002ed6:	d007      	beq.n	8002ee8 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ed8:	68d9      	ldr	r1, [r3, #12]
 8002eda:	4211      	tst	r1, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ede:	3a41      	subs	r2, #65	; 0x41
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ee2:	0020      	movs	r0, r4
 8002ee4:	f000 f942 	bl	800316c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ee8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	f7ff ff6e 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eee:	0020      	movs	r0, r4
 8002ef0:	f7ff ff6d 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
 8002ef4:	e781      	b.n	8002dfa <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	f7ff ff68 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efa:	0020      	movs	r0, r4
 8002efc:	f7ff ff67 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
 8002f00:	e791      	b.n	8002e26 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	f7ff ff62 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f06:	0020      	movs	r0, r4
 8002f08:	f7ff ff61 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
 8002f0c:	e79f      	b.n	8002e4e <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0e:	f7ff ff5c 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f12:	0020      	movs	r0, r4
 8002f14:	f7ff ff5b 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
 8002f18:	e7af      	b.n	8002e7a <HAL_TIM_IRQHandler+0xa8>
	...

08002f1c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f1c:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <TIM_Base_SetConfig+0x68>)
{
 8002f1e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002f20:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f22:	4290      	cmp	r0, r2
 8002f24:	d002      	beq.n	8002f2c <TIM_Base_SetConfig+0x10>
 8002f26:	4c18      	ldr	r4, [pc, #96]	; (8002f88 <TIM_Base_SetConfig+0x6c>)
 8002f28:	42a0      	cmp	r0, r4
 8002f2a:	d108      	bne.n	8002f3e <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f2c:	2470      	movs	r4, #112	; 0x70
 8002f2e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002f30:	684c      	ldr	r4, [r1, #4]
 8002f32:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f34:	4290      	cmp	r0, r2
 8002f36:	d00b      	beq.n	8002f50 <TIM_Base_SetConfig+0x34>
 8002f38:	4c13      	ldr	r4, [pc, #76]	; (8002f88 <TIM_Base_SetConfig+0x6c>)
 8002f3a:	42a0      	cmp	r0, r4
 8002f3c:	d008      	beq.n	8002f50 <TIM_Base_SetConfig+0x34>
 8002f3e:	4c13      	ldr	r4, [pc, #76]	; (8002f8c <TIM_Base_SetConfig+0x70>)
 8002f40:	42a0      	cmp	r0, r4
 8002f42:	d005      	beq.n	8002f50 <TIM_Base_SetConfig+0x34>
 8002f44:	4c12      	ldr	r4, [pc, #72]	; (8002f90 <TIM_Base_SetConfig+0x74>)
 8002f46:	42a0      	cmp	r0, r4
 8002f48:	d002      	beq.n	8002f50 <TIM_Base_SetConfig+0x34>
 8002f4a:	4c12      	ldr	r4, [pc, #72]	; (8002f94 <TIM_Base_SetConfig+0x78>)
 8002f4c:	42a0      	cmp	r0, r4
 8002f4e:	d103      	bne.n	8002f58 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f50:	4c11      	ldr	r4, [pc, #68]	; (8002f98 <TIM_Base_SetConfig+0x7c>)
 8002f52:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f54:	68cc      	ldr	r4, [r1, #12]
 8002f56:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f58:	2480      	movs	r4, #128	; 0x80
 8002f5a:	43a3      	bics	r3, r4
 8002f5c:	694c      	ldr	r4, [r1, #20]
 8002f5e:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002f60:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f62:	688b      	ldr	r3, [r1, #8]
 8002f64:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f66:	680b      	ldr	r3, [r1, #0]
 8002f68:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f6a:	4290      	cmp	r0, r2
 8002f6c:	d005      	beq.n	8002f7a <TIM_Base_SetConfig+0x5e>
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <TIM_Base_SetConfig+0x74>)
 8002f70:	4298      	cmp	r0, r3
 8002f72:	d002      	beq.n	8002f7a <TIM_Base_SetConfig+0x5e>
 8002f74:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <TIM_Base_SetConfig+0x78>)
 8002f76:	4298      	cmp	r0, r3
 8002f78:	d101      	bne.n	8002f7e <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f7a:	690b      	ldr	r3, [r1, #16]
 8002f7c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	6143      	str	r3, [r0, #20]
}
 8002f82:	bd10      	pop	{r4, pc}
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40002000 	.word	0x40002000
 8002f90:	40014400 	.word	0x40014400
 8002f94:	40014800 	.word	0x40014800
 8002f98:	fffffcff 	.word	0xfffffcff

08002f9c <HAL_TIM_Base_Init>:
{
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002fa0:	2001      	movs	r0, #1
  if (htim == NULL)
 8002fa2:	2c00      	cmp	r4, #0
 8002fa4:	d014      	beq.n	8002fd0 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa6:	0025      	movs	r5, r4
 8002fa8:	353d      	adds	r5, #61	; 0x3d
 8002faa:	782b      	ldrb	r3, [r5, #0]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002fb2:	0022      	movs	r2, r4
 8002fb4:	323c      	adds	r2, #60	; 0x3c
 8002fb6:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8002fb8:	0020      	movs	r0, r4
 8002fba:	f7fe fb1b 	bl	80015f4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbe:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc2:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc4:	1d21      	adds	r1, r4, #4
 8002fc6:	f7ff ffa9 	bl	8002f1c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002fca:	2301      	movs	r3, #1
  return HAL_OK;
 8002fcc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002fce:	702b      	strb	r3, [r5, #0]
}
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fd4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fd6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd8:	4d03      	ldr	r5, [pc, #12]	; (8002fe8 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fde:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe4:	6083      	str	r3, [r0, #8]
}
 8002fe6:	bd30      	pop	{r4, r5, pc}
 8002fe8:	ffff00ff 	.word	0xffff00ff

08002fec <HAL_TIM_ConfigClockSource>:
{
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002fee:	0005      	movs	r5, r0
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	353c      	adds	r5, #60	; 0x3c
 8002ff4:	782a      	ldrb	r2, [r5, #0]
{
 8002ff6:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	2a01      	cmp	r2, #1
 8002ffc:	d016      	beq.n	800302c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffe:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8003000:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8003002:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8003006:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 800300a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300c:	4a40      	ldr	r2, [pc, #256]	; (8003110 <HAL_TIM_ConfigClockSource+0x124>)
 800300e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003010:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003012:	680b      	ldr	r3, [r1, #0]
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d065      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0xf8>
 8003018:	d814      	bhi.n	8003044 <HAL_TIM_ConfigClockSource+0x58>
 800301a:	2b10      	cmp	r3, #16
 800301c:	d00b      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x4a>
 800301e:	d806      	bhi.n	800302e <HAL_TIM_ConfigClockSource+0x42>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8003024:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003026:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003028:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 800302a:	7028      	strb	r0, [r5, #0]
}
 800302c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800302e:	2b20      	cmp	r3, #32
 8003030:	d001      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x4a>
 8003032:	2b30      	cmp	r3, #48	; 0x30
 8003034:	d1f6      	bne.n	8003024 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003036:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003038:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800303a:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800303c:	3a69      	subs	r2, #105	; 0x69
 800303e:	4313      	orrs	r3, r2
 8003040:	430b      	orrs	r3, r1
 8003042:	e01a      	b.n	800307a <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8003044:	2b60      	cmp	r3, #96	; 0x60
 8003046:	d035      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0xc8>
 8003048:	d819      	bhi.n	800307e <HAL_TIM_ConfigClockSource+0x92>
 800304a:	2b50      	cmp	r3, #80	; 0x50
 800304c:	d1ea      	bne.n	8003024 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304e:	684a      	ldr	r2, [r1, #4]
 8003050:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003052:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003054:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003056:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003058:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800305a:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003060:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003062:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003064:	240a      	movs	r4, #10
 8003066:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003068:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800306a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800306c:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800306e:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003070:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003072:	4393      	bics	r3, r2
 8003074:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003076:	2357      	movs	r3, #87	; 0x57
 8003078:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800307a:	6083      	str	r3, [r0, #8]
 800307c:	e7d2      	b.n	8003024 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800307e:	2b70      	cmp	r3, #112	; 0x70
 8003080:	d00d      	beq.n	800309e <HAL_TIM_ConfigClockSource+0xb2>
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	0192      	lsls	r2, r2, #6
 8003086:	4293      	cmp	r3, r2
 8003088:	d1cc      	bne.n	8003024 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800308a:	68cb      	ldr	r3, [r1, #12]
 800308c:	684a      	ldr	r2, [r1, #4]
 800308e:	6889      	ldr	r1, [r1, #8]
 8003090:	f7ff ffa0 	bl	8002fd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	01db      	lsls	r3, r3, #7
 800309a:	6891      	ldr	r1, [r2, #8]
 800309c:	e007      	b.n	80030ae <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 800309e:	68cb      	ldr	r3, [r1, #12]
 80030a0:	684a      	ldr	r2, [r1, #4]
 80030a2:	6889      	ldr	r1, [r1, #8]
 80030a4:	f7ff ff96 	bl	8002fd4 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a8:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80030aa:	6822      	ldr	r2, [r4, #0]
 80030ac:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ae:	430b      	orrs	r3, r1
 80030b0:	6093      	str	r3, [r2, #8]
      break;
 80030b2:	e7b7      	b.n	8003024 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b4:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b6:	684b      	ldr	r3, [r1, #4]
 80030b8:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ba:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030bc:	4f15      	ldr	r7, [pc, #84]	; (8003114 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030be:	43a1      	bics	r1, r4
 80030c0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c2:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030c4:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c6:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030c8:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ca:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80030cc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80030ce:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030d0:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d2:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 80030d8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80030da:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030dc:	4393      	bics	r3, r2
 80030de:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030e0:	2367      	movs	r3, #103	; 0x67
 80030e2:	e7c9      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e4:	684a      	ldr	r2, [r1, #4]
 80030e6:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80030e8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ea:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ec:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ee:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f0:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f4:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f6:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030f8:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030fa:	240a      	movs	r4, #10
 80030fc:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80030fe:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003100:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003102:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003104:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003106:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003108:	4393      	bics	r3, r2
 800310a:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800310c:	2347      	movs	r3, #71	; 0x47
 800310e:	e7b3      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x8c>
 8003110:	ffff0088 	.word	0xffff0088
 8003114:	ffff0fff 	.word	0xffff0fff

08003118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003118:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800311a:	0004      	movs	r4, r0
 800311c:	2202      	movs	r2, #2
 800311e:	343c      	adds	r4, #60	; 0x3c
 8003120:	7825      	ldrb	r5, [r4, #0]
{
 8003122:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003124:	0010      	movs	r0, r2
 8003126:	2d01      	cmp	r5, #1
 8003128:	d01b      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0x4a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800312c:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 800312e:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 8003130:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003132:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8003134:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003136:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8003138:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800313a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800313c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800313e:	680e      	ldr	r6, [r1, #0]
 8003140:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003142:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003144:	4807      	ldr	r0, [pc, #28]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8003146:	4283      	cmp	r3, r0
 8003148:	d002      	beq.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 800314a:	4807      	ldr	r0, [pc, #28]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800314c:	4283      	cmp	r3, r0
 800314e:	d104      	bne.n	800315a <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003150:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003152:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003154:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003156:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800315a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800315c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800315e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003160:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40000400 	.word	0x40000400

0800316c <HAL_TIMEx_CommutCallback>:
 800316c:	4770      	bx	lr

0800316e <HAL_TIMEx_BreakCallback>:
 800316e:	4770      	bx	lr

08003170 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003170:	6803      	ldr	r3, [r0, #0]
 8003172:	4907      	ldr	r1, [pc, #28]	; (8003190 <UART_EndRxTransfer+0x20>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	400a      	ands	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	3123      	adds	r1, #35	; 0x23
 800317e:	31ff      	adds	r1, #255	; 0xff
 8003180:	438a      	bics	r2, r1
 8003182:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003184:	2320      	movs	r3, #32
 8003186:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	6603      	str	r3, [r0, #96]	; 0x60
}
 800318c:	4770      	bx	lr
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	fffffedf 	.word	0xfffffedf

08003194 <HAL_UART_Receive_IT>:
{
 8003194:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003196:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8003198:	0003      	movs	r3, r0
    return HAL_BUSY;
 800319a:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800319c:	2c20      	cmp	r4, #32
 800319e:	d141      	bne.n	8003224 <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 80031a0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80031a2:	2900      	cmp	r1, #0
 80031a4:	d03e      	beq.n	8003224 <HAL_UART_Receive_IT+0x90>
 80031a6:	2a00      	cmp	r2, #0
 80031a8:	d03c      	beq.n	8003224 <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031aa:	2580      	movs	r5, #128	; 0x80
 80031ac:	689c      	ldr	r4, [r3, #8]
 80031ae:	016d      	lsls	r5, r5, #5
 80031b0:	42ac      	cmp	r4, r5
 80031b2:	d104      	bne.n	80031be <HAL_UART_Receive_IT+0x2a>
 80031b4:	691d      	ldr	r5, [r3, #16]
 80031b6:	2d00      	cmp	r5, #0
 80031b8:	d101      	bne.n	80031be <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 80031ba:	4201      	tst	r1, r0
 80031bc:	d132      	bne.n	8003224 <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 80031be:	001d      	movs	r5, r3
 80031c0:	3570      	adds	r5, #112	; 0x70
 80031c2:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 80031c4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80031c6:	2e01      	cmp	r6, #1
 80031c8:	d02c      	beq.n	8003224 <HAL_UART_Receive_IT+0x90>
 80031ca:	3801      	subs	r0, #1
 80031cc:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 80031ce:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80031d0:	0019      	movs	r1, r3
 80031d2:	3158      	adds	r1, #88	; 0x58
 80031d4:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 80031d6:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 80031d8:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 80031da:	2100      	movs	r1, #0
 80031dc:	001a      	movs	r2, r3
 80031de:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 80031e0:	0140      	lsls	r0, r0, #5
 80031e2:	325c      	adds	r2, #92	; 0x5c
 80031e4:	4284      	cmp	r4, r0
 80031e6:	d120      	bne.n	800322a <HAL_UART_Receive_IT+0x96>
 80031e8:	6919      	ldr	r1, [r3, #16]
 80031ea:	2900      	cmp	r1, #0
 80031ec:	d11b      	bne.n	8003226 <HAL_UART_Receive_IT+0x92>
 80031ee:	4913      	ldr	r1, [pc, #76]	; (800323c <HAL_UART_Receive_IT+0xa8>)
 80031f0:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f2:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f4:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f8:	3222      	adds	r2, #34	; 0x22
 80031fa:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	6890      	ldr	r0, [r2, #8]
 8003200:	4301      	orrs	r1, r0
 8003202:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	0149      	lsls	r1, r1, #5
 8003208:	428c      	cmp	r4, r1
 800320a:	d115      	bne.n	8003238 <HAL_UART_Receive_IT+0xa4>
 800320c:	6919      	ldr	r1, [r3, #16]
 800320e:	2900      	cmp	r1, #0
 8003210:	d112      	bne.n	8003238 <HAL_UART_Receive_IT+0xa4>
      huart->RxISR = UART_RxISR_16BIT;
 8003212:	490b      	ldr	r1, [pc, #44]	; (8003240 <HAL_UART_Receive_IT+0xac>)
      huart->RxISR = UART_RxISR_8BIT;
 8003214:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003216:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 8003218:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800321a:	6811      	ldr	r1, [r2, #0]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 8003220:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 8003226:	21ff      	movs	r1, #255	; 0xff
 8003228:	e7e2      	b.n	80031f0 <HAL_UART_Receive_IT+0x5c>
 800322a:	2c00      	cmp	r4, #0
 800322c:	d1e0      	bne.n	80031f0 <HAL_UART_Receive_IT+0x5c>
 800322e:	6919      	ldr	r1, [r3, #16]
 8003230:	2900      	cmp	r1, #0
 8003232:	d0f8      	beq.n	8003226 <HAL_UART_Receive_IT+0x92>
 8003234:	217f      	movs	r1, #127	; 0x7f
 8003236:	e7db      	b.n	80031f0 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 8003238:	4902      	ldr	r1, [pc, #8]	; (8003244 <HAL_UART_Receive_IT+0xb0>)
 800323a:	e7eb      	b.n	8003214 <HAL_UART_Receive_IT+0x80>
 800323c:	000001ff 	.word	0x000001ff
 8003240:	080032ad 	.word	0x080032ad
 8003244:	0800324d 	.word	0x0800324d

08003248 <HAL_UART_TxCpltCallback>:
 8003248:	4770      	bx	lr

0800324a <HAL_UART_RxCpltCallback>:
 800324a:	4770      	bx	lr

0800324c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800324c:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800324e:	b510      	push	{r4, lr}
 8003250:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003252:	2a22      	cmp	r2, #34	; 0x22
 8003254:	d123      	bne.n	800329e <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8003256:	0002      	movs	r2, r0
 8003258:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800325a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800325c:	8812      	ldrh	r2, [r2, #0]
 800325e:	4013      	ands	r3, r2
 8003260:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003262:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8003264:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8003266:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003268:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 800326a:	3301      	adds	r3, #1
 800326c:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800326e:	8813      	ldrh	r3, [r2, #0]
 8003270:	3b01      	subs	r3, #1
 8003272:	b29b      	uxth	r3, r3
 8003274:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8003276:	8813      	ldrh	r3, [r2, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10e      	bne.n	800329c <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800327e:	6802      	ldr	r2, [r0, #0]
 8003280:	4c09      	ldr	r4, [pc, #36]	; (80032a8 <UART_RxISR_8BIT+0x5c>)
 8003282:	6811      	ldr	r1, [r2, #0]
 8003284:	4021      	ands	r1, r4
 8003286:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003288:	6891      	ldr	r1, [r2, #8]
 800328a:	3423      	adds	r4, #35	; 0x23
 800328c:	34ff      	adds	r4, #255	; 0xff
 800328e:	43a1      	bics	r1, r4
 8003290:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003292:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003294:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8003296:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003298:	f7ff ffd7 	bl	800324a <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800329c:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800329e:	2208      	movs	r2, #8
 80032a0:	6999      	ldr	r1, [r3, #24]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	619a      	str	r2, [r3, #24]
}
 80032a6:	e7f9      	b.n	800329c <UART_RxISR_8BIT+0x50>
 80032a8:	fffffedf 	.word	0xfffffedf

080032ac <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032ac:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 80032ae:	b510      	push	{r4, lr}
 80032b0:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032b2:	2a22      	cmp	r2, #34	; 0x22
 80032b4:	d121      	bne.n	80032fa <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 80032b6:	0001      	movs	r1, r0
 80032b8:	315c      	adds	r1, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032ba:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80032bc:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80032be:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 80032c0:	4021      	ands	r1, r4
 80032c2:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80032c4:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 80032c6:	3202      	adds	r2, #2
 80032c8:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80032ca:	315a      	adds	r1, #90	; 0x5a
 80032cc:	880a      	ldrh	r2, [r1, #0]
 80032ce:	3a01      	subs	r2, #1
 80032d0:	b292      	uxth	r2, r2
 80032d2:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 80032d4:	880a      	ldrh	r2, [r1, #0]
 80032d6:	b292      	uxth	r2, r2
 80032d8:	2a00      	cmp	r2, #0
 80032da:	d10d      	bne.n	80032f8 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	4c09      	ldr	r4, [pc, #36]	; (8003304 <UART_RxISR_16BIT+0x58>)
 80032e0:	4021      	ands	r1, r4
 80032e2:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e4:	6899      	ldr	r1, [r3, #8]
 80032e6:	3423      	adds	r4, #35	; 0x23
 80032e8:	34ff      	adds	r4, #255	; 0xff
 80032ea:	43a1      	bics	r1, r4
 80032ec:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032ee:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80032f0:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 80032f2:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032f4:	f7ff ffa9 	bl	800324a <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032f8:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032fa:	2208      	movs	r2, #8
 80032fc:	6999      	ldr	r1, [r3, #24]
 80032fe:	430a      	orrs	r2, r1
 8003300:	619a      	str	r2, [r3, #24]
}
 8003302:	e7f9      	b.n	80032f8 <UART_RxISR_16BIT+0x4c>
 8003304:	fffffedf 	.word	0xfffffedf

08003308 <HAL_UART_ErrorCallback>:
 8003308:	4770      	bx	lr
	...

0800330c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800330c:	6803      	ldr	r3, [r0, #0]
{
 800330e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003310:	69da      	ldr	r2, [r3, #28]
{
 8003312:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003314:	484a      	ldr	r0, [pc, #296]	; (8003440 <HAL_UART_IRQHandler+0x134>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003316:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003318:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800331a:	4202      	tst	r2, r0
 800331c:	d10b      	bne.n	8003336 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800331e:	2020      	movs	r0, #32
 8003320:	4202      	tst	r2, r0
 8003322:	d100      	bne.n	8003326 <HAL_UART_IRQHandler+0x1a>
 8003324:	e075      	b.n	8003412 <HAL_UART_IRQHandler+0x106>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003326:	4201      	tst	r1, r0
 8003328:	d100      	bne.n	800332c <HAL_UART_IRQHandler+0x20>
 800332a:	e072      	b.n	8003412 <HAL_UART_IRQHandler+0x106>
      if (huart->RxISR != NULL)
 800332c:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 800332e:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8003330:	2b00      	cmp	r3, #0
 8003332:	d164      	bne.n	80033fe <HAL_UART_IRQHandler+0xf2>
 8003334:	e064      	b.n	8003400 <HAL_UART_IRQHandler+0xf4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003336:	2001      	movs	r0, #1
 8003338:	4005      	ands	r5, r0
 800333a:	d103      	bne.n	8003344 <HAL_UART_IRQHandler+0x38>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800333c:	2690      	movs	r6, #144	; 0x90
 800333e:	0076      	lsls	r6, r6, #1
 8003340:	4231      	tst	r1, r6
 8003342:	d066      	beq.n	8003412 <HAL_UART_IRQHandler+0x106>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003344:	4202      	tst	r2, r0
 8003346:	d005      	beq.n	8003354 <HAL_UART_IRQHandler+0x48>
 8003348:	05ce      	lsls	r6, r1, #23
 800334a:	d503      	bpl.n	8003354 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800334c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800334e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8003350:	4330      	orrs	r0, r6
 8003352:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003354:	2002      	movs	r0, #2
 8003356:	4202      	tst	r2, r0
 8003358:	d006      	beq.n	8003368 <HAL_UART_IRQHandler+0x5c>
 800335a:	2d00      	cmp	r5, #0
 800335c:	d004      	beq.n	8003368 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800335e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003360:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8003362:	1800      	adds	r0, r0, r0
 8003364:	4330      	orrs	r0, r6
 8003366:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003368:	2004      	movs	r0, #4
 800336a:	4202      	tst	r2, r0
 800336c:	d006      	beq.n	800337c <HAL_UART_IRQHandler+0x70>
 800336e:	2d00      	cmp	r5, #0
 8003370:	d004      	beq.n	800337c <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003372:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003374:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8003376:	3802      	subs	r0, #2
 8003378:	4330      	orrs	r0, r6
 800337a:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800337c:	0710      	lsls	r0, r2, #28
 800337e:	d508      	bpl.n	8003392 <HAL_UART_IRQHandler+0x86>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003380:	0688      	lsls	r0, r1, #26
 8003382:	d401      	bmi.n	8003388 <HAL_UART_IRQHandler+0x7c>
 8003384:	2d00      	cmp	r5, #0
 8003386:	d004      	beq.n	8003392 <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003388:	2008      	movs	r0, #8
 800338a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800338c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800338e:	4328      	orrs	r0, r5
 8003390:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003392:	2080      	movs	r0, #128	; 0x80
 8003394:	0100      	lsls	r0, r0, #4
 8003396:	4202      	tst	r2, r0
 8003398:	d006      	beq.n	80033a8 <HAL_UART_IRQHandler+0x9c>
 800339a:	014d      	lsls	r5, r1, #5
 800339c:	d504      	bpl.n	80033a8 <HAL_UART_IRQHandler+0x9c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800339e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033a0:	2320      	movs	r3, #32
 80033a2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80033a4:	4303      	orrs	r3, r0
 80033a6:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033a8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d028      	beq.n	8003400 <HAL_UART_IRQHandler+0xf4>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033ae:	2320      	movs	r3, #32
 80033b0:	421a      	tst	r2, r3
 80033b2:	d006      	beq.n	80033c2 <HAL_UART_IRQHandler+0xb6>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033b4:	4219      	tst	r1, r3
 80033b6:	d004      	beq.n	80033c2 <HAL_UART_IRQHandler+0xb6>
        if (huart->RxISR != NULL)
 80033b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_UART_IRQHandler+0xb6>
          huart->RxISR(huart);
 80033be:	0020      	movs	r0, r4
 80033c0:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033c2:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80033c4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033c6:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 80033c8:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ca:	065b      	lsls	r3, r3, #25
 80033cc:	d402      	bmi.n	80033d4 <HAL_UART_IRQHandler+0xc8>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033ce:	2328      	movs	r3, #40	; 0x28
 80033d0:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033d2:	d01a      	beq.n	800340a <HAL_UART_IRQHandler+0xfe>
        UART_EndRxTransfer(huart);
 80033d4:	f7ff fecc 	bl	8003170 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	2140      	movs	r1, #64	; 0x40
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	420a      	tst	r2, r1
 80033e0:	d00f      	beq.n	8003402 <HAL_UART_IRQHandler+0xf6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e2:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80033e4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e6:	438a      	bics	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d009      	beq.n	8003402 <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_UART_IRQHandler+0x138>)
 80033f0:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033f2:	f7fe fd5d 	bl	8001eb0 <HAL_DMA_Abort_IT>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d002      	beq.n	8003400 <HAL_UART_IRQHandler+0xf4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80033fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033fe:	4798      	blx	r3
}
 8003400:	bd70      	pop	{r4, r5, r6, pc}
            HAL_UART_ErrorCallback(huart);
 8003402:	0020      	movs	r0, r4
 8003404:	f7ff ff80 	bl	8003308 <HAL_UART_ErrorCallback>
 8003408:	e7fa      	b.n	8003400 <HAL_UART_IRQHandler+0xf4>
        HAL_UART_ErrorCallback(huart);
 800340a:	f7ff ff7d 	bl	8003308 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8003410:	e7f6      	b.n	8003400 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003412:	2080      	movs	r0, #128	; 0x80
 8003414:	4202      	tst	r2, r0
 8003416:	d003      	beq.n	8003420 <HAL_UART_IRQHandler+0x114>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003418:	4201      	tst	r1, r0
 800341a:	d001      	beq.n	8003420 <HAL_UART_IRQHandler+0x114>
    if (huart->TxISR != NULL)
 800341c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800341e:	e786      	b.n	800332e <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003420:	2040      	movs	r0, #64	; 0x40
 8003422:	4202      	tst	r2, r0
 8003424:	d0ec      	beq.n	8003400 <HAL_UART_IRQHandler+0xf4>
 8003426:	4201      	tst	r1, r0
 8003428:	d0ea      	beq.n	8003400 <HAL_UART_IRQHandler+0xf4>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4382      	bics	r2, r0
 800342e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003430:	2320      	movs	r3, #32
 8003432:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8003434:	2300      	movs	r3, #0
  HAL_UART_TxCpltCallback(huart);
 8003436:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003438:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800343a:	f7ff ff05 	bl	8003248 <HAL_UART_TxCpltCallback>
 800343e:	e7df      	b.n	8003400 <HAL_UART_IRQHandler+0xf4>
 8003440:	0000080f 	.word	0x0000080f
 8003444:	08003449 	.word	0x08003449

08003448 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003448:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	0002      	movs	r2, r0
{
 800344e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003450:	325a      	adds	r2, #90	; 0x5a
 8003452:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003454:	3a08      	subs	r2, #8
 8003456:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8003458:	f7ff ff56 	bl	8003308 <HAL_UART_ErrorCallback>
}
 800345c:	bd10      	pop	{r4, pc}
	...

08003460 <UART_SetConfig>:
{
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003464:	6925      	ldr	r5, [r4, #16]
 8003466:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003468:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800346a:	432b      	orrs	r3, r5
 800346c:	6965      	ldr	r5, [r4, #20]
 800346e:	69c1      	ldr	r1, [r0, #28]
 8003470:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003472:	6810      	ldr	r0, [r2, #0]
 8003474:	4d3e      	ldr	r5, [pc, #248]	; (8003570 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003476:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003478:	4028      	ands	r0, r5
 800347a:	4303      	orrs	r3, r0
 800347c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800347e:	6853      	ldr	r3, [r2, #4]
 8003480:	483c      	ldr	r0, [pc, #240]	; (8003574 <UART_SetConfig+0x114>)
  tmpreg |= huart->Init.OneBitSampling;
 8003482:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003484:	4003      	ands	r3, r0
 8003486:	68e0      	ldr	r0, [r4, #12]
 8003488:	4303      	orrs	r3, r0
 800348a:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800348c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800348e:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003490:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003492:	4d39      	ldr	r5, [pc, #228]	; (8003578 <UART_SetConfig+0x118>)
 8003494:	4028      	ands	r0, r5
 8003496:	4303      	orrs	r3, r0
 8003498:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800349a:	2203      	movs	r2, #3
 800349c:	4b37      	ldr	r3, [pc, #220]	; (800357c <UART_SetConfig+0x11c>)
 800349e:	4d38      	ldr	r5, [pc, #224]	; (8003580 <UART_SetConfig+0x120>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4013      	ands	r3, r2
 80034a4:	4a37      	ldr	r2, [pc, #220]	; (8003584 <UART_SetConfig+0x124>)
 80034a6:	5cd0      	ldrb	r0, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	4299      	cmp	r1, r3
 80034ae:	d135      	bne.n	800351c <UART_SetConfig+0xbc>
    switch (clocksource)
 80034b0:	2808      	cmp	r0, #8
 80034b2:	d826      	bhi.n	8003502 <UART_SetConfig+0xa2>
 80034b4:	f7fc fe32 	bl	800011c <__gnu_thumb1_case_uqi>
 80034b8:	250b2505 	.word	0x250b2505
 80034bc:	2525251d 	.word	0x2525251d
 80034c0:	20          	.byte	0x20
 80034c1:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c2:	f7ff f9f9 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034c6:	6863      	ldr	r3, [r4, #4]
 80034c8:	0040      	lsls	r0, r0, #1
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	e002      	b.n	80034d4 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034ce:	6863      	ldr	r3, [r4, #4]
 80034d0:	0858      	lsrs	r0, r3, #1
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <UART_SetConfig+0x128>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034d4:	18c0      	adds	r0, r0, r3
 80034d6:	6861      	ldr	r1, [r4, #4]
 80034d8:	f7fc fe2a 	bl	8000130 <__udivsi3>
 80034dc:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80034de:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e0:	001a      	movs	r2, r3
 80034e2:	3a10      	subs	r2, #16
 80034e4:	42aa      	cmp	r2, r5
 80034e6:	d90f      	bls.n	8003508 <UART_SetConfig+0xa8>
      ret = HAL_ERROR;
 80034e8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80034ee:	6663      	str	r3, [r4, #100]	; 0x64
}
 80034f0:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 80034f2:	f7ff f92b 	bl	800274c <HAL_RCC_GetSysClockFreq>
 80034f6:	e7e6      	b.n	80034c6 <UART_SetConfig+0x66>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034f8:	6863      	ldr	r3, [r4, #4]
 80034fa:	0858      	lsrs	r0, r3, #1
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	025b      	lsls	r3, r3, #9
 8003500:	e7e8      	b.n	80034d4 <UART_SetConfig+0x74>
        ret = HAL_ERROR;
 8003502:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003504:	2300      	movs	r3, #0
 8003506:	e7eb      	b.n	80034e0 <UART_SetConfig+0x80>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003508:	220f      	movs	r2, #15
 800350a:	0019      	movs	r1, r3
 800350c:	4391      	bics	r1, r2
 800350e:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003510:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 8003512:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003514:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8003516:	4313      	orrs	r3, r2
 8003518:	60cb      	str	r3, [r1, #12]
 800351a:	e7e6      	b.n	80034ea <UART_SetConfig+0x8a>
    switch (clocksource)
 800351c:	2808      	cmp	r0, #8
 800351e:	d823      	bhi.n	8003568 <UART_SetConfig+0x108>
 8003520:	f7fc fdfc 	bl	800011c <__gnu_thumb1_case_uqi>
 8003524:	220a2205 	.word	0x220a2205
 8003528:	2222221a 	.word	0x2222221a
 800352c:	1d          	.byte	0x1d
 800352d:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800352e:	f7ff f9c3 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003532:	6863      	ldr	r3, [r4, #4]
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	e002      	b.n	800353e <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003538:	6863      	ldr	r3, [r4, #4]
 800353a:	0858      	lsrs	r0, r3, #1
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800353e:	18c0      	adds	r0, r0, r3
 8003540:	6861      	ldr	r1, [r4, #4]
 8003542:	f7fc fdf5 	bl	8000130 <__udivsi3>
 8003546:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003548:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800354a:	001a      	movs	r2, r3
 800354c:	3a10      	subs	r2, #16
 800354e:	42aa      	cmp	r2, r5
 8003550:	d8ca      	bhi.n	80034e8 <UART_SetConfig+0x88>
      huart->Instance->BRR = usartdiv;
 8003552:	6822      	ldr	r2, [r4, #0]
 8003554:	60d3      	str	r3, [r2, #12]
 8003556:	e7c8      	b.n	80034ea <UART_SetConfig+0x8a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003558:	f7ff f8f8 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800355c:	e7e9      	b.n	8003532 <UART_SetConfig+0xd2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800355e:	6863      	ldr	r3, [r4, #4]
 8003560:	0858      	lsrs	r0, r3, #1
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	e7ea      	b.n	800353e <UART_SetConfig+0xde>
        ret = HAL_ERROR;
 8003568:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800356a:	2300      	movs	r3, #0
 800356c:	e7ed      	b.n	800354a <UART_SetConfig+0xea>
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	ffff69f3 	.word	0xffff69f3
 8003574:	ffffcfff 	.word	0xffffcfff
 8003578:	fffff4ff 	.word	0xfffff4ff
 800357c:	40021000 	.word	0x40021000
 8003580:	0000ffef 	.word	0x0000ffef
 8003584:	08003bc2 	.word	0x08003bc2
 8003588:	00f42400 	.word	0x00f42400
 800358c:	007a1200 	.word	0x007a1200

08003590 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003590:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003592:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003594:	07da      	lsls	r2, r3, #31
 8003596:	d506      	bpl.n	80035a6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003598:	6801      	ldr	r1, [r0, #0]
 800359a:	4c28      	ldr	r4, [pc, #160]	; (800363c <UART_AdvFeatureConfig+0xac>)
 800359c:	684a      	ldr	r2, [r1, #4]
 800359e:	4022      	ands	r2, r4
 80035a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80035a2:	4322      	orrs	r2, r4
 80035a4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035a6:	079a      	lsls	r2, r3, #30
 80035a8:	d506      	bpl.n	80035b8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035aa:	6801      	ldr	r1, [r0, #0]
 80035ac:	4c24      	ldr	r4, [pc, #144]	; (8003640 <UART_AdvFeatureConfig+0xb0>)
 80035ae:	684a      	ldr	r2, [r1, #4]
 80035b0:	4022      	ands	r2, r4
 80035b2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80035b4:	4322      	orrs	r2, r4
 80035b6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b8:	075a      	lsls	r2, r3, #29
 80035ba:	d506      	bpl.n	80035ca <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035bc:	6801      	ldr	r1, [r0, #0]
 80035be:	4c21      	ldr	r4, [pc, #132]	; (8003644 <UART_AdvFeatureConfig+0xb4>)
 80035c0:	684a      	ldr	r2, [r1, #4]
 80035c2:	4022      	ands	r2, r4
 80035c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80035c6:	4322      	orrs	r2, r4
 80035c8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ca:	071a      	lsls	r2, r3, #28
 80035cc:	d506      	bpl.n	80035dc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ce:	6801      	ldr	r1, [r0, #0]
 80035d0:	4c1d      	ldr	r4, [pc, #116]	; (8003648 <UART_AdvFeatureConfig+0xb8>)
 80035d2:	684a      	ldr	r2, [r1, #4]
 80035d4:	4022      	ands	r2, r4
 80035d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80035d8:	4322      	orrs	r2, r4
 80035da:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035dc:	06da      	lsls	r2, r3, #27
 80035de:	d506      	bpl.n	80035ee <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035e0:	6801      	ldr	r1, [r0, #0]
 80035e2:	4c1a      	ldr	r4, [pc, #104]	; (800364c <UART_AdvFeatureConfig+0xbc>)
 80035e4:	688a      	ldr	r2, [r1, #8]
 80035e6:	4022      	ands	r2, r4
 80035e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80035ea:	4322      	orrs	r2, r4
 80035ec:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ee:	069a      	lsls	r2, r3, #26
 80035f0:	d506      	bpl.n	8003600 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035f2:	6801      	ldr	r1, [r0, #0]
 80035f4:	4c16      	ldr	r4, [pc, #88]	; (8003650 <UART_AdvFeatureConfig+0xc0>)
 80035f6:	688a      	ldr	r2, [r1, #8]
 80035f8:	4022      	ands	r2, r4
 80035fa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80035fc:	4322      	orrs	r2, r4
 80035fe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003600:	065a      	lsls	r2, r3, #25
 8003602:	d510      	bpl.n	8003626 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003604:	6801      	ldr	r1, [r0, #0]
 8003606:	4d13      	ldr	r5, [pc, #76]	; (8003654 <UART_AdvFeatureConfig+0xc4>)
 8003608:	684a      	ldr	r2, [r1, #4]
 800360a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800360c:	402a      	ands	r2, r5
 800360e:	4322      	orrs	r2, r4
 8003610:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	0352      	lsls	r2, r2, #13
 8003616:	4294      	cmp	r4, r2
 8003618:	d105      	bne.n	8003626 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800361a:	684a      	ldr	r2, [r1, #4]
 800361c:	4c0e      	ldr	r4, [pc, #56]	; (8003658 <UART_AdvFeatureConfig+0xc8>)
 800361e:	4022      	ands	r2, r4
 8003620:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003622:	4322      	orrs	r2, r4
 8003624:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	d506      	bpl.n	8003638 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800362a:	6802      	ldr	r2, [r0, #0]
 800362c:	490b      	ldr	r1, [pc, #44]	; (800365c <UART_AdvFeatureConfig+0xcc>)
 800362e:	6853      	ldr	r3, [r2, #4]
 8003630:	400b      	ands	r3, r1
 8003632:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003634:	430b      	orrs	r3, r1
 8003636:	6053      	str	r3, [r2, #4]
}
 8003638:	bd30      	pop	{r4, r5, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	fffdffff 	.word	0xfffdffff
 8003640:	fffeffff 	.word	0xfffeffff
 8003644:	fffbffff 	.word	0xfffbffff
 8003648:	ffff7fff 	.word	0xffff7fff
 800364c:	ffffefff 	.word	0xffffefff
 8003650:	ffffdfff 	.word	0xffffdfff
 8003654:	ffefffff 	.word	0xffefffff
 8003658:	ff9fffff 	.word	0xff9fffff
 800365c:	fff7ffff 	.word	0xfff7ffff

08003660 <UART_WaitOnFlagUntilTimeout>:
{
 8003660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003662:	2780      	movs	r7, #128	; 0x80
{
 8003664:	0004      	movs	r4, r0
 8003666:	000e      	movs	r6, r1
 8003668:	0015      	movs	r5, r2
 800366a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800366c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	69d3      	ldr	r3, [r2, #28]
 8003672:	4033      	ands	r3, r6
 8003674:	1b9b      	subs	r3, r3, r6
 8003676:	4259      	negs	r1, r3
 8003678:	414b      	adcs	r3, r1
 800367a:	42ab      	cmp	r3, r5
 800367c:	d001      	beq.n	8003682 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 800367e:	2000      	movs	r0, #0
 8003680:	e01c      	b.n	80036bc <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003682:	9b08      	ldr	r3, [sp, #32]
 8003684:	3301      	adds	r3, #1
 8003686:	d0f3      	beq.n	8003670 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fe f9fa 	bl	8001a80 <HAL_GetTick>
 800368c:	9b01      	ldr	r3, [sp, #4]
 800368e:	9a08      	ldr	r2, [sp, #32]
 8003690:	1ac0      	subs	r0, r0, r3
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	4290      	cmp	r0, r2
 8003696:	d801      	bhi.n	800369c <UART_WaitOnFlagUntilTimeout+0x3c>
 8003698:	2a00      	cmp	r2, #0
 800369a:	d110      	bne.n	80036be <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4913      	ldr	r1, [pc, #76]	; (80036ec <UART_WaitOnFlagUntilTimeout+0x8c>)
 80036a0:	400a      	ands	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	31a3      	adds	r1, #163	; 0xa3
 80036a8:	31ff      	adds	r1, #255	; 0xff
 80036aa:	438a      	bics	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80036ae:	2320      	movs	r3, #32
 80036b0:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036b2:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80036b4:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80036b6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80036b8:	3470      	adds	r4, #112	; 0x70
 80036ba:	7023      	strb	r3, [r4, #0]
}
 80036bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036be:	2104      	movs	r1, #4
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	420a      	tst	r2, r1
 80036c4:	d0d3      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	423a      	tst	r2, r7
 80036ca:	d0d0      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036cc:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4906      	ldr	r1, [pc, #24]	; (80036ec <UART_WaitOnFlagUntilTimeout+0x8c>)
 80036d2:	400a      	ands	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	31a3      	adds	r1, #163	; 0xa3
 80036da:	31ff      	adds	r1, #255	; 0xff
 80036dc:	438a      	bics	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80036e0:	2320      	movs	r3, #32
 80036e2:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80036e4:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036e6:	67e3      	str	r3, [r4, #124]	; 0x7c
 80036e8:	e7e4      	b.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x54>
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	fffffe5f 	.word	0xfffffe5f

080036f0 <HAL_UART_Transmit>:
{
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	b087      	sub	sp, #28
 80036f4:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80036f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80036f8:	0004      	movs	r4, r0
 80036fa:	000d      	movs	r5, r1
 80036fc:	0017      	movs	r7, r2
    return HAL_BUSY;
 80036fe:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003700:	2b20      	cmp	r3, #32
 8003702:	d149      	bne.n	8003798 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8003704:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003706:	2900      	cmp	r1, #0
 8003708:	d046      	beq.n	8003798 <HAL_UART_Transmit+0xa8>
 800370a:	2a00      	cmp	r2, #0
 800370c:	d044      	beq.n	8003798 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	68a2      	ldr	r2, [r4, #8]
 8003712:	015b      	lsls	r3, r3, #5
 8003714:	429a      	cmp	r2, r3
 8003716:	d104      	bne.n	8003722 <HAL_UART_Transmit+0x32>
 8003718:	6923      	ldr	r3, [r4, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800371e:	4201      	tst	r1, r0
 8003720:	d13a      	bne.n	8003798 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8003722:	0023      	movs	r3, r4
 8003724:	3370      	adds	r3, #112	; 0x70
 8003726:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8003728:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800372a:	2a01      	cmp	r2, #1
 800372c:	d034      	beq.n	8003798 <HAL_UART_Transmit+0xa8>
 800372e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8003732:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003734:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003736:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003738:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800373a:	f7fe f9a1 	bl	8001a80 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800373e:	0023      	movs	r3, r4
 8003740:	3350      	adds	r3, #80	; 0x50
 8003742:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8003744:	3302      	adds	r3, #2
 8003746:	9303      	str	r3, [sp, #12]
 8003748:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800374e:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003750:	015b      	lsls	r3, r3, #5
 8003752:	429a      	cmp	r2, r3
 8003754:	d104      	bne.n	8003760 <HAL_UART_Transmit+0x70>
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	42b3      	cmp	r3, r6
 800375a:	d101      	bne.n	8003760 <HAL_UART_Transmit+0x70>
 800375c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800375e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003760:	0023      	movs	r3, r4
 8003762:	3352      	adds	r3, #82	; 0x52
 8003764:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8003768:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800376e:	2a00      	cmp	r2, #0
 8003770:	d10a      	bne.n	8003788 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003772:	2140      	movs	r1, #64	; 0x40
 8003774:	0020      	movs	r0, r4
 8003776:	f7ff ff73 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 800377a:	2800      	cmp	r0, #0
 800377c:	d10b      	bne.n	8003796 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 800377e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003780:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8003782:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8003784:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003786:	e007      	b.n	8003798 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003788:	2200      	movs	r2, #0
 800378a:	2180      	movs	r1, #128	; 0x80
 800378c:	0020      	movs	r0, r4
 800378e:	f7ff ff67 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8003792:	2800      	cmp	r0, #0
 8003794:	d002      	beq.n	800379c <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8003796:	2003      	movs	r0, #3
}
 8003798:	b007      	add	sp, #28
 800379a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800379c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800379e:	2d00      	cmp	r5, #0
 80037a0:	d10b      	bne.n	80037ba <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037a2:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80037a4:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037a6:	05db      	lsls	r3, r3, #23
 80037a8:	0ddb      	lsrs	r3, r3, #23
 80037aa:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80037ac:	9b03      	ldr	r3, [sp, #12]
 80037ae:	9a03      	ldr	r2, [sp, #12]
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	8013      	strh	r3, [r2, #0]
 80037b8:	e7d2      	b.n	8003760 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ba:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80037bc:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037be:	8513      	strh	r3, [r2, #40]	; 0x28
 80037c0:	e7f4      	b.n	80037ac <HAL_UART_Transmit+0xbc>
	...

080037c4 <UART_CheckIdleState>:
{
 80037c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	2600      	movs	r6, #0
{
 80037c8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ca:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80037cc:	f7fe f958 	bl	8001a80 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80037d2:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	071b      	lsls	r3, r3, #28
 80037d8:	d415      	bmi.n	8003806 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	075b      	lsls	r3, r3, #29
 80037e0:	d50a      	bpl.n	80037f8 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <UART_CheckIdleState+0x5c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	03c9      	lsls	r1, r1, #15
 80037ec:	002b      	movs	r3, r5
 80037ee:	0020      	movs	r0, r4
 80037f0:	f7ff ff36 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d111      	bne.n	800381c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80037f8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80037fa:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80037fc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80037fe:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003800:	3470      	adds	r4, #112	; 0x70
 8003802:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003804:	e00b      	b.n	800381e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003806:	2180      	movs	r1, #128	; 0x80
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <UART_CheckIdleState+0x5c>)
 800380a:	0032      	movs	r2, r6
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	0389      	lsls	r1, r1, #14
 8003810:	0003      	movs	r3, r0
 8003812:	0020      	movs	r0, r4
 8003814:	f7ff ff24 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8003818:	2800      	cmp	r0, #0
 800381a:	d0de      	beq.n	80037da <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800381c:	2003      	movs	r0, #3
}
 800381e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003820:	01ffffff 	.word	0x01ffffff

08003824 <HAL_UART_Init>:
{
 8003824:	b510      	push	{r4, lr}
 8003826:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800382a:	2001      	movs	r0, #1
}
 800382c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800382e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8003834:	0002      	movs	r2, r0
 8003836:	3270      	adds	r2, #112	; 0x70
 8003838:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800383a:	f7fd ff1f 	bl	800167c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800383e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003840:	2101      	movs	r1, #1
 8003842:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003844:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003846:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003848:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800384a:	438b      	bics	r3, r1
 800384c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800384e:	f7ff fe07 	bl	8003460 <UART_SetConfig>
 8003852:	2801      	cmp	r0, #1
 8003854:	d0e9      	beq.n	800382a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800385c:	0020      	movs	r0, r4
 800385e:	f7ff fe97 	bl	8003590 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	4907      	ldr	r1, [pc, #28]	; (8003884 <HAL_UART_Init+0x60>)
 8003866:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003868:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800386a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800386c:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800386e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	438a      	bics	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003876:	2201      	movs	r2, #1
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800387e:	f7ff ffa1 	bl	80037c4 <UART_CheckIdleState>
 8003882:	e7d3      	b.n	800382c <HAL_UART_Init+0x8>
 8003884:	fffff7ff 	.word	0xfffff7ff

08003888 <__libc_init_array>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	2600      	movs	r6, #0
 800388c:	4d0c      	ldr	r5, [pc, #48]	; (80038c0 <__libc_init_array+0x38>)
 800388e:	4c0d      	ldr	r4, [pc, #52]	; (80038c4 <__libc_init_array+0x3c>)
 8003890:	1b64      	subs	r4, r4, r5
 8003892:	10a4      	asrs	r4, r4, #2
 8003894:	42a6      	cmp	r6, r4
 8003896:	d109      	bne.n	80038ac <__libc_init_array+0x24>
 8003898:	2600      	movs	r6, #0
 800389a:	f000 f843 	bl	8003924 <_init>
 800389e:	4d0a      	ldr	r5, [pc, #40]	; (80038c8 <__libc_init_array+0x40>)
 80038a0:	4c0a      	ldr	r4, [pc, #40]	; (80038cc <__libc_init_array+0x44>)
 80038a2:	1b64      	subs	r4, r4, r5
 80038a4:	10a4      	asrs	r4, r4, #2
 80038a6:	42a6      	cmp	r6, r4
 80038a8:	d105      	bne.n	80038b6 <__libc_init_array+0x2e>
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	00b3      	lsls	r3, r6, #2
 80038ae:	58eb      	ldr	r3, [r5, r3]
 80038b0:	4798      	blx	r3
 80038b2:	3601      	adds	r6, #1
 80038b4:	e7ee      	b.n	8003894 <__libc_init_array+0xc>
 80038b6:	00b3      	lsls	r3, r6, #2
 80038b8:	58eb      	ldr	r3, [r5, r3]
 80038ba:	4798      	blx	r3
 80038bc:	3601      	adds	r6, #1
 80038be:	e7f2      	b.n	80038a6 <__libc_init_array+0x1e>
 80038c0:	08003bc8 	.word	0x08003bc8
 80038c4:	08003bc8 	.word	0x08003bc8
 80038c8:	08003bc8 	.word	0x08003bc8
 80038cc:	08003bcc 	.word	0x08003bcc

080038d0 <memcpy>:
 80038d0:	2300      	movs	r3, #0
 80038d2:	b510      	push	{r4, lr}
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d100      	bne.n	80038da <memcpy+0xa>
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	5ccc      	ldrb	r4, [r1, r3]
 80038dc:	54c4      	strb	r4, [r0, r3]
 80038de:	3301      	adds	r3, #1
 80038e0:	e7f8      	b.n	80038d4 <memcpy+0x4>

080038e2 <memset>:
 80038e2:	0003      	movs	r3, r0
 80038e4:	1812      	adds	r2, r2, r0
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d100      	bne.n	80038ec <memset+0xa>
 80038ea:	4770      	bx	lr
 80038ec:	7019      	strb	r1, [r3, #0]
 80038ee:	3301      	adds	r3, #1
 80038f0:	e7f9      	b.n	80038e6 <memset+0x4>

080038f2 <strcpy>:
 80038f2:	0003      	movs	r3, r0
 80038f4:	780a      	ldrb	r2, [r1, #0]
 80038f6:	3101      	adds	r1, #1
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	3301      	adds	r3, #1
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	d1f9      	bne.n	80038f4 <strcpy+0x2>
 8003900:	4770      	bx	lr

08003902 <strncmp>:
 8003902:	2300      	movs	r3, #0
 8003904:	b530      	push	{r4, r5, lr}
 8003906:	429a      	cmp	r2, r3
 8003908:	d00a      	beq.n	8003920 <strncmp+0x1e>
 800390a:	3a01      	subs	r2, #1
 800390c:	5cc4      	ldrb	r4, [r0, r3]
 800390e:	5ccd      	ldrb	r5, [r1, r3]
 8003910:	42ac      	cmp	r4, r5
 8003912:	d104      	bne.n	800391e <strncmp+0x1c>
 8003914:	4293      	cmp	r3, r2
 8003916:	d002      	beq.n	800391e <strncmp+0x1c>
 8003918:	3301      	adds	r3, #1
 800391a:	2c00      	cmp	r4, #0
 800391c:	d1f6      	bne.n	800390c <strncmp+0xa>
 800391e:	1b63      	subs	r3, r4, r5
 8003920:	0018      	movs	r0, r3
 8003922:	bd30      	pop	{r4, r5, pc}

08003924 <_init>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr

08003930 <_fini>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003936:	bc08      	pop	{r3}
 8003938:	469e      	mov	lr, r3
 800393a:	4770      	bx	lr
